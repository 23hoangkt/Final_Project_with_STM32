
final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004860  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08004a00  08004a00  00005a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004de8  08004de8  000061d0  2**0
                  CONTENTS
  4 .ARM          00000008  08004de8  08004de8  00005de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004df0  08004df0  000061d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df0  08004df0  00005df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004df4  08004df4  00005df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d0  20000000  08004df8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001d0  08004fc8  000061d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08004fc8  0000634c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000061d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e61  00000000  00000000  00006200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000074e  00000000  00000000  00008061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002a8  00000000  00000000  000087b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001ea  00000000  00000000  00008a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015db1  00000000  00000000  00008c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003070  00000000  00000000  0001e9f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb63  00000000  00000000  00021a63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ad5c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001af8  00000000  00000000  000ad60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000af104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d0 	.word	0x200001d0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080049e8 	.word	0x080049e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	080049e8 	.word	0x080049e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	db0b      	blt.n	8000c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	f003 021f 	and.w	r2, r3, #31
 8000c70:	4907      	ldr	r1, [pc, #28]	@ (8000c90 <__NVIC_EnableIRQ+0x38>)
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	095b      	lsrs	r3, r3, #5
 8000c78:	2001      	movs	r0, #1
 8000c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c82:	bf00      	nop
 8000c84:	370c      	adds	r7, #12
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000e100 	.word	0xe000e100

08000c94 <I2C1_Init>:

const float speedOfSound = 0.0343 / 2; // cm/µs


// Khởi tạo I2C1
void I2C1_Init(void) {
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= (1 << 21);   // Bật clock I2C1
 8000c98:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <I2C1_Init+0xa0>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a25      	ldr	r2, [pc, #148]	@ (8000d34 <I2C1_Init+0xa0>)
 8000c9e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
    RCC->AHB1ENR |= (1 << 1);    // Bật clock GPIOB
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <I2C1_Init+0xa0>)
 8000ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca8:	4a22      	ldr	r2, [pc, #136]	@ (8000d34 <I2C1_Init+0xa0>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình chân PB8, PB9 làm Alternate Function (AF4)
    GPIOB->MODER |= (2 << 16) | (2 << 18);
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <I2C1_Init+0xa4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a20      	ldr	r2, [pc, #128]	@ (8000d38 <I2C1_Init+0xa4>)
 8000cb6:	f443 2320 	orr.w	r3, r3, #655360	@ 0xa0000
 8000cba:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << 8) | (1 << 9);
 8000cbc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d38 <I2C1_Init+0xa4>)
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000d38 <I2C1_Init+0xa4>)
 8000cc2:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000cc6:	6053      	str	r3, [r2, #4]
    GPIOB->OSPEEDR |= (3 << 16) | (3 << 18);
 8000cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d38 <I2C1_Init+0xa4>)
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	4a1a      	ldr	r2, [pc, #104]	@ (8000d38 <I2C1_Init+0xa4>)
 8000cce:	f443 2370 	orr.w	r3, r3, #983040	@ 0xf0000
 8000cd2:	6093      	str	r3, [r2, #8]
    GPIOB->PUPDR |= (1 << 16) | (1 << 18);
 8000cd4:	4b18      	ldr	r3, [pc, #96]	@ (8000d38 <I2C1_Init+0xa4>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a17      	ldr	r2, [pc, #92]	@ (8000d38 <I2C1_Init+0xa4>)
 8000cda:	f443 23a0 	orr.w	r3, r3, #327680	@ 0x50000
 8000cde:	60d3      	str	r3, [r2, #12]
    GPIOB->AFR[1] |= (4 << 0) | (4 << 4);
 8000ce0:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <I2C1_Init+0xa4>)
 8000ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ce4:	4a14      	ldr	r2, [pc, #80]	@ (8000d38 <I2C1_Init+0xa4>)
 8000ce6:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8000cea:	6253      	str	r3, [r2, #36]	@ 0x24

    // Reset I2C
    I2C1->CR1 |= (1 << 15);
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <I2C1_Init+0xa8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <I2C1_Init+0xa8>)
 8000cf2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cf6:	6013      	str	r3, [r2, #0]
    I2C1->CR1 &= ~(1 << 15);
 8000cf8:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <I2C1_Init+0xa8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0f      	ldr	r2, [pc, #60]	@ (8000d3c <I2C1_Init+0xa8>)
 8000cfe:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000d02:	6013      	str	r3, [r2, #0]

    // Thiết lập clock I2C
    I2C1->CR2 |= (45 << 0);   // Tần số PCLK1 = 45 MHz
 8000d04:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <I2C1_Init+0xa8>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	4a0c      	ldr	r2, [pc, #48]	@ (8000d3c <I2C1_Init+0xa8>)
 8000d0a:	f043 032d 	orr.w	r3, r3, #45	@ 0x2d
 8000d0e:	6053      	str	r3, [r2, #4]
    I2C1->CCR = 225;          // Thiết lập tốc độ truyền
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <I2C1_Init+0xa8>)
 8000d12:	22e1      	movs	r2, #225	@ 0xe1
 8000d14:	61da      	str	r2, [r3, #28]
    I2C1->TRISE = 46;         // Thời gian tăng
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <I2C1_Init+0xa8>)
 8000d18:	222e      	movs	r2, #46	@ 0x2e
 8000d1a:	621a      	str	r2, [r3, #32]

    // Bật I2C
    I2C1->CR1 |= (1 << 0);
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <I2C1_Init+0xa8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a06      	ldr	r2, [pc, #24]	@ (8000d3c <I2C1_Init+0xa8>)
 8000d22:	f043 0301 	orr.w	r3, r3, #1
 8000d26:	6013      	str	r3, [r2, #0]
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020400 	.word	0x40020400
 8000d3c:	40005400 	.word	0x40005400

08000d40 <I2C_Start>:

// Gửi Start Condition
void I2C_Start(void) {
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8000d44:	4b09      	ldr	r3, [pc, #36]	@ (8000d6c <I2C_Start+0x2c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <I2C_Start+0x2c>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
    while (!(I2C1->SR1 & I2C_SR1_SB));
 8000d50:	bf00      	nop
 8000d52:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <I2C_Start+0x2c>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f9      	beq.n	8000d52 <I2C_Start+0x12>
}
 8000d5e:	bf00      	nop
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	40005400 	.word	0x40005400

08000d70 <I2C_Stop>:

// Gửi Stop Condition
void I2C_Stop(void) {
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000d74:	4b05      	ldr	r3, [pc, #20]	@ (8000d8c <I2C_Stop+0x1c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <I2C_Stop+0x1c>)
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40005400 	.word	0x40005400

08000d90 <I2C_Address>:

// Gửi địa chỉ thiết bị
void I2C_Address(uint8_t Address) {
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
    I2C1->DR = Address << 1;  // Địa chỉ + bit Write (0)
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4a08      	ldr	r2, [pc, #32]	@ (8000dc0 <I2C_Address+0x30>)
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000da2:	bf00      	nop
 8000da4:	4b06      	ldr	r3, [pc, #24]	@ (8000dc0 <I2C_Address+0x30>)
 8000da6:	695b      	ldr	r3, [r3, #20]
 8000da8:	f003 0302 	and.w	r3, r3, #2
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d0f9      	beq.n	8000da4 <I2C_Address+0x14>
    (void)I2C1->SR2;          // Clear ADDR flag
 8000db0:	4b03      	ldr	r3, [pc, #12]	@ (8000dc0 <I2C_Address+0x30>)
 8000db2:	699b      	ldr	r3, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	40005400 	.word	0x40005400

08000dc4 <I2C_Write>:

// Gửi dữ liệu
void I2C_Write(uint8_t data) {
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 8000dce:	bf00      	nop
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000e00 <I2C_Write+0x3c>)
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d0f9      	beq.n	8000dd0 <I2C_Write+0xc>
    I2C1->DR = data;
 8000ddc:	4a08      	ldr	r2, [pc, #32]	@ (8000e00 <I2C_Write+0x3c>)
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 8000de2:	bf00      	nop
 8000de4:	4b06      	ldr	r3, [pc, #24]	@ (8000e00 <I2C_Write+0x3c>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d0f9      	beq.n	8000de4 <I2C_Write+0x20>
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40005400 	.word	0x40005400

08000e04 <LCD_Write>:

// Ghi dữ liệu ra LCD
void LCD_Write(uint8_t Address, uint8_t *Data, int size) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b086      	sub	sp, #24
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	60b9      	str	r1, [r7, #8]
 8000e0e:	607a      	str	r2, [r7, #4]
 8000e10:	73fb      	strb	r3, [r7, #15]
    I2C_Start();
 8000e12:	f7ff ff95 	bl	8000d40 <I2C_Start>
    I2C_Address(Address);
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff ffb9 	bl	8000d90 <I2C_Address>
    for (int i = 0; i < size; i++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e009      	b.n	8000e38 <LCD_Write+0x34>
        I2C_Write(Data[i]);
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	4413      	add	r3, r2
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ffc9 	bl	8000dc4 <I2C_Write>
    for (int i = 0; i < size; i++) {
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	3301      	adds	r3, #1
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	dbf1      	blt.n	8000e24 <LCD_Write+0x20>
    }
    I2C_Stop();
 8000e40:	f7ff ff96 	bl	8000d70 <I2C_Stop>
}
 8000e44:	bf00      	nop
 8000e46:	3718      	adds	r7, #24
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <lcd_send_cmd>:

// Gửi lệnh tới LCD
void lcd_send_cmd(char cmd) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
    char data_u = (cmd & 0xF0);
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f023 030f 	bic.w	r3, r3, #15
 8000e5c:	73fb      	strb	r3, [r7, #15]
    char data_l = ((cmd << 4) & 0xF0);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	011b      	lsls	r3, r3, #4
 8000e62:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	f043 030c 	orr.w	r3, r3, #12
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	723b      	strb	r3, [r7, #8]
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	f043 0308 	orr.w	r3, r3, #8
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	727b      	strb	r3, [r7, #9]
 8000e78:	7bbb      	ldrb	r3, [r7, #14]
 8000e7a:	f043 030c 	orr.w	r3, r3, #12
 8000e7e:	b2db      	uxtb	r3, r3
 8000e80:	72bb      	strb	r3, [r7, #10]
 8000e82:	7bbb      	ldrb	r3, [r7, #14]
 8000e84:	f043 0308 	orr.w	r3, r3, #8
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	72fb      	strb	r3, [r7, #11]
        data_u | 0x0C, // EN=1, RS=0
        data_u | 0x08, // EN=0, RS=0
        data_l | 0x0C, // EN=1, RS=0
        data_l | 0x08  // EN=0, RS=0
    };
    LCD_Write(SLAVE_ADDRESS_LCD, data_t, 4);
 8000e8c:	f107 0308 	add.w	r3, r7, #8
 8000e90:	2204      	movs	r2, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	2027      	movs	r0, #39	@ 0x27
 8000e96:	f7ff ffb5 	bl	8000e04 <LCD_Write>
}
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <lcd_send_data>:

// Gửi dữ liệu (ký tự) tới LCD
void lcd_send_data(char data) {
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
    char data_u = (data & 0xF0);
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	f023 030f 	bic.w	r3, r3, #15
 8000eb2:	73fb      	strb	r3, [r7, #15]
    char data_l = ((data << 4) & 0xF0);
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	73bb      	strb	r3, [r7, #14]
    uint8_t data_t[4] = {
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	f043 030d 	orr.w	r3, r3, #13
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	723b      	strb	r3, [r7, #8]
 8000ec4:	7bfb      	ldrb	r3, [r7, #15]
 8000ec6:	f043 0309 	orr.w	r3, r3, #9
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	727b      	strb	r3, [r7, #9]
 8000ece:	7bbb      	ldrb	r3, [r7, #14]
 8000ed0:	f043 030d 	orr.w	r3, r3, #13
 8000ed4:	b2db      	uxtb	r3, r3
 8000ed6:	72bb      	strb	r3, [r7, #10]
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	f043 0309 	orr.w	r3, r3, #9
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	72fb      	strb	r3, [r7, #11]
        data_u | 0x0D, // EN=1, RS=1
        data_u | 0x09, // EN=0, RS=1
        data_l | 0x0D, // EN=1, RS=1
        data_l | 0x09  // EN=0, RS=1
    };
    LCD_Write(SLAVE_ADDRESS_LCD, data_t, 4);
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	2027      	movs	r0, #39	@ 0x27
 8000eec:	f7ff ff8a 	bl	8000e04 <LCD_Write>
}
 8000ef0:	bf00      	nop
 8000ef2:	3710      	adds	r7, #16
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <lcd_put_cur>:
void lcd_clear(void) {
    lcd_send_cmd(0x01);  // Lệnh xóa màn hình
}

// Đặt con trỏ tại vị trí (hàng, cột)
void lcd_put_cur(int row, int col) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
    char pos;
    if (row == 0) pos = 0x80 + col;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d104      	bne.n	8000f12 <lcd_put_cur+0x1a>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	3b80      	subs	r3, #128	@ 0x80
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	e003      	b.n	8000f1a <lcd_put_cur+0x22>
    else pos = 0xC0 + col;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	3b40      	subs	r3, #64	@ 0x40
 8000f18:	73fb      	strb	r3, [r7, #15]
    lcd_send_cmd(pos);
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff95 	bl	8000e4c <lcd_send_cmd>
}
 8000f22:	bf00      	nop
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <lcd_init>:

// Khởi tạo LCD
void lcd_init(void) {
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x02);  // Return home
 8000f2e:	2002      	movs	r0, #2
 8000f30:	f7ff ff8c 	bl	8000e4c <lcd_send_cmd>
    lcd_send_cmd(0x28);  // 4-bit mode, 2 lines
 8000f34:	2028      	movs	r0, #40	@ 0x28
 8000f36:	f7ff ff89 	bl	8000e4c <lcd_send_cmd>
    lcd_send_cmd(0x0C);  // Display ON, cursor OFF
 8000f3a:	200c      	movs	r0, #12
 8000f3c:	f7ff ff86 	bl	8000e4c <lcd_send_cmd>
    lcd_send_cmd(0x06);  // Increment cursor
 8000f40:	2006      	movs	r0, #6
 8000f42:	f7ff ff83 	bl	8000e4c <lcd_send_cmd>
    lcd_send_cmd(0x01);  // Clear display
 8000f46:	2001      	movs	r0, #1
 8000f48:	f7ff ff80 	bl	8000e4c <lcd_send_cmd>
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <lcd_send_string>:

// Hiển thị chuỗi ký tự trên LCD
void lcd_send_string(char *str) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 8000f58:	e006      	b.n	8000f68 <lcd_send_string+0x18>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	607a      	str	r2, [r7, #4]
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff ff9d 	bl	8000ea2 <lcd_send_data>
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f4      	bne.n	8000f5a <lcd_send_string+0xa>
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	0000      	movs	r0, r0
 8000f7c:	0000      	movs	r0, r0
	...

08000f80 <measure_distance>:

// For the hcsr04
float measure_distance(void) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
    uint32_t timeout = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
    uint32_t numTicks = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60bb      	str	r3, [r7, #8]
    float distance = 0;
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]

    // 1. Đưa TRIG xuống LOW
    GPIOA->ODR &= ~(1 << TRIG_PIN);
 8000f94:	4b34      	ldr	r3, [pc, #208]	@ (8001068 <measure_distance+0xe8>)
 8000f96:	695b      	ldr	r3, [r3, #20]
 8000f98:	4a33      	ldr	r2, [pc, #204]	@ (8001068 <measure_distance+0xe8>)
 8000f9a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000f9e:	6153      	str	r3, [r2, #20]
    delay_us(2);
 8000fa0:	2002      	movs	r0, #2
 8000fa2:	f000 f901 	bl	80011a8 <delay_us>

    // 2. Đưa TRIG lên HIGH trong 10 µs
    GPIOA->ODR |= (1 << TRIG_PIN);
 8000fa6:	4b30      	ldr	r3, [pc, #192]	@ (8001068 <measure_distance+0xe8>)
 8000fa8:	695b      	ldr	r3, [r3, #20]
 8000faa:	4a2f      	ldr	r2, [pc, #188]	@ (8001068 <measure_distance+0xe8>)
 8000fac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fb0:	6153      	str	r3, [r2, #20]
    delay_us(10);
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f000 f8f8 	bl	80011a8 <delay_us>
    GPIOA->ODR &= ~(1 << TRIG_PIN);
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <measure_distance+0xe8>)
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	4a2a      	ldr	r2, [pc, #168]	@ (8001068 <measure_distance+0xe8>)
 8000fbe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000fc2:	6153      	str	r3, [r2, #20]

    // 3. Chờ ECHO lên HIGH với timeout
    timeout = 100000; // 100 ms timeout
 8000fc4:	4b29      	ldr	r3, [pc, #164]	@ (800106c <measure_distance+0xec>)
 8000fc6:	60fb      	str	r3, [r7, #12]
    while (!(GPIOA->IDR & (1 << ECHO_PIN)) && timeout--) {
 8000fc8:	e002      	b.n	8000fd0 <measure_distance+0x50>
        delay_us(1);
 8000fca:	2001      	movs	r0, #1
 8000fcc:	f000 f8ec 	bl	80011a8 <delay_us>
    while (!(GPIOA->IDR & (1 << ECHO_PIN)) && timeout--) {
 8000fd0:	4b25      	ldr	r3, [pc, #148]	@ (8001068 <measure_distance+0xe8>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d104      	bne.n	8000fe6 <measure_distance+0x66>
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	1e5a      	subs	r2, r3, #1
 8000fe0:	60fa      	str	r2, [r7, #12]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f1      	bne.n	8000fca <measure_distance+0x4a>
    }
    if (timeout == 0) return -1; // Timeout error
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d101      	bne.n	8000ff0 <measure_distance+0x70>
 8000fec:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <measure_distance+0xf0>)
 8000fee:	e030      	b.n	8001052 <measure_distance+0xd2>

    // 4. Đo thời gian ECHO ở mức HIGH
    numTicks = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
    while (GPIOA->IDR & (1 << ECHO_PIN)) {
 8000ff4:	e00c      	b.n	8001010 <measure_distance+0x90>
        numTicks++;
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
        delay_us(1);
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f000 f8d3 	bl	80011a8 <delay_us>
        if (numTicks > 30000) return -1; // Timeout error
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	f247 5230 	movw	r2, #30000	@ 0x7530
 8001008:	4293      	cmp	r3, r2
 800100a:	d901      	bls.n	8001010 <measure_distance+0x90>
 800100c:	4b18      	ldr	r3, [pc, #96]	@ (8001070 <measure_distance+0xf0>)
 800100e:	e020      	b.n	8001052 <measure_distance+0xd2>
    while (GPIOA->IDR & (1 << ECHO_PIN)) {
 8001010:	4b15      	ldr	r3, [pc, #84]	@ (8001068 <measure_distance+0xe8>)
 8001012:	691b      	ldr	r3, [r3, #16]
 8001014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1ec      	bne.n	8000ff6 <measure_distance+0x76>
    }

    // 5. Tính khoảng cách
    distance = numTicks * 0.343 / 2; // Sửa công thức: numTicks x tốc độ âm thanh / 2
 800101c:	68b8      	ldr	r0, [r7, #8]
 800101e:	f7ff fa79 	bl	8000514 <__aeabi_ui2d>
 8001022:	a30f      	add	r3, pc, #60	@ (adr r3, 8001060 <measure_distance+0xe0>)
 8001024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001028:	f7ff faee 	bl	8000608 <__aeabi_dmul>
 800102c:	4602      	mov	r2, r0
 800102e:	460b      	mov	r3, r1
 8001030:	4610      	mov	r0, r2
 8001032:	4619      	mov	r1, r3
 8001034:	f04f 0200 	mov.w	r2, #0
 8001038:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800103c:	f7ff fc0e 	bl	800085c <__aeabi_ddiv>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	4610      	mov	r0, r2
 8001046:	4619      	mov	r1, r3
 8001048:	f7ff fdb6 	bl	8000bb8 <__aeabi_d2f>
 800104c:	4603      	mov	r3, r0
 800104e:	607b      	str	r3, [r7, #4]
    return distance;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb0 0a67 	vmov.f32	s0, s15
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	45a1cac1 	.word	0x45a1cac1
 8001064:	3fd5f3b6 	.word	0x3fd5f3b6
 8001068:	40020000 	.word	0x40020000
 800106c:	000186a0 	.word	0x000186a0
 8001070:	bf800000 	.word	0xbf800000

08001074 <UART_Init>:

// For the UART
void UART_Init(void) {
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Bật clock GPIOA
 8001078:	4b16      	ldr	r3, [pc, #88]	@ (80010d4 <UART_Init+0x60>)
 800107a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107c:	4a15      	ldr	r2, [pc, #84]	@ (80010d4 <UART_Init+0x60>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Bật clock USART2
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <UART_Init+0x60>)
 8001086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001088:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <UART_Init+0x60>)
 800108a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108e:	6413      	str	r3, [r2, #64]	@ 0x40

    // Cấu hình PA2 (TX) và PA3 (RX) cho USART2
    GPIOA->MODER |= (2 << (2 * 2)) | (2 << (3 * 2)); // Chế độ Alternate Function
 8001090:	4b11      	ldr	r3, [pc, #68]	@ (80010d8 <UART_Init+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a10      	ldr	r2, [pc, #64]	@ (80010d8 <UART_Init+0x64>)
 8001096:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 800109a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << (2 * 4)) | (7 << (3 * 4)); // AF7 cho USART2
 800109c:	4b0e      	ldr	r3, [pc, #56]	@ (80010d8 <UART_Init+0x64>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4a0d      	ldr	r2, [pc, #52]	@ (80010d8 <UART_Init+0x64>)
 80010a2:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80010a6:	6213      	str	r3, [r2, #32]

    // Cấu hình baud rate (9600 với clock APB1 là 16MHz)
    USART2->BRR = 16000000 / 9600;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <UART_Init+0x68>)
 80010aa:	f240 6282 	movw	r2, #1666	@ 0x682
 80010ae:	609a      	str	r2, [r3, #8]

    // Cấu hình USART
    USART2->CR1 |= USART_CR1_UE;  // Bật USART
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <UART_Init+0x68>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	4a09      	ldr	r2, [pc, #36]	@ (80010dc <UART_Init+0x68>)
 80010b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80010ba:	60d3      	str	r3, [r2, #12]
    USART2->CR1 |= USART_CR1_TE;  // Bật Transmitter
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <UART_Init+0x68>)
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	4a06      	ldr	r2, [pc, #24]	@ (80010dc <UART_Init+0x68>)
 80010c2:	f043 0308 	orr.w	r3, r3, #8
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40020000 	.word	0x40020000
 80010dc:	40004400 	.word	0x40004400

080010e0 <UART_SendChar>:

void UART_SendChar(char c) {
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)); // Chờ đến khi TXE = 1
 80010ea:	bf00      	nop
 80010ec:	4b07      	ldr	r3, [pc, #28]	@ (800110c <UART_SendChar+0x2c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0f9      	beq.n	80010ec <UART_SendChar+0xc>
    USART2->DR = c;                      // Gửi ký tự
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <UART_SendChar+0x2c>)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	6053      	str	r3, [r2, #4]
}
 80010fe:	bf00      	nop
 8001100:	370c      	adds	r7, #12
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	40004400 	.word	0x40004400

08001110 <UART_SendString>:

void UART_SendString(const char *str) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001118:	e006      	b.n	8001128 <UART_SendString+0x18>
        UART_SendChar(*str++); // Gửi từng ký tự trong chuỗi
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	1c5a      	adds	r2, r3, #1
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff ffdc 	bl	80010e0 <UART_SendChar>
    while (*str) {
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d1f4      	bne.n	800111a <UART_SendString+0xa>
    }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <GPIO_Trig_Echo_Init>:

// Hàm khởi tạo GPIO cho Trig và Echo
void GPIO_Trig_Echo_Init(void) {
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Bật clock GPIOA
 8001140:	4b17      	ldr	r3, [pc, #92]	@ (80011a0 <GPIO_Trig_Echo_Init+0x64>)
 8001142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001144:	4a16      	ldr	r2, [pc, #88]	@ (80011a0 <GPIO_Trig_Echo_Init+0x64>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6313      	str	r3, [r2, #48]	@ 0x30

    // Cấu hình TRIG (PA9) làm Output
    GPIOA->MODER |= (1 << (TRIG_PIN * 2));       // Chế độ Output
 800114c:	4b15      	ldr	r3, [pc, #84]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a14      	ldr	r2, [pc, #80]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 8001152:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001156:	6013      	str	r3, [r2, #0]
    GPIOA->OTYPER &= ~(1 << TRIG_PIN);          // Push-Pull
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	4a11      	ldr	r2, [pc, #68]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 800115e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001162:	6053      	str	r3, [r2, #4]
    GPIOA->OSPEEDR |= (3 << (TRIG_PIN * 2));    // Tốc độ cao
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a0e      	ldr	r2, [pc, #56]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 800116a:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800116e:	6093      	str	r3, [r2, #8]
    GPIOA->PUPDR &= ~(3 << (TRIG_PIN * 2));     // Không dùng Pull-up/Pull-down
 8001170:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	4a0b      	ldr	r2, [pc, #44]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 8001176:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 800117a:	60d3      	str	r3, [r2, #12]

    // Cấu hình ECHO (PA10) làm Input
    GPIOA->MODER &= ~(3 << (ECHO_PIN * 2));     // Chế độ Input
 800117c:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a08      	ldr	r2, [pc, #32]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 8001182:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001186:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(3 << (ECHO_PIN * 2));     // Không dùng Pull-up/Pull-down
 8001188:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	4a05      	ldr	r2, [pc, #20]	@ (80011a4 <GPIO_Trig_Echo_Init+0x68>)
 800118e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8001192:	60d3      	str	r3, [r2, #12]
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020000 	.word	0x40020000

080011a8 <delay_us>:

//Hàm delay theo micro giây
void delay_us(uint32_t us) {
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // Bật clock cho Timer 3
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <delay_us+0x64>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b4:	4a15      	ldr	r2, [pc, #84]	@ (800120c <delay_us+0x64>)
 80011b6:	f043 0302 	orr.w	r3, r3, #2
 80011ba:	6413      	str	r3, [r2, #64]	@ 0x40
    TIM3->PSC = 48 - 1;                 // Prescaler để đạt 1 MHz (1 µs)
 80011bc:	4b14      	ldr	r3, [pc, #80]	@ (8001210 <delay_us+0x68>)
 80011be:	222f      	movs	r2, #47	@ 0x2f
 80011c0:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM3->ARR = us;                     // Giá trị Auto-reload
 80011c2:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <delay_us+0x68>)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

    TIM3->CNT = 0;                      // Reset Counter
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <delay_us+0x68>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24
    TIM3->CR1 |= TIM_CR1_CEN;           // Bật Counter
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <delay_us+0x68>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001210 <delay_us+0x68>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6013      	str	r3, [r2, #0]

    while (!(TIM3->SR & TIM_SR_UIF));   // Chờ đến khi đếm xong
 80011da:	bf00      	nop
 80011dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <delay_us+0x68>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d0f9      	beq.n	80011dc <delay_us+0x34>
    TIM3->SR &= ~TIM_SR_UIF;            // Xóa cờ update
 80011e8:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <delay_us+0x68>)
 80011ea:	691b      	ldr	r3, [r3, #16]
 80011ec:	4a08      	ldr	r2, [pc, #32]	@ (8001210 <delay_us+0x68>)
 80011ee:	f023 0301 	bic.w	r3, r3, #1
 80011f2:	6113      	str	r3, [r2, #16]
    TIM3->CR1 &= ~TIM_CR1_CEN;          // Tắt Counter
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <delay_us+0x68>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a05      	ldr	r2, [pc, #20]	@ (8001210 <delay_us+0x68>)
 80011fa:	f023 0301 	bic.w	r3, r3, #1
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	40023800 	.word	0x40023800
 8001210:	40000400 	.word	0x40000400

08001214 <delay_ms>:

// Hàm delay theo mili giây
void delay_ms(uint32_t ms) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    while (ms--) {
 800121c:	e003      	b.n	8001226 <delay_ms+0x12>
        delay_us(1000); // 1 ms = 1000 µs
 800121e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001222:	f7ff ffc1 	bl	80011a8 <delay_us>
    while (ms--) {
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	1e5a      	subs	r2, r3, #1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d1f6      	bne.n	800121e <delay_ms+0xa>
    }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <SysTick_Init>:



void SysTick_Init(uint32_t sysTickFreq)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
    // Enable the SysTick timer and interrupt, with a frequency of sysTickFreq Hz
    // Assuming the System Core Clock is already set to the desired frequency (e.g., 72 MHz on STM32F103)

    uint32_t reloadValue = (SystemCoreClock / sysTickFreq) - 1;  // Reload value for desired frequency
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <SysTick_Init+0x48>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	3b01      	subs	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]

    // Set the reload value (24-bit down-counter)
    SysTick->LOAD = reloadValue;
 8001252:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <SysTick_Init+0x4c>)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	6053      	str	r3, [r2, #4]

    // Clear the current value register
    SysTick->VAL = 0;
 8001258:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <SysTick_Init+0x4c>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]

    // Configure the SysTick timer to use the system clock (AHB clock)
    SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 800125e:	4b0a      	ldr	r3, [pc, #40]	@ (8001288 <SysTick_Init+0x4c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a09      	ldr	r2, [pc, #36]	@ (8001288 <SysTick_Init+0x4c>)
 8001264:	f043 0304 	orr.w	r3, r3, #4
 8001268:	6013      	str	r3, [r2, #0]

    // Enable SysTick interrupt and the timer
    SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk | SysTick_CTRL_ENABLE_Msk;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <SysTick_Init+0x4c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a06      	ldr	r2, [pc, #24]	@ (8001288 <SysTick_Init+0x4c>)
 8001270:	f043 0303 	orr.w	r3, r3, #3
 8001274:	6013      	str	r3, [r2, #0]
}
 8001276:	bf00      	nop
 8001278:	3714      	adds	r7, #20
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	20000004 	.word	0x20000004
 8001288:	e000e010 	.word	0xe000e010

0800128c <SysTick_Handler>:

// Trình xử lý ngắt SysTick (tăng tick mỗi 1ms)
void SysTick_Handler(void) {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
    tick_count++;  // Tăng bộ đếm millisecond
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <SysTick_Handler+0x18>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	3301      	adds	r3, #1
 8001296:	4a03      	ldr	r2, [pc, #12]	@ (80012a4 <SysTick_Handler+0x18>)
 8001298:	6013      	str	r3, [r2, #0]
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	200001f0 	.word	0x200001f0

080012a8 <getTick>:

// Hàm trả về số tick hiện tại
uint32_t getTick(void) {
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
    return tick_count;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <getTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	200001f0 	.word	0x200001f0

080012c0 <GPIO_Init>:


// Hàm khởi tạo GPIO cho LED và Button
void GPIO_Init(void) {
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
    // 1. Kích hoạt xung nhịp cho GPIOA và GPIOC
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;  // Bật clock cho GPIOA
 80012c4:	4b35      	ldr	r3, [pc, #212]	@ (800139c <GPIO_Init+0xdc>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c8:	4a34      	ldr	r2, [pc, #208]	@ (800139c <GPIO_Init+0xdc>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;  // Bật clock cho GPIOC
 80012d0:	4b32      	ldr	r3, [pc, #200]	@ (800139c <GPIO_Init+0xdc>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	4a31      	ldr	r2, [pc, #196]	@ (800139c <GPIO_Init+0xdc>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6313      	str	r3, [r2, #48]	@ 0x30

    // 2. Cấu hình PA5 (LED) là output mode
    GPIOA->MODER &= ~(3 << (LED_PIN * 2));  // Xóa MODER5
 80012dc:	4b30      	ldr	r3, [pc, #192]	@ (80013a0 <GPIO_Init+0xe0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a2f      	ldr	r2, [pc, #188]	@ (80013a0 <GPIO_Init+0xe0>)
 80012e2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80012e6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (LED_PIN * 2));   // Set MODER5 = 01 (Output)
 80012e8:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <GPIO_Init+0xe0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a2c      	ldr	r2, [pc, #176]	@ (80013a0 <GPIO_Init+0xe0>)
 80012ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f2:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(1 << 11);
 80012f4:	4b2a      	ldr	r3, [pc, #168]	@ (80013a0 <GPIO_Init+0xe0>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	4a29      	ldr	r2, [pc, #164]	@ (80013a0 <GPIO_Init+0xe0>)
 80012fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80012fe:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1 << (LED_PIN *2));
 8001300:	4b27      	ldr	r3, [pc, #156]	@ (80013a0 <GPIO_Init+0xe0>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	4a26      	ldr	r2, [pc, #152]	@ (80013a0 <GPIO_Init+0xe0>)
 8001306:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800130a:	60d3      	str	r3, [r2, #12]

    // led đỏ
    GPIOA->MODER &= ~(3 << (LED_RED_PIN * 2));
 800130c:	4b24      	ldr	r3, [pc, #144]	@ (80013a0 <GPIO_Init+0xe0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a23      	ldr	r2, [pc, #140]	@ (80013a0 <GPIO_Init+0xe0>)
 8001312:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001316:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (LED_RED_PIN * 2));
 8001318:	4b21      	ldr	r3, [pc, #132]	@ (80013a0 <GPIO_Init+0xe0>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a20      	ldr	r2, [pc, #128]	@ (80013a0 <GPIO_Init+0xe0>)
 800131e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001322:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(1 << 15);
 8001324:	4b1e      	ldr	r3, [pc, #120]	@ (80013a0 <GPIO_Init+0xe0>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4a1d      	ldr	r2, [pc, #116]	@ (80013a0 <GPIO_Init+0xe0>)
 800132a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800132e:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1 << (LED_RED_PIN *2));
 8001330:	4b1b      	ldr	r3, [pc, #108]	@ (80013a0 <GPIO_Init+0xe0>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a1a      	ldr	r2, [pc, #104]	@ (80013a0 <GPIO_Init+0xe0>)
 8001336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800133a:	60d3      	str	r3, [r2, #12]

    // led xanh
    GPIOA->MODER &= ~(3 << (LED_Green_PIN * 2));
 800133c:	4b18      	ldr	r3, [pc, #96]	@ (80013a0 <GPIO_Init+0xe0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <GPIO_Init+0xe0>)
 8001342:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001346:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << (LED_Green_PIN * 2));
 8001348:	4b15      	ldr	r3, [pc, #84]	@ (80013a0 <GPIO_Init+0xe0>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a14      	ldr	r2, [pc, #80]	@ (80013a0 <GPIO_Init+0xe0>)
 800134e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001352:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(1 << 13);
 8001354:	4b12      	ldr	r3, [pc, #72]	@ (80013a0 <GPIO_Init+0xe0>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	4a11      	ldr	r2, [pc, #68]	@ (80013a0 <GPIO_Init+0xe0>)
 800135a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800135e:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (1 << (LED_Green_PIN*2));
 8001360:	4b0f      	ldr	r3, [pc, #60]	@ (80013a0 <GPIO_Init+0xe0>)
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4a0e      	ldr	r2, [pc, #56]	@ (80013a0 <GPIO_Init+0xe0>)
 8001366:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800136a:	60d3      	str	r3, [r2, #12]

    // 3. Cấu hình PC13 (Button) là input mode
    GPIOC->MODER &= ~(3 << (BUTTON_PIN * 2));  // MODER13 = 00 (Input)
 800136c:	4b0d      	ldr	r3, [pc, #52]	@ (80013a4 <GPIO_Init+0xe4>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0c      	ldr	r2, [pc, #48]	@ (80013a4 <GPIO_Init+0xe4>)
 8001372:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001376:	6013      	str	r3, [r2, #0]

    // 4. Bật pull-up cho PC13
    GPIOC->PUPDR &= ~(3 << (BUTTON_PIN * 2));  // Xóa PUPDR13
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <GPIO_Init+0xe4>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4a09      	ldr	r2, [pc, #36]	@ (80013a4 <GPIO_Init+0xe4>)
 800137e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001382:	60d3      	str	r3, [r2, #12]
    GPIOC->PUPDR |= (1 << (BUTTON_PIN * 2));   // PUPDR13 = 01 (Pull-up)
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <GPIO_Init+0xe4>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a06      	ldr	r2, [pc, #24]	@ (80013a4 <GPIO_Init+0xe4>)
 800138a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020800 	.word	0x40020800

080013a8 <EXTI_Init>:


// Hàm khởi tạo ngắt EXTI cho nút nhấn
void EXTI_Init(void) {
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
    // 1. Kích hoạt clock cho SYSCFG
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <EXTI_Init+0x4c>)
 80013ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b0:	4a10      	ldr	r2, [pc, #64]	@ (80013f4 <EXTI_Init+0x4c>)
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b6:	6453      	str	r3, [r2, #68]	@ 0x44

    // 2. Kết nối PC13 với EXTI13 (EXTICR[3])
    SYSCFG->EXTICR[3] &= ~(0xF << 4);  // Xóa cấu hình cho EXTI13
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <EXTI_Init+0x50>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	4a0e      	ldr	r2, [pc, #56]	@ (80013f8 <EXTI_Init+0x50>)
 80013be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80013c2:	6153      	str	r3, [r2, #20]
    SYSCFG->EXTICR[3] |= (2 << 4);     // Chọn PC13 (0010)
 80013c4:	4b0c      	ldr	r3, [pc, #48]	@ (80013f8 <EXTI_Init+0x50>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a0b      	ldr	r2, [pc, #44]	@ (80013f8 <EXTI_Init+0x50>)
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	6153      	str	r3, [r2, #20]

    // 3. Bật ngắt cho EXTI13
    EXTI->IMR |= (1 << BUTTON_PIN);  // Cho phép ngắt tại line 13
 80013d0:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <EXTI_Init+0x54>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a09      	ldr	r2, [pc, #36]	@ (80013fc <EXTI_Init+0x54>)
 80013d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013da:	6013      	str	r3, [r2, #0]
    EXTI->FTSR |= (1 << BUTTON_PIN); // Kích hoạt ngắt cạnh xuống (falling edge)
 80013dc:	4b07      	ldr	r3, [pc, #28]	@ (80013fc <EXTI_Init+0x54>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	4a06      	ldr	r2, [pc, #24]	@ (80013fc <EXTI_Init+0x54>)
 80013e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013e6:	60d3      	str	r3, [r2, #12]

    // 4. Kích hoạt ngắt EXTI15_10 trong NVIC
    NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013e8:	2028      	movs	r0, #40	@ 0x28
 80013ea:	f7ff fc35 	bl	8000c58 <__NVIC_EnableIRQ>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40013800 	.word	0x40013800
 80013fc:	40013c00 	.word	0x40013c00

08001400 <EXTI15_10_IRQHandler>:



void EXTI15_10_IRQHandler(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
    uint32_t current_tick = getTick();
 8001406:	f7ff ff4f 	bl	80012a8 <getTick>
 800140a:	6078      	str	r0, [r7, #4]

    // Chống rung (debounce)
    if ((current_tick - last_button_press) > 50) {  // Debounce 50ms
 800140c:	4b14      	ldr	r3, [pc, #80]	@ (8001460 <EXTI15_10_IRQHandler+0x60>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b32      	cmp	r3, #50	@ 0x32
 8001416:	d913      	bls.n	8001440 <EXTI15_10_IRQHandler+0x40>
        system_state = !system_state;  // Đảo trạng thái hệ thống
 8001418:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <EXTI15_10_IRQHandler+0x64>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	bf0c      	ite	eq
 8001422:	2301      	moveq	r3, #1
 8001424:	2300      	movne	r3, #0
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	4b0e      	ldr	r3, [pc, #56]	@ (8001464 <EXTI15_10_IRQHandler+0x64>)
 800142c:	701a      	strb	r2, [r3, #0]

        // Tắt đèn LED (bật mức thấp)
        GPIOA->ODR &= ~(1 << LED_PIN);
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <EXTI15_10_IRQHandler+0x68>)
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <EXTI15_10_IRQHandler+0x68>)
 8001434:	f023 0320 	bic.w	r3, r3, #32
 8001438:	6153      	str	r3, [r2, #20]

        // Cập nhật thời gian nhấn lần cuối
        last_button_press = current_tick;
 800143a:	4a09      	ldr	r2, [pc, #36]	@ (8001460 <EXTI15_10_IRQHandler+0x60>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6013      	str	r3, [r2, #0]
    }

    // Xóa cờ pending cho EXTI
    if (EXTI->PR & (1 << BUTTON_PIN)) {
 8001440:	4b0a      	ldr	r3, [pc, #40]	@ (800146c <EXTI15_10_IRQHandler+0x6c>)
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <EXTI15_10_IRQHandler+0x58>
        EXTI->PR |= (1 << BUTTON_PIN);  // Xóa cờ pending
 800144c:	4b07      	ldr	r3, [pc, #28]	@ (800146c <EXTI15_10_IRQHandler+0x6c>)
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	4a06      	ldr	r2, [pc, #24]	@ (800146c <EXTI15_10_IRQHandler+0x6c>)
 8001452:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001456:	6153      	str	r3, [r2, #20]
    }
}
 8001458:	bf00      	nop
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	200001ec 	.word	0x200001ec
 8001464:	20000000 	.word	0x20000000
 8001468:	40020000 	.word	0x40020000
 800146c:	40013c00 	.word	0x40013c00

08001470 <toggleLED>:


void toggleLED(uint32_t ledPin, uint32_t frequency) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    static uint32_t lastTick = 0;
    static uint8_t ledState = 0;
    uint32_t interval = 1000 / frequency;
 800147a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	fbb2 f3f3 	udiv	r3, r2, r3
 8001484:	60fb      	str	r3, [r7, #12]

    if (getTick() - lastTick >= interval) {
 8001486:	f7ff ff0f 	bl	80012a8 <getTick>
 800148a:	4602      	mov	r2, r0
 800148c:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <toggleLED+0x74>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	429a      	cmp	r2, r3
 8001496:	d820      	bhi.n	80014da <toggleLED+0x6a>
        ledState = !ledState;
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <toggleLED+0x78>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	bf0c      	ite	eq
 80014a0:	2301      	moveq	r3, #1
 80014a2:	2300      	movne	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	4b0f      	ldr	r3, [pc, #60]	@ (80014e8 <toggleLED+0x78>)
 80014aa:	701a      	strb	r2, [r3, #0]
        if (ledState) {
 80014ac:	4b0e      	ldr	r3, [pc, #56]	@ (80014e8 <toggleLED+0x78>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d006      	beq.n	80014c2 <toggleLED+0x52>
            GPIOA->ODR |= ledPin;
 80014b4:	4b0d      	ldr	r3, [pc, #52]	@ (80014ec <toggleLED+0x7c>)
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	490c      	ldr	r1, [pc, #48]	@ (80014ec <toggleLED+0x7c>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4313      	orrs	r3, r2
 80014be:	614b      	str	r3, [r1, #20]
 80014c0:	e006      	b.n	80014d0 <toggleLED+0x60>
        } else {
            GPIOA->ODR &= ~ledPin;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <toggleLED+0x7c>)
 80014c4:	695a      	ldr	r2, [r3, #20]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	4908      	ldr	r1, [pc, #32]	@ (80014ec <toggleLED+0x7c>)
 80014cc:	4013      	ands	r3, r2
 80014ce:	614b      	str	r3, [r1, #20]
        }
        lastTick = getTick();
 80014d0:	f7ff feea 	bl	80012a8 <getTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4a03      	ldr	r2, [pc, #12]	@ (80014e4 <toggleLED+0x74>)
 80014d8:	6013      	str	r3, [r2, #0]
    }
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001f4 	.word	0x200001f4
 80014e8:	200001f8 	.word	0x200001f8
 80014ec:	40020000 	.word	0x40020000

080014f0 <TIM2_PWM_Init>:


void TIM2_PWM_Init(void) {
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
    // Bật clock cho Timer 2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80014f4:	4b2f      	ldr	r3, [pc, #188]	@ (80015b4 <TIM2_PWM_Init+0xc4>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	4a2e      	ldr	r2, [pc, #184]	@ (80015b4 <TIM2_PWM_Init+0xc4>)
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	6413      	str	r3, [r2, #64]	@ 0x40

    // Cấu hình PA5 (TIM2_CH1)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001500:	4b2c      	ldr	r3, [pc, #176]	@ (80015b4 <TIM2_PWM_Init+0xc4>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	4a2b      	ldr	r2, [pc, #172]	@ (80015b4 <TIM2_PWM_Init+0xc4>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER &= ~(0x3 << (5 * 2)); // Clear mode bits
 800150c:	4b2a      	ldr	r3, [pc, #168]	@ (80015b8 <TIM2_PWM_Init+0xc8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <TIM2_PWM_Init+0xc8>)
 8001512:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001516:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x2 << (5 * 2)); // Alternate Function mode
 8001518:	4b27      	ldr	r3, [pc, #156]	@ (80015b8 <TIM2_PWM_Init+0xc8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a26      	ldr	r2, [pc, #152]	@ (80015b8 <TIM2_PWM_Init+0xc8>)
 800151e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001522:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (0x1 << (5 * 4)); // AF1 cho TIM2_CH1
 8001524:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <TIM2_PWM_Init+0xc8>)
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <TIM2_PWM_Init+0xc8>)
 800152a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800152e:	6213      	str	r3, [r2, #32]

    // Cấu hình prescaler và ARR để tạo tần số PWM 1 kHz
    TIM2->PSC = 16 - 1;  // Prescaler để timer chạy ở 1 MHz
 8001530:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001534:	220f      	movs	r2, #15
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 1000;    // Auto-reload cho tần số 1 kHz
 8001538:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800153c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Đặt CCR1 (Duty cycle ban đầu = 0%)
    TIM2->CCR1 = 0;
 8001542:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001546:	2200      	movs	r2, #0
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34

    // Cấu hình PWM mode 1 cho TIM2 Channel 1
    TIM2->CCMR1 &= ~(0x7 << TIM_CCMR1_OC1M_Pos);
 800154a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001554:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001558:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (6 << TIM_CCMR1_OC1M_Pos); // PWM mode 1
 800155a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001564:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001568:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= TIM_CCMR1_OC1PE;          // Preload cho CCR1
 800156a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001574:	f043 0308 	orr.w	r3, r3, #8
 8001578:	6193      	str	r3, [r2, #24]

    // Kích hoạt output cho Channel 1
    TIM2->CCER |= TIM_CCER_CC1E;
 800157a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]

    // Bật chế độ tự động tải lại
    TIM2->CR1 |= TIM_CR1_ARPE;
 800158a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001598:	6013      	str	r3, [r2, #0]

    // Kích hoạt Timer
    TIM2->CR1 |= TIM_CR1_CEN;
 800159a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015a4:	f043 0301 	orr.w	r3, r3, #1
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000

080015bc <TIM4_PWM_Init>:

void TIM4_PWM_Init(void) {
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
    // Bật clock cho Timer 4
    RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80015c0:	4b28      	ldr	r3, [pc, #160]	@ (8001664 <TIM4_PWM_Init+0xa8>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c4:	4a27      	ldr	r2, [pc, #156]	@ (8001664 <TIM4_PWM_Init+0xa8>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	6413      	str	r3, [r2, #64]	@ 0x40

    // Cấu hình PB7 (TIM4_CH2)
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80015cc:	4b25      	ldr	r3, [pc, #148]	@ (8001664 <TIM4_PWM_Init+0xa8>)
 80015ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d0:	4a24      	ldr	r2, [pc, #144]	@ (8001664 <TIM4_PWM_Init+0xa8>)
 80015d2:	f043 0302 	orr.w	r3, r3, #2
 80015d6:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(0x3 << (7 * 2)); // Clear mode bits
 80015d8:	4b23      	ldr	r3, [pc, #140]	@ (8001668 <TIM4_PWM_Init+0xac>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a22      	ldr	r2, [pc, #136]	@ (8001668 <TIM4_PWM_Init+0xac>)
 80015de:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015e2:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0x2 << (7 * 2)); // Alternate Function mode
 80015e4:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <TIM4_PWM_Init+0xac>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <TIM4_PWM_Init+0xac>)
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ee:	6013      	str	r3, [r2, #0]
    GPIOB->AFR[0] |= (0x2 << (7 * 4)); // AF2 cho TIM4_CH2
 80015f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001668 <TIM4_PWM_Init+0xac>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <TIM4_PWM_Init+0xac>)
 80015f6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015fa:	6213      	str	r3, [r2, #32]

    // Cấu hình prescaler và ARR để tạo tần số PWM 1 kHz
    TIM4->PSC = 16 - 1;  // Prescaler để timer chạy ở 1 MHz
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <TIM4_PWM_Init+0xb0>)
 80015fe:	220f      	movs	r2, #15
 8001600:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM4->ARR = 1000;    // Auto-reload cho tần số 1 kHz
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <TIM4_PWM_Init+0xb0>)
 8001604:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001608:	62da      	str	r2, [r3, #44]	@ 0x2c

    // Đặt CCR2 (Duty cycle ban đầu = 0%)
    TIM4->CCR2 = 0;
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <TIM4_PWM_Init+0xb0>)
 800160c:	2200      	movs	r2, #0
 800160e:	639a      	str	r2, [r3, #56]	@ 0x38

    // Cấu hình PWM mode 1 cho TIM4 Channel 2
    TIM4->CCMR1 &= ~(0x7 << TIM_CCMR1_OC2M_Pos);
 8001610:	4b16      	ldr	r3, [pc, #88]	@ (800166c <TIM4_PWM_Init+0xb0>)
 8001612:	699b      	ldr	r3, [r3, #24]
 8001614:	4a15      	ldr	r2, [pc, #84]	@ (800166c <TIM4_PWM_Init+0xb0>)
 8001616:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800161a:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= (6 << TIM_CCMR1_OC2M_Pos); // PWM mode 1
 800161c:	4b13      	ldr	r3, [pc, #76]	@ (800166c <TIM4_PWM_Init+0xb0>)
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	4a12      	ldr	r2, [pc, #72]	@ (800166c <TIM4_PWM_Init+0xb0>)
 8001622:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8001626:	6193      	str	r3, [r2, #24]
    TIM4->CCMR1 |= TIM_CCMR1_OC2PE;          // Preload cho CCR2
 8001628:	4b10      	ldr	r3, [pc, #64]	@ (800166c <TIM4_PWM_Init+0xb0>)
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	4a0f      	ldr	r2, [pc, #60]	@ (800166c <TIM4_PWM_Init+0xb0>)
 800162e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001632:	6193      	str	r3, [r2, #24]

    // Kích hoạt output cho Channel 2
    TIM4->CCER |= TIM_CCER_CC2E;
 8001634:	4b0d      	ldr	r3, [pc, #52]	@ (800166c <TIM4_PWM_Init+0xb0>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	4a0c      	ldr	r2, [pc, #48]	@ (800166c <TIM4_PWM_Init+0xb0>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	6213      	str	r3, [r2, #32]

    // Bật chế độ tự động tải lại
    TIM4->CR1 |= TIM_CR1_ARPE;
 8001640:	4b0a      	ldr	r3, [pc, #40]	@ (800166c <TIM4_PWM_Init+0xb0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a09      	ldr	r2, [pc, #36]	@ (800166c <TIM4_PWM_Init+0xb0>)
 8001646:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800164a:	6013      	str	r3, [r2, #0]

    // Kích hoạt Timer
    TIM4->CR1 |= TIM_CR1_CEN;
 800164c:	4b07      	ldr	r3, [pc, #28]	@ (800166c <TIM4_PWM_Init+0xb0>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a06      	ldr	r2, [pc, #24]	@ (800166c <TIM4_PWM_Init+0xb0>)
 8001652:	f043 0301 	orr.w	r3, r3, #1
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800
 8001668:	40020400 	.word	0x40020400
 800166c:	40000800 	.word	0x40000800

08001670 <Motor_Init>:

void Motor_Init(void) {
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
    // Bật clock cho GPIOA và GPIOB
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN;
 8001674:	4b19      	ldr	r3, [pc, #100]	@ (80016dc <Motor_Init+0x6c>)
 8001676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001678:	4a18      	ldr	r2, [pc, #96]	@ (80016dc <Motor_Init+0x6c>)
 800167a:	f043 0303 	orr.w	r3, r3, #3
 800167e:	6313      	str	r3, [r2, #48]	@ 0x30

    // Đặt chế độ chân PA0, PA1, PA4 thành Output
    GPIOA->MODER &= ~((0x3 << (IN1_PIN * 2)) | (0x3 << (IN2_PIN * 2)) | (0x3 << (IN3_PIN * 2))); // Clear bits
 8001680:	4b17      	ldr	r3, [pc, #92]	@ (80016e0 <Motor_Init+0x70>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a16      	ldr	r2, [pc, #88]	@ (80016e0 <Motor_Init+0x70>)
 8001686:	f423 7343 	bic.w	r3, r3, #780	@ 0x30c
 800168a:	f023 0303 	bic.w	r3, r3, #3
 800168e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((0x1 << (IN1_PIN * 2)) | (0x1 << (IN2_PIN * 2)) | (0x1 << (IN3_PIN * 2)));  // Output mode
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <Motor_Init+0x70>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <Motor_Init+0x70>)
 8001696:	f443 7382 	orr.w	r3, r3, #260	@ 0x104
 800169a:	f043 0301 	orr.w	r3, r3, #1
 800169e:	6013      	str	r3, [r2, #0]

    // Đặt chế độ chân PB0 thành Output
    GPIOB->MODER &= ~(0x3 << (IN4_PIN * 2)); // Clear bits
 80016a0:	4b10      	ldr	r3, [pc, #64]	@ (80016e4 <Motor_Init+0x74>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	@ (80016e4 <Motor_Init+0x74>)
 80016a6:	f023 0303 	bic.w	r3, r3, #3
 80016aa:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (0x1 << (IN4_PIN * 2)); // Output mode
 80016ac:	4b0d      	ldr	r3, [pc, #52]	@ (80016e4 <Motor_Init+0x74>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0c      	ldr	r2, [pc, #48]	@ (80016e4 <Motor_Init+0x74>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	6013      	str	r3, [r2, #0]

    // Đặt mức đầu ra ban đầu là 0 (dừng động cơ)
    GPIOA->ODR &= ~((1 << IN1_PIN) | (1 << IN2_PIN) | (1 << IN3_PIN));
 80016b8:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <Motor_Init+0x70>)
 80016ba:	695b      	ldr	r3, [r3, #20]
 80016bc:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <Motor_Init+0x70>)
 80016be:	f023 0313 	bic.w	r3, r3, #19
 80016c2:	6153      	str	r3, [r2, #20]
    GPIOB->ODR &= ~(1 << IN4_PIN);
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <Motor_Init+0x74>)
 80016c6:	695b      	ldr	r3, [r3, #20]
 80016c8:	4a06      	ldr	r2, [pc, #24]	@ (80016e4 <Motor_Init+0x74>)
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6153      	str	r3, [r2, #20]
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	40023800 	.word	0x40023800
 80016e0:	40020000 	.word	0x40020000
 80016e4:	40020400 	.word	0x40020400

080016e8 <Motor_Forward>:

void Motor_Forward(uint16_t speedA, uint16_t speedB) {
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	460a      	mov	r2, r1
 80016f2:	80fb      	strh	r3, [r7, #6]
 80016f4:	4613      	mov	r3, r2
 80016f6:	80bb      	strh	r3, [r7, #4]
    if (speedA > 1000) speedA = 1000; // Giới hạn tốc độ
 80016f8:	88fb      	ldrh	r3, [r7, #6]
 80016fa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016fe:	d902      	bls.n	8001706 <Motor_Forward+0x1e>
 8001700:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001704:	80fb      	strh	r3, [r7, #6]
    if (speedB > 1000) speedB = 1000;
 8001706:	88bb      	ldrh	r3, [r7, #4]
 8001708:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800170c:	d902      	bls.n	8001714 <Motor_Forward+0x2c>
 800170e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001712:	80bb      	strh	r3, [r7, #4]

    // Động cơ 1: IN1 = 1, IN2 = 0
    GPIOA->ODR |= (1 << IN1_PIN);
 8001714:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <Motor_Forward+0x78>)
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	4a11      	ldr	r2, [pc, #68]	@ (8001760 <Motor_Forward+0x78>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6153      	str	r3, [r2, #20]
    GPIOA->ODR &= ~(1 << IN2_PIN);
 8001720:	4b0f      	ldr	r3, [pc, #60]	@ (8001760 <Motor_Forward+0x78>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	4a0e      	ldr	r2, [pc, #56]	@ (8001760 <Motor_Forward+0x78>)
 8001726:	f023 0302 	bic.w	r3, r3, #2
 800172a:	6153      	str	r3, [r2, #20]

    // Động cơ 2: IN3 = 1, IN4 = 0
    GPIOA->ODR |= (1 << IN3_PIN);
 800172c:	4b0c      	ldr	r3, [pc, #48]	@ (8001760 <Motor_Forward+0x78>)
 800172e:	695b      	ldr	r3, [r3, #20]
 8001730:	4a0b      	ldr	r2, [pc, #44]	@ (8001760 <Motor_Forward+0x78>)
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	6153      	str	r3, [r2, #20]
    GPIOB->ODR &= ~(1 << IN4_PIN);
 8001738:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <Motor_Forward+0x7c>)
 800173a:	695b      	ldr	r3, [r3, #20]
 800173c:	4a09      	ldr	r2, [pc, #36]	@ (8001764 <Motor_Forward+0x7c>)
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	6153      	str	r3, [r2, #20]

    // Đặt tốc độ cho PWM
    TIM2->CCR1 = speedA;
 8001744:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM4->CCR2 = speedB;
 800174c:	4a06      	ldr	r2, [pc, #24]	@ (8001768 <Motor_Forward+0x80>)
 800174e:	88bb      	ldrh	r3, [r7, #4]
 8001750:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40000800 	.word	0x40000800

0800176c <Motor_Backward>:

void Motor_Backward(uint16_t speedA, uint16_t speedB) {
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	460a      	mov	r2, r1
 8001776:	80fb      	strh	r3, [r7, #6]
 8001778:	4613      	mov	r3, r2
 800177a:	80bb      	strh	r3, [r7, #4]
    if (speedA > 1000) speedA = 1000; // Giới hạn tốc độ
 800177c:	88fb      	ldrh	r3, [r7, #6]
 800177e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001782:	d902      	bls.n	800178a <Motor_Backward+0x1e>
 8001784:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001788:	80fb      	strh	r3, [r7, #6]
    if (speedB > 1000) speedB = 1000;
 800178a:	88bb      	ldrh	r3, [r7, #4]
 800178c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001790:	d902      	bls.n	8001798 <Motor_Backward+0x2c>
 8001792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001796:	80bb      	strh	r3, [r7, #4]

    // Động cơ 1: IN1 = 0, IN2 = 1
    GPIOA->ODR &= ~(1 << IN1_PIN);
 8001798:	4b12      	ldr	r3, [pc, #72]	@ (80017e4 <Motor_Backward+0x78>)
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	4a11      	ldr	r2, [pc, #68]	@ (80017e4 <Motor_Backward+0x78>)
 800179e:	f023 0301 	bic.w	r3, r3, #1
 80017a2:	6153      	str	r3, [r2, #20]
    GPIOA->ODR |= (1 << IN2_PIN);
 80017a4:	4b0f      	ldr	r3, [pc, #60]	@ (80017e4 <Motor_Backward+0x78>)
 80017a6:	695b      	ldr	r3, [r3, #20]
 80017a8:	4a0e      	ldr	r2, [pc, #56]	@ (80017e4 <Motor_Backward+0x78>)
 80017aa:	f043 0302 	orr.w	r3, r3, #2
 80017ae:	6153      	str	r3, [r2, #20]

    // Động cơ 2: IN3 = 0, IN4 = 1
    GPIOA->ODR &= ~(1 << IN3_PIN);
 80017b0:	4b0c      	ldr	r3, [pc, #48]	@ (80017e4 <Motor_Backward+0x78>)
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	4a0b      	ldr	r2, [pc, #44]	@ (80017e4 <Motor_Backward+0x78>)
 80017b6:	f023 0310 	bic.w	r3, r3, #16
 80017ba:	6153      	str	r3, [r2, #20]
    GPIOB->ODR |= (1 << IN4_PIN);
 80017bc:	4b0a      	ldr	r3, [pc, #40]	@ (80017e8 <Motor_Backward+0x7c>)
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <Motor_Backward+0x7c>)
 80017c2:	f043 0301 	orr.w	r3, r3, #1
 80017c6:	6153      	str	r3, [r2, #20]

    // Đặt tốc độ cho PWM
    TIM2->CCR1 = speedA;
 80017c8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017cc:	88fb      	ldrh	r3, [r7, #6]
 80017ce:	6353      	str	r3, [r2, #52]	@ 0x34
    TIM4->CCR2 = speedB;
 80017d0:	4a06      	ldr	r2, [pc, #24]	@ (80017ec <Motor_Backward+0x80>)
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40000800 	.word	0x40000800

080017f0 <Motor_Stop>:

void Motor_Stop(void) {
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
    // Động cơ 1: IN1 = 0, IN2 = 0
    GPIOA->ODR &= ~((1 << IN1_PIN) | (1 << IN2_PIN));
 80017f4:	4b0e      	ldr	r3, [pc, #56]	@ (8001830 <Motor_Stop+0x40>)
 80017f6:	695b      	ldr	r3, [r3, #20]
 80017f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001830 <Motor_Stop+0x40>)
 80017fa:	f023 0303 	bic.w	r3, r3, #3
 80017fe:	6153      	str	r3, [r2, #20]

    // Động cơ 2: IN3 = 0, IN4 = 0
    GPIOA->ODR &= ~(1 << IN3_PIN);
 8001800:	4b0b      	ldr	r3, [pc, #44]	@ (8001830 <Motor_Stop+0x40>)
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <Motor_Stop+0x40>)
 8001806:	f023 0310 	bic.w	r3, r3, #16
 800180a:	6153      	str	r3, [r2, #20]
    GPIOB->ODR &= ~(1 << IN4_PIN);
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <Motor_Stop+0x44>)
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	4a08      	ldr	r2, [pc, #32]	@ (8001834 <Motor_Stop+0x44>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6153      	str	r3, [r2, #20]

    // Đặt tốc độ = 0
    TIM2->CCR1 = 0;
 8001818:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800181c:	2200      	movs	r2, #0
 800181e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM4->CCR2 = 0;
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <Motor_Stop+0x48>)
 8001822:	2200      	movs	r2, #0
 8001824:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001826:	bf00      	nop
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	40020000 	.word	0x40020000
 8001834:	40020400 	.word	0x40020400
 8001838:	40000800 	.word	0x40000800

0800183c <main>:
    // Đặt tốc độ cho PWM
    TIM2->CCR1 = 0;
    TIM4->CCR2 = speed;
}

int main(void) {
 800183c:	b580      	push	{r7, lr}
 800183e:	b092      	sub	sp, #72	@ 0x48
 8001840:	af00      	add	r7, sp, #0
    // 1. Khởi tạo các chức năng
    GPIO_Trig_Echo_Init();  // Khởi tạo GPIO cho đo khoảng cách
 8001842:	f7ff fc7b 	bl	800113c <GPIO_Trig_Echo_Init>
    Motor_Init();
 8001846:	f7ff ff13 	bl	8001670 <Motor_Init>
    UART_Init();            // Khởi tạo UART
 800184a:	f7ff fc13 	bl	8001074 <UART_Init>
    I2C1_Init();            // Khởi tạo I2C
 800184e:	f7ff fa21 	bl	8000c94 <I2C1_Init>
    lcd_init();             // Khởi tạo LCD
 8001852:	f7ff fb6a 	bl	8000f2a <lcd_init>
    TIM2_PWM_Init();
 8001856:	f7ff fe4b 	bl	80014f0 <TIM2_PWM_Init>
    TIM4_PWM_Init();
 800185a:	f7ff feaf 	bl	80015bc <TIM4_PWM_Init>
    Motor_Stop();
 800185e:	f7ff ffc7 	bl	80017f0 <Motor_Stop>
    SystemInit();           // Khởi tạo hệ thống
 8001862:	f000 fa1d 	bl	8001ca0 <SystemInit>
    SysTick_Init(1000);     // 1 kHz = 1 ms (1000 tick mỗi giây)
 8001866:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800186a:	f7ff fce7 	bl	800123c <SysTick_Init>
    GPIO_Init();            // Khởi tạo GPIO
 800186e:	f7ff fd27 	bl	80012c0 <GPIO_Init>
    EXTI_Init();            // Khởi tạo ngắt EXTI
 8001872:	f7ff fd99 	bl	80013a8 <EXTI_Init>

    // 2. Vòng lặp chính
    while (1) {
        if (system_state == 1) {  // Nếu hệ thống đang hoạt động
 8001876:	4b88      	ldr	r3, [pc, #544]	@ (8001a98 <main+0x25c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	b2db      	uxtb	r3, r3
 800187c:	2b01      	cmp	r3, #1
 800187e:	f040 8100 	bne.w	8001a82 <main+0x246>
            // Đo khoảng cách
            float distance = measure_distance();
 8001882:	f7ff fb7d 	bl	8000f80 <measure_distance>
 8001886:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44

            // Gửi kết quả qua UART
            char uart_buffer[50];
            if (distance < 0) {
 800188a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800188e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001896:	d505      	bpl.n	80018a4 <main+0x68>
                sprintf(uart_buffer, "Error: Timeout\r\n");
 8001898:	463b      	mov	r3, r7
 800189a:	4980      	ldr	r1, [pc, #512]	@ (8001a9c <main+0x260>)
 800189c:	4618      	mov	r0, r3
 800189e:	f000 ff77 	bl	8002790 <siprintf>
 80018a2:	e008      	b.n	80018b6 <main+0x7a>
            } else {
                sprintf(uart_buffer, "Distance: %.2f cm\r\n", distance);
 80018a4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80018a6:	f7fe fe57 	bl	8000558 <__aeabi_f2d>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4638      	mov	r0, r7
 80018b0:	497b      	ldr	r1, [pc, #492]	@ (8001aa0 <main+0x264>)
 80018b2:	f000 ff6d 	bl	8002790 <siprintf>
            }
            UART_SendString(uart_buffer);
 80018b6:	463b      	mov	r3, r7
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fc29 	bl	8001110 <UART_SendString>

            // Hiển thị khoảng cách trên LCD
            char lcd_buffer[16];
            lcd_put_cur(0, 0);
 80018be:	2100      	movs	r1, #0
 80018c0:	2000      	movs	r0, #0
 80018c2:	f7ff fb19 	bl	8000ef8 <lcd_put_cur>
            if (distance < 0) {
 80018c6:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80018ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d2:	d503      	bpl.n	80018dc <main+0xa0>
                lcd_send_string("Error!        ");  // Hiển thị lỗi
 80018d4:	4873      	ldr	r0, [pc, #460]	@ (8001aa4 <main+0x268>)
 80018d6:	f7ff fb3b 	bl	8000f50 <lcd_send_string>
 80018da:	e0c4      	b.n	8001a66 <main+0x22a>
            } else if (distance > 1 && distance < 5) {
 80018dc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80018e0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ec:	dd2f      	ble.n	800194e <main+0x112>
 80018ee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80018f2:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80018f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fe:	d526      	bpl.n	800194e <main+0x112>
            	GPIOA->ODR &= ~(1 << 6);
 8001900:	4b69      	ldr	r3, [pc, #420]	@ (8001aa8 <main+0x26c>)
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	4a68      	ldr	r2, [pc, #416]	@ (8001aa8 <main+0x26c>)
 8001906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800190a:	6153      	str	r3, [r2, #20]
            	toggleLED((1 << 7), 10);             //Gọi hàm toggle nhấp nháy led PA7 với tần số 5hz
 800190c:	210a      	movs	r1, #10
 800190e:	2080      	movs	r0, #128	@ 0x80
 8001910:	f7ff fdae 	bl	8001470 <toggleLED>
                lcd_send_string("sys: 1 - obs: 1   ");
 8001914:	4865      	ldr	r0, [pc, #404]	@ (8001aac <main+0x270>)
 8001916:	f7ff fb1b 	bl	8000f50 <lcd_send_string>
                lcd_put_cur(1, 0);
 800191a:	2100      	movs	r1, #0
 800191c:	2001      	movs	r0, #1
 800191e:	f7ff faeb 	bl	8000ef8 <lcd_put_cur>
                sprintf(lcd_buffer, "  %.2f cm", distance);
 8001922:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001924:	f7fe fe18 	bl	8000558 <__aeabi_f2d>
 8001928:	4602      	mov	r2, r0
 800192a:	460b      	mov	r3, r1
 800192c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001930:	495f      	ldr	r1, [pc, #380]	@ (8001ab0 <main+0x274>)
 8001932:	f000 ff2d 	bl	8002790 <siprintf>
                lcd_send_string(lcd_buffer);
 8001936:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fb08 	bl	8000f50 <lcd_send_string>

                Motor_Stop();
 8001940:	f7ff ff56 	bl	80017f0 <Motor_Stop>
                Motor_Backward(100,100);
 8001944:	2164      	movs	r1, #100	@ 0x64
 8001946:	2064      	movs	r0, #100	@ 0x64
 8001948:	f7ff ff10 	bl	800176c <Motor_Backward>
 800194c:	e08b      	b.n	8001a66 <main+0x22a>
            }
            else if (distance >=5 && distance < 10) {
 800194e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001952:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001956:	eef4 7ac7 	vcmpe.f32	s15, s14
 800195a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195e:	db2f      	blt.n	80019c0 <main+0x184>
 8001960:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001964:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001970:	d526      	bpl.n	80019c0 <main+0x184>
            	GPIOA->ODR &= ~(1 << 6);
 8001972:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa8 <main+0x26c>)
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	4a4c      	ldr	r2, [pc, #304]	@ (8001aa8 <main+0x26c>)
 8001978:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800197c:	6153      	str	r3, [r2, #20]
            	toggleLED((1 << 7), 5);             //Gọi hàm toggle nhấp nháy led PA7 với tần số 5hz
 800197e:	2105      	movs	r1, #5
 8001980:	2080      	movs	r0, #128	@ 0x80
 8001982:	f7ff fd75 	bl	8001470 <toggleLED>
                lcd_send_string("sys: 1 - obs: 1   ");
 8001986:	4849      	ldr	r0, [pc, #292]	@ (8001aac <main+0x270>)
 8001988:	f7ff fae2 	bl	8000f50 <lcd_send_string>
                lcd_put_cur(1, 0);
 800198c:	2100      	movs	r1, #0
 800198e:	2001      	movs	r0, #1
 8001990:	f7ff fab2 	bl	8000ef8 <lcd_put_cur>
                sprintf(lcd_buffer, "  %.2f cm", distance);
 8001994:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001996:	f7fe fddf 	bl	8000558 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80019a2:	4943      	ldr	r1, [pc, #268]	@ (8001ab0 <main+0x274>)
 80019a4:	f000 fef4 	bl	8002790 <siprintf>
                lcd_send_string(lcd_buffer);
 80019a8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff facf 	bl	8000f50 <lcd_send_string>

                Motor_Stop();
 80019b2:	f7ff ff1d 	bl	80017f0 <Motor_Stop>
                Motor_Backward(100,100);
 80019b6:	2164      	movs	r1, #100	@ 0x64
 80019b8:	2064      	movs	r0, #100	@ 0x64
 80019ba:	f7ff fed7 	bl	800176c <Motor_Backward>
 80019be:	e052      	b.n	8001a66 <main+0x22a>
            }
            else if (distance >=10 && distance < 20) {
 80019c0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019c4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d0:	db2f      	blt.n	8001a32 <main+0x1f6>
 80019d2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80019d6:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80019da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d526      	bpl.n	8001a32 <main+0x1f6>
            	GPIOA->ODR &= ~(1 << 6);
 80019e4:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <main+0x26c>)
 80019e6:	695b      	ldr	r3, [r3, #20]
 80019e8:	4a2f      	ldr	r2, [pc, #188]	@ (8001aa8 <main+0x26c>)
 80019ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80019ee:	6153      	str	r3, [r2, #20]
            	toggleLED((1 << 7), 1);             //Gọi hàm toggle nhấp nháy led PA7 với tần số 5hz
 80019f0:	2101      	movs	r1, #1
 80019f2:	2080      	movs	r0, #128	@ 0x80
 80019f4:	f7ff fd3c 	bl	8001470 <toggleLED>
                lcd_send_string("sys: 1 - obs: 1   ");
 80019f8:	482c      	ldr	r0, [pc, #176]	@ (8001aac <main+0x270>)
 80019fa:	f7ff faa9 	bl	8000f50 <lcd_send_string>
                lcd_put_cur(1, 0);
 80019fe:	2100      	movs	r1, #0
 8001a00:	2001      	movs	r0, #1
 8001a02:	f7ff fa79 	bl	8000ef8 <lcd_put_cur>
                sprintf(lcd_buffer, "  %.2f cm", distance);
 8001a06:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a08:	f7fe fda6 	bl	8000558 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001a14:	4926      	ldr	r1, [pc, #152]	@ (8001ab0 <main+0x274>)
 8001a16:	f000 febb 	bl	8002790 <siprintf>
                lcd_send_string(lcd_buffer);
 8001a1a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff fa96 	bl	8000f50 <lcd_send_string>

                Motor_Stop();
 8001a24:	f7ff fee4 	bl	80017f0 <Motor_Stop>
                Motor_Backward(100,10);
 8001a28:	210a      	movs	r1, #10
 8001a2a:	2064      	movs	r0, #100	@ 0x64
 8001a2c:	f7ff fe9e 	bl	800176c <Motor_Backward>
 8001a30:	e019      	b.n	8001a66 <main+0x22a>
            } else {
                lcd_send_string("sys: 1 - obs: 0   ");
 8001a32:	4820      	ldr	r0, [pc, #128]	@ (8001ab4 <main+0x278>)
 8001a34:	f7ff fa8c 	bl	8000f50 <lcd_send_string>
                lcd_put_cur(1, 0);
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2001      	movs	r0, #1
 8001a3c:	f7ff fa5c 	bl	8000ef8 <lcd_put_cur>
                sprintf(lcd_buffer, "  %.2f cm", distance);
 8001a40:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001a42:	f7fe fd89 	bl	8000558 <__aeabi_f2d>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001a4e:	4918      	ldr	r1, [pc, #96]	@ (8001ab0 <main+0x274>)
 8001a50:	f000 fe9e 	bl	8002790 <siprintf>
                lcd_send_string(lcd_buffer);
 8001a54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fa79 	bl	8000f50 <lcd_send_string>

                Motor_Forward(100,100);
 8001a5e:	2164      	movs	r1, #100	@ 0x64
 8001a60:	2064      	movs	r0, #100	@ 0x64
 8001a62:	f7ff fe41 	bl	80016e8 <Motor_Forward>
            }
            // 2. Kiểm tra và thay đổi trạng thái LED
            GPIOA->ODR &= ~(1 << 7);
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <main+0x26c>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	4a0f      	ldr	r2, [pc, #60]	@ (8001aa8 <main+0x26c>)
 8001a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a70:	6153      	str	r3, [r2, #20]
            toggleLED((1 << 6), 1);  // Nhấp nháy LED PA6 với tần số 1 Hz
 8001a72:	2101      	movs	r1, #1
 8001a74:	2040      	movs	r0, #64	@ 0x40
 8001a76:	f7ff fcfb 	bl	8001470 <toggleLED>

            // Delay ngắn trước lần đo tiếp theo
            delay_ms(200);
 8001a7a:	20c8      	movs	r0, #200	@ 0xc8
 8001a7c:	f7ff fbca 	bl	8001214 <delay_ms>
 8001a80:	e6f9      	b.n	8001876 <main+0x3a>
        } else {
            // Hệ thống đang dừng đo
            lcd_put_cur(0, 0);
 8001a82:	2100      	movs	r1, #0
 8001a84:	2000      	movs	r0, #0
 8001a86:	f7ff fa37 	bl	8000ef8 <lcd_put_cur>
            lcd_send_string("sys: 0 ");
 8001a8a:	480b      	ldr	r0, [pc, #44]	@ (8001ab8 <main+0x27c>)
 8001a8c:	f7ff fa60 	bl	8000f50 <lcd_send_string>
            Motor_Stop();
 8001a90:	f7ff feae 	bl	80017f0 <Motor_Stop>
        if (system_state == 1) {  // Nếu hệ thống đang hoạt động
 8001a94:	e6ef      	b.n	8001876 <main+0x3a>
 8001a96:	bf00      	nop
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	08004a00 	.word	0x08004a00
 8001aa0:	08004a14 	.word	0x08004a14
 8001aa4:	08004a28 	.word	0x08004a28
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	08004a38 	.word	0x08004a38
 8001ab0:	08004a4c 	.word	0x08004a4c
 8001ab4:	08004a58 	.word	0x08004a58
 8001ab8:	08004a6c 	.word	0x08004a6c

08001abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ace:	bf00      	nop
 8001ad0:	e7fd      	b.n	8001ace <HardFault_Handler+0x4>

08001ad2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad6:	bf00      	nop
 8001ad8:	e7fd      	b.n	8001ad6 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	bf00      	nop
 8001ae0:	e7fd      	b.n	8001ade <BusFault_Handler+0x4>

08001ae2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae6:	bf00      	nop
 8001ae8:	e7fd      	b.n	8001ae6 <UsageFault_Handler+0x4>

08001aea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
	return 1;
 8001b18:	2301      	movs	r3, #1
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <_kill>:

int _kill(int pid, int sig)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b2e:	f000 feff 	bl	8002930 <__errno>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2216      	movs	r2, #22
 8001b36:	601a      	str	r2, [r3, #0]
	return -1;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <_exit>:

void _exit (int status)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ffe7 	bl	8001b24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b56:	bf00      	nop
 8001b58:	e7fd      	b.n	8001b56 <_exit+0x12>

08001b5a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	e00a      	b.n	8001b82 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b6c:	f3af 8000 	nop.w
 8001b70:	4601      	mov	r1, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1c5a      	adds	r2, r3, #1
 8001b76:	60ba      	str	r2, [r7, #8]
 8001b78:	b2ca      	uxtb	r2, r1
 8001b7a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	dbf0      	blt.n	8001b6c <_read+0x12>
	}

return len;
 8001b8a:	687b      	ldr	r3, [r7, #4]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e009      	b.n	8001bba <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	1c5a      	adds	r2, r3, #1
 8001baa:	60ba      	str	r2, [r7, #8]
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	dbf1      	blt.n	8001ba6 <_write+0x12>
	}
	return len;
 8001bc2:	687b      	ldr	r3, [r7, #4]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_close>:

int _close(int file)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	return -1;
 8001bd4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001bf4:	605a      	str	r2, [r3, #4]
	return 0;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <_isatty>:

int _isatty(int file)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	return 1;
 8001c0c:	2301      	movs	r3, #1
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b085      	sub	sp, #20
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
	return 0;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c3c:	4a14      	ldr	r2, [pc, #80]	@ (8001c90 <_sbrk+0x5c>)
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <_sbrk+0x60>)
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c48:	4b13      	ldr	r3, [pc, #76]	@ (8001c98 <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c50:	4b11      	ldr	r3, [pc, #68]	@ (8001c98 <_sbrk+0x64>)
 8001c52:	4a12      	ldr	r2, [pc, #72]	@ (8001c9c <_sbrk+0x68>)
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c56:	4b10      	ldr	r3, [pc, #64]	@ (8001c98 <_sbrk+0x64>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d207      	bcs.n	8001c74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c64:	f000 fe64 	bl	8002930 <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	220c      	movs	r2, #12
 8001c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	e009      	b.n	8001c88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c74:	4b08      	ldr	r3, [pc, #32]	@ (8001c98 <_sbrk+0x64>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c7a:	4b07      	ldr	r3, [pc, #28]	@ (8001c98 <_sbrk+0x64>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	4a05      	ldr	r2, [pc, #20]	@ (8001c98 <_sbrk+0x64>)
 8001c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c86:	68fb      	ldr	r3, [r7, #12]
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20018000 	.word	0x20018000
 8001c94:	00000400 	.word	0x00000400
 8001c98:	200001fc 	.word	0x200001fc
 8001c9c:	20000350 	.word	0x20000350

08001ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca4:	4b16      	ldr	r3, [pc, #88]	@ (8001d00 <SystemInit+0x60>)
 8001ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001caa:	4a15      	ldr	r2, [pc, #84]	@ (8001d00 <SystemInit+0x60>)
 8001cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <SystemInit+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a12      	ldr	r2, [pc, #72]	@ (8001d04 <SystemInit+0x64>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cc0:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <SystemInit+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8001d04 <SystemInit+0x64>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a0e      	ldr	r2, [pc, #56]	@ (8001d04 <SystemInit+0x64>)
 8001ccc:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <SystemInit+0x64>)
 8001cd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001d08 <SystemInit+0x68>)
 8001cda:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <SystemInit+0x64>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a08      	ldr	r2, [pc, #32]	@ (8001d04 <SystemInit+0x64>)
 8001ce2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ce6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <SystemInit+0x64>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cee:	4b04      	ldr	r3, [pc, #16]	@ (8001d00 <SystemInit+0x60>)
 8001cf0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001cf4:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf6:	bf00      	nop
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	40023800 	.word	0x40023800
 8001d08:	24003010 	.word	0x24003010

08001d0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001d44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d10:	f7ff ffc6 	bl	8001ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d14:	480c      	ldr	r0, [pc, #48]	@ (8001d48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d16:	490d      	ldr	r1, [pc, #52]	@ (8001d4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d18:	4a0d      	ldr	r2, [pc, #52]	@ (8001d50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d1c:	e002      	b.n	8001d24 <LoopCopyDataInit>

08001d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d22:	3304      	adds	r3, #4

08001d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d28:	d3f9      	bcc.n	8001d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001d58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d30:	e001      	b.n	8001d36 <LoopFillZerobss>

08001d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d34:	3204      	adds	r2, #4

08001d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d38:	d3fb      	bcc.n	8001d32 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001d3a:	f000 fdff 	bl	800293c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3e:	f7ff fd7d 	bl	800183c <main>
  bx  lr    
 8001d42:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d4c:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 8001d50:	08004df8 	.word	0x08004df8
  ldr r2, =_sbss
 8001d54:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 8001d58:	2000034c 	.word	0x2000034c

08001d5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d5c:	e7fe      	b.n	8001d5c <ADC_IRQHandler>

08001d5e <__cvt>:
 8001d5e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d62:	ec57 6b10 	vmov	r6, r7, d0
 8001d66:	2f00      	cmp	r7, #0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	463b      	mov	r3, r7
 8001d6e:	bfbb      	ittet	lt
 8001d70:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001d74:	461f      	movlt	r7, r3
 8001d76:	2300      	movge	r3, #0
 8001d78:	232d      	movlt	r3, #45	@ 0x2d
 8001d7a:	700b      	strb	r3, [r1, #0]
 8001d7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001d7e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001d82:	4691      	mov	r9, r2
 8001d84:	f023 0820 	bic.w	r8, r3, #32
 8001d88:	bfbc      	itt	lt
 8001d8a:	4632      	movlt	r2, r6
 8001d8c:	4616      	movlt	r6, r2
 8001d8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001d92:	d005      	beq.n	8001da0 <__cvt+0x42>
 8001d94:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001d98:	d100      	bne.n	8001d9c <__cvt+0x3e>
 8001d9a:	3401      	adds	r4, #1
 8001d9c:	2102      	movs	r1, #2
 8001d9e:	e000      	b.n	8001da2 <__cvt+0x44>
 8001da0:	2103      	movs	r1, #3
 8001da2:	ab03      	add	r3, sp, #12
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	ab02      	add	r3, sp, #8
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	ec47 6b10 	vmov	d0, r6, r7
 8001dae:	4653      	mov	r3, sl
 8001db0:	4622      	mov	r2, r4
 8001db2:	f000 fe81 	bl	8002ab8 <_dtoa_r>
 8001db6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001dba:	4605      	mov	r5, r0
 8001dbc:	d119      	bne.n	8001df2 <__cvt+0x94>
 8001dbe:	f019 0f01 	tst.w	r9, #1
 8001dc2:	d00e      	beq.n	8001de2 <__cvt+0x84>
 8001dc4:	eb00 0904 	add.w	r9, r0, r4
 8001dc8:	2200      	movs	r2, #0
 8001dca:	2300      	movs	r3, #0
 8001dcc:	4630      	mov	r0, r6
 8001dce:	4639      	mov	r1, r7
 8001dd0:	f7fe fe82 	bl	8000ad8 <__aeabi_dcmpeq>
 8001dd4:	b108      	cbz	r0, 8001dda <__cvt+0x7c>
 8001dd6:	f8cd 900c 	str.w	r9, [sp, #12]
 8001dda:	2230      	movs	r2, #48	@ 0x30
 8001ddc:	9b03      	ldr	r3, [sp, #12]
 8001dde:	454b      	cmp	r3, r9
 8001de0:	d31e      	bcc.n	8001e20 <__cvt+0xc2>
 8001de2:	9b03      	ldr	r3, [sp, #12]
 8001de4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001de6:	1b5b      	subs	r3, r3, r5
 8001de8:	4628      	mov	r0, r5
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	b004      	add	sp, #16
 8001dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001df2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001df6:	eb00 0904 	add.w	r9, r0, r4
 8001dfa:	d1e5      	bne.n	8001dc8 <__cvt+0x6a>
 8001dfc:	7803      	ldrb	r3, [r0, #0]
 8001dfe:	2b30      	cmp	r3, #48	@ 0x30
 8001e00:	d10a      	bne.n	8001e18 <__cvt+0xba>
 8001e02:	2200      	movs	r2, #0
 8001e04:	2300      	movs	r3, #0
 8001e06:	4630      	mov	r0, r6
 8001e08:	4639      	mov	r1, r7
 8001e0a:	f7fe fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 8001e0e:	b918      	cbnz	r0, 8001e18 <__cvt+0xba>
 8001e10:	f1c4 0401 	rsb	r4, r4, #1
 8001e14:	f8ca 4000 	str.w	r4, [sl]
 8001e18:	f8da 3000 	ldr.w	r3, [sl]
 8001e1c:	4499      	add	r9, r3
 8001e1e:	e7d3      	b.n	8001dc8 <__cvt+0x6a>
 8001e20:	1c59      	adds	r1, r3, #1
 8001e22:	9103      	str	r1, [sp, #12]
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e7d9      	b.n	8001ddc <__cvt+0x7e>

08001e28 <__exponent>:
 8001e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e2a:	2900      	cmp	r1, #0
 8001e2c:	bfba      	itte	lt
 8001e2e:	4249      	neglt	r1, r1
 8001e30:	232d      	movlt	r3, #45	@ 0x2d
 8001e32:	232b      	movge	r3, #43	@ 0x2b
 8001e34:	2909      	cmp	r1, #9
 8001e36:	7002      	strb	r2, [r0, #0]
 8001e38:	7043      	strb	r3, [r0, #1]
 8001e3a:	dd29      	ble.n	8001e90 <__exponent+0x68>
 8001e3c:	f10d 0307 	add.w	r3, sp, #7
 8001e40:	461d      	mov	r5, r3
 8001e42:	270a      	movs	r7, #10
 8001e44:	461a      	mov	r2, r3
 8001e46:	fbb1 f6f7 	udiv	r6, r1, r7
 8001e4a:	fb07 1416 	mls	r4, r7, r6, r1
 8001e4e:	3430      	adds	r4, #48	@ 0x30
 8001e50:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001e54:	460c      	mov	r4, r1
 8001e56:	2c63      	cmp	r4, #99	@ 0x63
 8001e58:	f103 33ff 	add.w	r3, r3, #4294967295
 8001e5c:	4631      	mov	r1, r6
 8001e5e:	dcf1      	bgt.n	8001e44 <__exponent+0x1c>
 8001e60:	3130      	adds	r1, #48	@ 0x30
 8001e62:	1e94      	subs	r4, r2, #2
 8001e64:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001e68:	1c41      	adds	r1, r0, #1
 8001e6a:	4623      	mov	r3, r4
 8001e6c:	42ab      	cmp	r3, r5
 8001e6e:	d30a      	bcc.n	8001e86 <__exponent+0x5e>
 8001e70:	f10d 0309 	add.w	r3, sp, #9
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	42ac      	cmp	r4, r5
 8001e78:	bf88      	it	hi
 8001e7a:	2300      	movhi	r3, #0
 8001e7c:	3302      	adds	r3, #2
 8001e7e:	4403      	add	r3, r0
 8001e80:	1a18      	subs	r0, r3, r0
 8001e82:	b003      	add	sp, #12
 8001e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e86:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001e8a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001e8e:	e7ed      	b.n	8001e6c <__exponent+0x44>
 8001e90:	2330      	movs	r3, #48	@ 0x30
 8001e92:	3130      	adds	r1, #48	@ 0x30
 8001e94:	7083      	strb	r3, [r0, #2]
 8001e96:	70c1      	strb	r1, [r0, #3]
 8001e98:	1d03      	adds	r3, r0, #4
 8001e9a:	e7f1      	b.n	8001e80 <__exponent+0x58>

08001e9c <_printf_float>:
 8001e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ea0:	b08d      	sub	sp, #52	@ 0x34
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001ea8:	4616      	mov	r6, r2
 8001eaa:	461f      	mov	r7, r3
 8001eac:	4605      	mov	r5, r0
 8001eae:	f000 fcf5 	bl	800289c <_localeconv_r>
 8001eb2:	6803      	ldr	r3, [r0, #0]
 8001eb4:	9304      	str	r3, [sp, #16]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe f9e2 	bl	8000280 <strlen>
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	930a      	str	r3, [sp, #40]	@ 0x28
 8001ec0:	f8d8 3000 	ldr.w	r3, [r8]
 8001ec4:	9005      	str	r0, [sp, #20]
 8001ec6:	3307      	adds	r3, #7
 8001ec8:	f023 0307 	bic.w	r3, r3, #7
 8001ecc:	f103 0208 	add.w	r2, r3, #8
 8001ed0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001ed4:	f8d4 b000 	ldr.w	fp, [r4]
 8001ed8:	f8c8 2000 	str.w	r2, [r8]
 8001edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001ee0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8001ee4:	9307      	str	r3, [sp, #28]
 8001ee6:	f8cd 8018 	str.w	r8, [sp, #24]
 8001eea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8001eee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001ef2:	4b9c      	ldr	r3, [pc, #624]	@ (8002164 <_printf_float+0x2c8>)
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	f7fe fe20 	bl	8000b3c <__aeabi_dcmpun>
 8001efc:	bb70      	cbnz	r0, 8001f5c <_printf_float+0xc0>
 8001efe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001f02:	4b98      	ldr	r3, [pc, #608]	@ (8002164 <_printf_float+0x2c8>)
 8001f04:	f04f 32ff 	mov.w	r2, #4294967295
 8001f08:	f7fe fdfa 	bl	8000b00 <__aeabi_dcmple>
 8001f0c:	bb30      	cbnz	r0, 8001f5c <_printf_float+0xc0>
 8001f0e:	2200      	movs	r2, #0
 8001f10:	2300      	movs	r3, #0
 8001f12:	4640      	mov	r0, r8
 8001f14:	4649      	mov	r1, r9
 8001f16:	f7fe fde9 	bl	8000aec <__aeabi_dcmplt>
 8001f1a:	b110      	cbz	r0, 8001f22 <_printf_float+0x86>
 8001f1c:	232d      	movs	r3, #45	@ 0x2d
 8001f1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f22:	4a91      	ldr	r2, [pc, #580]	@ (8002168 <_printf_float+0x2cc>)
 8001f24:	4b91      	ldr	r3, [pc, #580]	@ (800216c <_printf_float+0x2d0>)
 8001f26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8001f2a:	bf94      	ite	ls
 8001f2c:	4690      	movls	r8, r2
 8001f2e:	4698      	movhi	r8, r3
 8001f30:	2303      	movs	r3, #3
 8001f32:	6123      	str	r3, [r4, #16]
 8001f34:	f02b 0304 	bic.w	r3, fp, #4
 8001f38:	6023      	str	r3, [r4, #0]
 8001f3a:	f04f 0900 	mov.w	r9, #0
 8001f3e:	9700      	str	r7, [sp, #0]
 8001f40:	4633      	mov	r3, r6
 8001f42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001f44:	4621      	mov	r1, r4
 8001f46:	4628      	mov	r0, r5
 8001f48:	f000 f9d2 	bl	80022f0 <_printf_common>
 8001f4c:	3001      	adds	r0, #1
 8001f4e:	f040 808d 	bne.w	800206c <_printf_float+0x1d0>
 8001f52:	f04f 30ff 	mov.w	r0, #4294967295
 8001f56:	b00d      	add	sp, #52	@ 0x34
 8001f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f5c:	4642      	mov	r2, r8
 8001f5e:	464b      	mov	r3, r9
 8001f60:	4640      	mov	r0, r8
 8001f62:	4649      	mov	r1, r9
 8001f64:	f7fe fdea 	bl	8000b3c <__aeabi_dcmpun>
 8001f68:	b140      	cbz	r0, 8001f7c <_printf_float+0xe0>
 8001f6a:	464b      	mov	r3, r9
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	bfbc      	itt	lt
 8001f70:	232d      	movlt	r3, #45	@ 0x2d
 8001f72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8001f76:	4a7e      	ldr	r2, [pc, #504]	@ (8002170 <_printf_float+0x2d4>)
 8001f78:	4b7e      	ldr	r3, [pc, #504]	@ (8002174 <_printf_float+0x2d8>)
 8001f7a:	e7d4      	b.n	8001f26 <_printf_float+0x8a>
 8001f7c:	6863      	ldr	r3, [r4, #4]
 8001f7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8001f82:	9206      	str	r2, [sp, #24]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	d13b      	bne.n	8002000 <_printf_float+0x164>
 8001f88:	2306      	movs	r3, #6
 8001f8a:	6063      	str	r3, [r4, #4]
 8001f8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8001f90:	2300      	movs	r3, #0
 8001f92:	6022      	str	r2, [r4, #0]
 8001f94:	9303      	str	r3, [sp, #12]
 8001f96:	ab0a      	add	r3, sp, #40	@ 0x28
 8001f98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8001f9c:	ab09      	add	r3, sp, #36	@ 0x24
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	6861      	ldr	r1, [r4, #4]
 8001fa2:	ec49 8b10 	vmov	d0, r8, r9
 8001fa6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8001faa:	4628      	mov	r0, r5
 8001fac:	f7ff fed7 	bl	8001d5e <__cvt>
 8001fb0:	9b06      	ldr	r3, [sp, #24]
 8001fb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001fb4:	2b47      	cmp	r3, #71	@ 0x47
 8001fb6:	4680      	mov	r8, r0
 8001fb8:	d129      	bne.n	800200e <_printf_float+0x172>
 8001fba:	1cc8      	adds	r0, r1, #3
 8001fbc:	db02      	blt.n	8001fc4 <_printf_float+0x128>
 8001fbe:	6863      	ldr	r3, [r4, #4]
 8001fc0:	4299      	cmp	r1, r3
 8001fc2:	dd41      	ble.n	8002048 <_printf_float+0x1ac>
 8001fc4:	f1aa 0a02 	sub.w	sl, sl, #2
 8001fc8:	fa5f fa8a 	uxtb.w	sl, sl
 8001fcc:	3901      	subs	r1, #1
 8001fce:	4652      	mov	r2, sl
 8001fd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8001fd4:	9109      	str	r1, [sp, #36]	@ 0x24
 8001fd6:	f7ff ff27 	bl	8001e28 <__exponent>
 8001fda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001fdc:	1813      	adds	r3, r2, r0
 8001fde:	2a01      	cmp	r2, #1
 8001fe0:	4681      	mov	r9, r0
 8001fe2:	6123      	str	r3, [r4, #16]
 8001fe4:	dc02      	bgt.n	8001fec <_printf_float+0x150>
 8001fe6:	6822      	ldr	r2, [r4, #0]
 8001fe8:	07d2      	lsls	r2, r2, #31
 8001fea:	d501      	bpl.n	8001ff0 <_printf_float+0x154>
 8001fec:	3301      	adds	r3, #1
 8001fee:	6123      	str	r3, [r4, #16]
 8001ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0a2      	beq.n	8001f3e <_printf_float+0xa2>
 8001ff8:	232d      	movs	r3, #45	@ 0x2d
 8001ffa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001ffe:	e79e      	b.n	8001f3e <_printf_float+0xa2>
 8002000:	9a06      	ldr	r2, [sp, #24]
 8002002:	2a47      	cmp	r2, #71	@ 0x47
 8002004:	d1c2      	bne.n	8001f8c <_printf_float+0xf0>
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1c0      	bne.n	8001f8c <_printf_float+0xf0>
 800200a:	2301      	movs	r3, #1
 800200c:	e7bd      	b.n	8001f8a <_printf_float+0xee>
 800200e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002012:	d9db      	bls.n	8001fcc <_printf_float+0x130>
 8002014:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002018:	d118      	bne.n	800204c <_printf_float+0x1b0>
 800201a:	2900      	cmp	r1, #0
 800201c:	6863      	ldr	r3, [r4, #4]
 800201e:	dd0b      	ble.n	8002038 <_printf_float+0x19c>
 8002020:	6121      	str	r1, [r4, #16]
 8002022:	b913      	cbnz	r3, 800202a <_printf_float+0x18e>
 8002024:	6822      	ldr	r2, [r4, #0]
 8002026:	07d0      	lsls	r0, r2, #31
 8002028:	d502      	bpl.n	8002030 <_printf_float+0x194>
 800202a:	3301      	adds	r3, #1
 800202c:	440b      	add	r3, r1
 800202e:	6123      	str	r3, [r4, #16]
 8002030:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002032:	f04f 0900 	mov.w	r9, #0
 8002036:	e7db      	b.n	8001ff0 <_printf_float+0x154>
 8002038:	b913      	cbnz	r3, 8002040 <_printf_float+0x1a4>
 800203a:	6822      	ldr	r2, [r4, #0]
 800203c:	07d2      	lsls	r2, r2, #31
 800203e:	d501      	bpl.n	8002044 <_printf_float+0x1a8>
 8002040:	3302      	adds	r3, #2
 8002042:	e7f4      	b.n	800202e <_printf_float+0x192>
 8002044:	2301      	movs	r3, #1
 8002046:	e7f2      	b.n	800202e <_printf_float+0x192>
 8002048:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800204c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800204e:	4299      	cmp	r1, r3
 8002050:	db05      	blt.n	800205e <_printf_float+0x1c2>
 8002052:	6823      	ldr	r3, [r4, #0]
 8002054:	6121      	str	r1, [r4, #16]
 8002056:	07d8      	lsls	r0, r3, #31
 8002058:	d5ea      	bpl.n	8002030 <_printf_float+0x194>
 800205a:	1c4b      	adds	r3, r1, #1
 800205c:	e7e7      	b.n	800202e <_printf_float+0x192>
 800205e:	2900      	cmp	r1, #0
 8002060:	bfd4      	ite	le
 8002062:	f1c1 0202 	rsble	r2, r1, #2
 8002066:	2201      	movgt	r2, #1
 8002068:	4413      	add	r3, r2
 800206a:	e7e0      	b.n	800202e <_printf_float+0x192>
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	055a      	lsls	r2, r3, #21
 8002070:	d407      	bmi.n	8002082 <_printf_float+0x1e6>
 8002072:	6923      	ldr	r3, [r4, #16]
 8002074:	4642      	mov	r2, r8
 8002076:	4631      	mov	r1, r6
 8002078:	4628      	mov	r0, r5
 800207a:	47b8      	blx	r7
 800207c:	3001      	adds	r0, #1
 800207e:	d12b      	bne.n	80020d8 <_printf_float+0x23c>
 8002080:	e767      	b.n	8001f52 <_printf_float+0xb6>
 8002082:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002086:	f240 80dd 	bls.w	8002244 <_printf_float+0x3a8>
 800208a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800208e:	2200      	movs	r2, #0
 8002090:	2300      	movs	r3, #0
 8002092:	f7fe fd21 	bl	8000ad8 <__aeabi_dcmpeq>
 8002096:	2800      	cmp	r0, #0
 8002098:	d033      	beq.n	8002102 <_printf_float+0x266>
 800209a:	4a37      	ldr	r2, [pc, #220]	@ (8002178 <_printf_float+0x2dc>)
 800209c:	2301      	movs	r3, #1
 800209e:	4631      	mov	r1, r6
 80020a0:	4628      	mov	r0, r5
 80020a2:	47b8      	blx	r7
 80020a4:	3001      	adds	r0, #1
 80020a6:	f43f af54 	beq.w	8001f52 <_printf_float+0xb6>
 80020aa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80020ae:	4543      	cmp	r3, r8
 80020b0:	db02      	blt.n	80020b8 <_printf_float+0x21c>
 80020b2:	6823      	ldr	r3, [r4, #0]
 80020b4:	07d8      	lsls	r0, r3, #31
 80020b6:	d50f      	bpl.n	80020d8 <_printf_float+0x23c>
 80020b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80020bc:	4631      	mov	r1, r6
 80020be:	4628      	mov	r0, r5
 80020c0:	47b8      	blx	r7
 80020c2:	3001      	adds	r0, #1
 80020c4:	f43f af45 	beq.w	8001f52 <_printf_float+0xb6>
 80020c8:	f04f 0900 	mov.w	r9, #0
 80020cc:	f108 38ff 	add.w	r8, r8, #4294967295
 80020d0:	f104 0a1a 	add.w	sl, r4, #26
 80020d4:	45c8      	cmp	r8, r9
 80020d6:	dc09      	bgt.n	80020ec <_printf_float+0x250>
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	079b      	lsls	r3, r3, #30
 80020dc:	f100 8103 	bmi.w	80022e6 <_printf_float+0x44a>
 80020e0:	68e0      	ldr	r0, [r4, #12]
 80020e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80020e4:	4298      	cmp	r0, r3
 80020e6:	bfb8      	it	lt
 80020e8:	4618      	movlt	r0, r3
 80020ea:	e734      	b.n	8001f56 <_printf_float+0xba>
 80020ec:	2301      	movs	r3, #1
 80020ee:	4652      	mov	r2, sl
 80020f0:	4631      	mov	r1, r6
 80020f2:	4628      	mov	r0, r5
 80020f4:	47b8      	blx	r7
 80020f6:	3001      	adds	r0, #1
 80020f8:	f43f af2b 	beq.w	8001f52 <_printf_float+0xb6>
 80020fc:	f109 0901 	add.w	r9, r9, #1
 8002100:	e7e8      	b.n	80020d4 <_printf_float+0x238>
 8002102:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	dc39      	bgt.n	800217c <_printf_float+0x2e0>
 8002108:	4a1b      	ldr	r2, [pc, #108]	@ (8002178 <_printf_float+0x2dc>)
 800210a:	2301      	movs	r3, #1
 800210c:	4631      	mov	r1, r6
 800210e:	4628      	mov	r0, r5
 8002110:	47b8      	blx	r7
 8002112:	3001      	adds	r0, #1
 8002114:	f43f af1d 	beq.w	8001f52 <_printf_float+0xb6>
 8002118:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800211c:	ea59 0303 	orrs.w	r3, r9, r3
 8002120:	d102      	bne.n	8002128 <_printf_float+0x28c>
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	07d9      	lsls	r1, r3, #31
 8002126:	d5d7      	bpl.n	80020d8 <_printf_float+0x23c>
 8002128:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800212c:	4631      	mov	r1, r6
 800212e:	4628      	mov	r0, r5
 8002130:	47b8      	blx	r7
 8002132:	3001      	adds	r0, #1
 8002134:	f43f af0d 	beq.w	8001f52 <_printf_float+0xb6>
 8002138:	f04f 0a00 	mov.w	sl, #0
 800213c:	f104 0b1a 	add.w	fp, r4, #26
 8002140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002142:	425b      	negs	r3, r3
 8002144:	4553      	cmp	r3, sl
 8002146:	dc01      	bgt.n	800214c <_printf_float+0x2b0>
 8002148:	464b      	mov	r3, r9
 800214a:	e793      	b.n	8002074 <_printf_float+0x1d8>
 800214c:	2301      	movs	r3, #1
 800214e:	465a      	mov	r2, fp
 8002150:	4631      	mov	r1, r6
 8002152:	4628      	mov	r0, r5
 8002154:	47b8      	blx	r7
 8002156:	3001      	adds	r0, #1
 8002158:	f43f aefb 	beq.w	8001f52 <_printf_float+0xb6>
 800215c:	f10a 0a01 	add.w	sl, sl, #1
 8002160:	e7ee      	b.n	8002140 <_printf_float+0x2a4>
 8002162:	bf00      	nop
 8002164:	7fefffff 	.word	0x7fefffff
 8002168:	08004a74 	.word	0x08004a74
 800216c:	08004a78 	.word	0x08004a78
 8002170:	08004a7c 	.word	0x08004a7c
 8002174:	08004a80 	.word	0x08004a80
 8002178:	08004a84 	.word	0x08004a84
 800217c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800217e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002182:	4553      	cmp	r3, sl
 8002184:	bfa8      	it	ge
 8002186:	4653      	movge	r3, sl
 8002188:	2b00      	cmp	r3, #0
 800218a:	4699      	mov	r9, r3
 800218c:	dc36      	bgt.n	80021fc <_printf_float+0x360>
 800218e:	f04f 0b00 	mov.w	fp, #0
 8002192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002196:	f104 021a 	add.w	r2, r4, #26
 800219a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800219c:	9306      	str	r3, [sp, #24]
 800219e:	eba3 0309 	sub.w	r3, r3, r9
 80021a2:	455b      	cmp	r3, fp
 80021a4:	dc31      	bgt.n	800220a <_printf_float+0x36e>
 80021a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80021a8:	459a      	cmp	sl, r3
 80021aa:	dc3a      	bgt.n	8002222 <_printf_float+0x386>
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	07da      	lsls	r2, r3, #31
 80021b0:	d437      	bmi.n	8002222 <_printf_float+0x386>
 80021b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80021b4:	ebaa 0903 	sub.w	r9, sl, r3
 80021b8:	9b06      	ldr	r3, [sp, #24]
 80021ba:	ebaa 0303 	sub.w	r3, sl, r3
 80021be:	4599      	cmp	r9, r3
 80021c0:	bfa8      	it	ge
 80021c2:	4699      	movge	r9, r3
 80021c4:	f1b9 0f00 	cmp.w	r9, #0
 80021c8:	dc33      	bgt.n	8002232 <_printf_float+0x396>
 80021ca:	f04f 0800 	mov.w	r8, #0
 80021ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80021d2:	f104 0b1a 	add.w	fp, r4, #26
 80021d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80021d8:	ebaa 0303 	sub.w	r3, sl, r3
 80021dc:	eba3 0309 	sub.w	r3, r3, r9
 80021e0:	4543      	cmp	r3, r8
 80021e2:	f77f af79 	ble.w	80020d8 <_printf_float+0x23c>
 80021e6:	2301      	movs	r3, #1
 80021e8:	465a      	mov	r2, fp
 80021ea:	4631      	mov	r1, r6
 80021ec:	4628      	mov	r0, r5
 80021ee:	47b8      	blx	r7
 80021f0:	3001      	adds	r0, #1
 80021f2:	f43f aeae 	beq.w	8001f52 <_printf_float+0xb6>
 80021f6:	f108 0801 	add.w	r8, r8, #1
 80021fa:	e7ec      	b.n	80021d6 <_printf_float+0x33a>
 80021fc:	4642      	mov	r2, r8
 80021fe:	4631      	mov	r1, r6
 8002200:	4628      	mov	r0, r5
 8002202:	47b8      	blx	r7
 8002204:	3001      	adds	r0, #1
 8002206:	d1c2      	bne.n	800218e <_printf_float+0x2f2>
 8002208:	e6a3      	b.n	8001f52 <_printf_float+0xb6>
 800220a:	2301      	movs	r3, #1
 800220c:	4631      	mov	r1, r6
 800220e:	4628      	mov	r0, r5
 8002210:	9206      	str	r2, [sp, #24]
 8002212:	47b8      	blx	r7
 8002214:	3001      	adds	r0, #1
 8002216:	f43f ae9c 	beq.w	8001f52 <_printf_float+0xb6>
 800221a:	9a06      	ldr	r2, [sp, #24]
 800221c:	f10b 0b01 	add.w	fp, fp, #1
 8002220:	e7bb      	b.n	800219a <_printf_float+0x2fe>
 8002222:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002226:	4631      	mov	r1, r6
 8002228:	4628      	mov	r0, r5
 800222a:	47b8      	blx	r7
 800222c:	3001      	adds	r0, #1
 800222e:	d1c0      	bne.n	80021b2 <_printf_float+0x316>
 8002230:	e68f      	b.n	8001f52 <_printf_float+0xb6>
 8002232:	9a06      	ldr	r2, [sp, #24]
 8002234:	464b      	mov	r3, r9
 8002236:	4442      	add	r2, r8
 8002238:	4631      	mov	r1, r6
 800223a:	4628      	mov	r0, r5
 800223c:	47b8      	blx	r7
 800223e:	3001      	adds	r0, #1
 8002240:	d1c3      	bne.n	80021ca <_printf_float+0x32e>
 8002242:	e686      	b.n	8001f52 <_printf_float+0xb6>
 8002244:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002248:	f1ba 0f01 	cmp.w	sl, #1
 800224c:	dc01      	bgt.n	8002252 <_printf_float+0x3b6>
 800224e:	07db      	lsls	r3, r3, #31
 8002250:	d536      	bpl.n	80022c0 <_printf_float+0x424>
 8002252:	2301      	movs	r3, #1
 8002254:	4642      	mov	r2, r8
 8002256:	4631      	mov	r1, r6
 8002258:	4628      	mov	r0, r5
 800225a:	47b8      	blx	r7
 800225c:	3001      	adds	r0, #1
 800225e:	f43f ae78 	beq.w	8001f52 <_printf_float+0xb6>
 8002262:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002266:	4631      	mov	r1, r6
 8002268:	4628      	mov	r0, r5
 800226a:	47b8      	blx	r7
 800226c:	3001      	adds	r0, #1
 800226e:	f43f ae70 	beq.w	8001f52 <_printf_float+0xb6>
 8002272:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002276:	2200      	movs	r2, #0
 8002278:	2300      	movs	r3, #0
 800227a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800227e:	f7fe fc2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8002282:	b9c0      	cbnz	r0, 80022b6 <_printf_float+0x41a>
 8002284:	4653      	mov	r3, sl
 8002286:	f108 0201 	add.w	r2, r8, #1
 800228a:	4631      	mov	r1, r6
 800228c:	4628      	mov	r0, r5
 800228e:	47b8      	blx	r7
 8002290:	3001      	adds	r0, #1
 8002292:	d10c      	bne.n	80022ae <_printf_float+0x412>
 8002294:	e65d      	b.n	8001f52 <_printf_float+0xb6>
 8002296:	2301      	movs	r3, #1
 8002298:	465a      	mov	r2, fp
 800229a:	4631      	mov	r1, r6
 800229c:	4628      	mov	r0, r5
 800229e:	47b8      	blx	r7
 80022a0:	3001      	adds	r0, #1
 80022a2:	f43f ae56 	beq.w	8001f52 <_printf_float+0xb6>
 80022a6:	f108 0801 	add.w	r8, r8, #1
 80022aa:	45d0      	cmp	r8, sl
 80022ac:	dbf3      	blt.n	8002296 <_printf_float+0x3fa>
 80022ae:	464b      	mov	r3, r9
 80022b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80022b4:	e6df      	b.n	8002076 <_printf_float+0x1da>
 80022b6:	f04f 0800 	mov.w	r8, #0
 80022ba:	f104 0b1a 	add.w	fp, r4, #26
 80022be:	e7f4      	b.n	80022aa <_printf_float+0x40e>
 80022c0:	2301      	movs	r3, #1
 80022c2:	4642      	mov	r2, r8
 80022c4:	e7e1      	b.n	800228a <_printf_float+0x3ee>
 80022c6:	2301      	movs	r3, #1
 80022c8:	464a      	mov	r2, r9
 80022ca:	4631      	mov	r1, r6
 80022cc:	4628      	mov	r0, r5
 80022ce:	47b8      	blx	r7
 80022d0:	3001      	adds	r0, #1
 80022d2:	f43f ae3e 	beq.w	8001f52 <_printf_float+0xb6>
 80022d6:	f108 0801 	add.w	r8, r8, #1
 80022da:	68e3      	ldr	r3, [r4, #12]
 80022dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80022de:	1a5b      	subs	r3, r3, r1
 80022e0:	4543      	cmp	r3, r8
 80022e2:	dcf0      	bgt.n	80022c6 <_printf_float+0x42a>
 80022e4:	e6fc      	b.n	80020e0 <_printf_float+0x244>
 80022e6:	f04f 0800 	mov.w	r8, #0
 80022ea:	f104 0919 	add.w	r9, r4, #25
 80022ee:	e7f4      	b.n	80022da <_printf_float+0x43e>

080022f0 <_printf_common>:
 80022f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022f4:	4616      	mov	r6, r2
 80022f6:	4698      	mov	r8, r3
 80022f8:	688a      	ldr	r2, [r1, #8]
 80022fa:	690b      	ldr	r3, [r1, #16]
 80022fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002300:	4293      	cmp	r3, r2
 8002302:	bfb8      	it	lt
 8002304:	4613      	movlt	r3, r2
 8002306:	6033      	str	r3, [r6, #0]
 8002308:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800230c:	4607      	mov	r7, r0
 800230e:	460c      	mov	r4, r1
 8002310:	b10a      	cbz	r2, 8002316 <_printf_common+0x26>
 8002312:	3301      	adds	r3, #1
 8002314:	6033      	str	r3, [r6, #0]
 8002316:	6823      	ldr	r3, [r4, #0]
 8002318:	0699      	lsls	r1, r3, #26
 800231a:	bf42      	ittt	mi
 800231c:	6833      	ldrmi	r3, [r6, #0]
 800231e:	3302      	addmi	r3, #2
 8002320:	6033      	strmi	r3, [r6, #0]
 8002322:	6825      	ldr	r5, [r4, #0]
 8002324:	f015 0506 	ands.w	r5, r5, #6
 8002328:	d106      	bne.n	8002338 <_printf_common+0x48>
 800232a:	f104 0a19 	add.w	sl, r4, #25
 800232e:	68e3      	ldr	r3, [r4, #12]
 8002330:	6832      	ldr	r2, [r6, #0]
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	42ab      	cmp	r3, r5
 8002336:	dc26      	bgt.n	8002386 <_printf_common+0x96>
 8002338:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800233c:	6822      	ldr	r2, [r4, #0]
 800233e:	3b00      	subs	r3, #0
 8002340:	bf18      	it	ne
 8002342:	2301      	movne	r3, #1
 8002344:	0692      	lsls	r2, r2, #26
 8002346:	d42b      	bmi.n	80023a0 <_printf_common+0xb0>
 8002348:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800234c:	4641      	mov	r1, r8
 800234e:	4638      	mov	r0, r7
 8002350:	47c8      	blx	r9
 8002352:	3001      	adds	r0, #1
 8002354:	d01e      	beq.n	8002394 <_printf_common+0xa4>
 8002356:	6823      	ldr	r3, [r4, #0]
 8002358:	6922      	ldr	r2, [r4, #16]
 800235a:	f003 0306 	and.w	r3, r3, #6
 800235e:	2b04      	cmp	r3, #4
 8002360:	bf02      	ittt	eq
 8002362:	68e5      	ldreq	r5, [r4, #12]
 8002364:	6833      	ldreq	r3, [r6, #0]
 8002366:	1aed      	subeq	r5, r5, r3
 8002368:	68a3      	ldr	r3, [r4, #8]
 800236a:	bf0c      	ite	eq
 800236c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002370:	2500      	movne	r5, #0
 8002372:	4293      	cmp	r3, r2
 8002374:	bfc4      	itt	gt
 8002376:	1a9b      	subgt	r3, r3, r2
 8002378:	18ed      	addgt	r5, r5, r3
 800237a:	2600      	movs	r6, #0
 800237c:	341a      	adds	r4, #26
 800237e:	42b5      	cmp	r5, r6
 8002380:	d11a      	bne.n	80023b8 <_printf_common+0xc8>
 8002382:	2000      	movs	r0, #0
 8002384:	e008      	b.n	8002398 <_printf_common+0xa8>
 8002386:	2301      	movs	r3, #1
 8002388:	4652      	mov	r2, sl
 800238a:	4641      	mov	r1, r8
 800238c:	4638      	mov	r0, r7
 800238e:	47c8      	blx	r9
 8002390:	3001      	adds	r0, #1
 8002392:	d103      	bne.n	800239c <_printf_common+0xac>
 8002394:	f04f 30ff 	mov.w	r0, #4294967295
 8002398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800239c:	3501      	adds	r5, #1
 800239e:	e7c6      	b.n	800232e <_printf_common+0x3e>
 80023a0:	18e1      	adds	r1, r4, r3
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	2030      	movs	r0, #48	@ 0x30
 80023a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80023aa:	4422      	add	r2, r4
 80023ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80023b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80023b4:	3302      	adds	r3, #2
 80023b6:	e7c7      	b.n	8002348 <_printf_common+0x58>
 80023b8:	2301      	movs	r3, #1
 80023ba:	4622      	mov	r2, r4
 80023bc:	4641      	mov	r1, r8
 80023be:	4638      	mov	r0, r7
 80023c0:	47c8      	blx	r9
 80023c2:	3001      	adds	r0, #1
 80023c4:	d0e6      	beq.n	8002394 <_printf_common+0xa4>
 80023c6:	3601      	adds	r6, #1
 80023c8:	e7d9      	b.n	800237e <_printf_common+0x8e>
	...

080023cc <_printf_i>:
 80023cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80023d0:	7e0f      	ldrb	r7, [r1, #24]
 80023d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80023d4:	2f78      	cmp	r7, #120	@ 0x78
 80023d6:	4691      	mov	r9, r2
 80023d8:	4680      	mov	r8, r0
 80023da:	460c      	mov	r4, r1
 80023dc:	469a      	mov	sl, r3
 80023de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80023e2:	d807      	bhi.n	80023f4 <_printf_i+0x28>
 80023e4:	2f62      	cmp	r7, #98	@ 0x62
 80023e6:	d80a      	bhi.n	80023fe <_printf_i+0x32>
 80023e8:	2f00      	cmp	r7, #0
 80023ea:	f000 80d2 	beq.w	8002592 <_printf_i+0x1c6>
 80023ee:	2f58      	cmp	r7, #88	@ 0x58
 80023f0:	f000 80b9 	beq.w	8002566 <_printf_i+0x19a>
 80023f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80023f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80023fc:	e03a      	b.n	8002474 <_printf_i+0xa8>
 80023fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002402:	2b15      	cmp	r3, #21
 8002404:	d8f6      	bhi.n	80023f4 <_printf_i+0x28>
 8002406:	a101      	add	r1, pc, #4	@ (adr r1, 800240c <_printf_i+0x40>)
 8002408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800240c:	08002465 	.word	0x08002465
 8002410:	08002479 	.word	0x08002479
 8002414:	080023f5 	.word	0x080023f5
 8002418:	080023f5 	.word	0x080023f5
 800241c:	080023f5 	.word	0x080023f5
 8002420:	080023f5 	.word	0x080023f5
 8002424:	08002479 	.word	0x08002479
 8002428:	080023f5 	.word	0x080023f5
 800242c:	080023f5 	.word	0x080023f5
 8002430:	080023f5 	.word	0x080023f5
 8002434:	080023f5 	.word	0x080023f5
 8002438:	08002579 	.word	0x08002579
 800243c:	080024a3 	.word	0x080024a3
 8002440:	08002533 	.word	0x08002533
 8002444:	080023f5 	.word	0x080023f5
 8002448:	080023f5 	.word	0x080023f5
 800244c:	0800259b 	.word	0x0800259b
 8002450:	080023f5 	.word	0x080023f5
 8002454:	080024a3 	.word	0x080024a3
 8002458:	080023f5 	.word	0x080023f5
 800245c:	080023f5 	.word	0x080023f5
 8002460:	0800253b 	.word	0x0800253b
 8002464:	6833      	ldr	r3, [r6, #0]
 8002466:	1d1a      	adds	r2, r3, #4
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6032      	str	r2, [r6, #0]
 800246c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002470:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002474:	2301      	movs	r3, #1
 8002476:	e09d      	b.n	80025b4 <_printf_i+0x1e8>
 8002478:	6833      	ldr	r3, [r6, #0]
 800247a:	6820      	ldr	r0, [r4, #0]
 800247c:	1d19      	adds	r1, r3, #4
 800247e:	6031      	str	r1, [r6, #0]
 8002480:	0606      	lsls	r6, r0, #24
 8002482:	d501      	bpl.n	8002488 <_printf_i+0xbc>
 8002484:	681d      	ldr	r5, [r3, #0]
 8002486:	e003      	b.n	8002490 <_printf_i+0xc4>
 8002488:	0645      	lsls	r5, r0, #25
 800248a:	d5fb      	bpl.n	8002484 <_printf_i+0xb8>
 800248c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002490:	2d00      	cmp	r5, #0
 8002492:	da03      	bge.n	800249c <_printf_i+0xd0>
 8002494:	232d      	movs	r3, #45	@ 0x2d
 8002496:	426d      	negs	r5, r5
 8002498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800249c:	4859      	ldr	r0, [pc, #356]	@ (8002604 <_printf_i+0x238>)
 800249e:	230a      	movs	r3, #10
 80024a0:	e011      	b.n	80024c6 <_printf_i+0xfa>
 80024a2:	6821      	ldr	r1, [r4, #0]
 80024a4:	6833      	ldr	r3, [r6, #0]
 80024a6:	0608      	lsls	r0, r1, #24
 80024a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80024ac:	d402      	bmi.n	80024b4 <_printf_i+0xe8>
 80024ae:	0649      	lsls	r1, r1, #25
 80024b0:	bf48      	it	mi
 80024b2:	b2ad      	uxthmi	r5, r5
 80024b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80024b6:	4853      	ldr	r0, [pc, #332]	@ (8002604 <_printf_i+0x238>)
 80024b8:	6033      	str	r3, [r6, #0]
 80024ba:	bf14      	ite	ne
 80024bc:	230a      	movne	r3, #10
 80024be:	2308      	moveq	r3, #8
 80024c0:	2100      	movs	r1, #0
 80024c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80024c6:	6866      	ldr	r6, [r4, #4]
 80024c8:	60a6      	str	r6, [r4, #8]
 80024ca:	2e00      	cmp	r6, #0
 80024cc:	bfa2      	ittt	ge
 80024ce:	6821      	ldrge	r1, [r4, #0]
 80024d0:	f021 0104 	bicge.w	r1, r1, #4
 80024d4:	6021      	strge	r1, [r4, #0]
 80024d6:	b90d      	cbnz	r5, 80024dc <_printf_i+0x110>
 80024d8:	2e00      	cmp	r6, #0
 80024da:	d04b      	beq.n	8002574 <_printf_i+0x1a8>
 80024dc:	4616      	mov	r6, r2
 80024de:	fbb5 f1f3 	udiv	r1, r5, r3
 80024e2:	fb03 5711 	mls	r7, r3, r1, r5
 80024e6:	5dc7      	ldrb	r7, [r0, r7]
 80024e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80024ec:	462f      	mov	r7, r5
 80024ee:	42bb      	cmp	r3, r7
 80024f0:	460d      	mov	r5, r1
 80024f2:	d9f4      	bls.n	80024de <_printf_i+0x112>
 80024f4:	2b08      	cmp	r3, #8
 80024f6:	d10b      	bne.n	8002510 <_printf_i+0x144>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	07df      	lsls	r7, r3, #31
 80024fc:	d508      	bpl.n	8002510 <_printf_i+0x144>
 80024fe:	6923      	ldr	r3, [r4, #16]
 8002500:	6861      	ldr	r1, [r4, #4]
 8002502:	4299      	cmp	r1, r3
 8002504:	bfde      	ittt	le
 8002506:	2330      	movle	r3, #48	@ 0x30
 8002508:	f806 3c01 	strble.w	r3, [r6, #-1]
 800250c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002510:	1b92      	subs	r2, r2, r6
 8002512:	6122      	str	r2, [r4, #16]
 8002514:	f8cd a000 	str.w	sl, [sp]
 8002518:	464b      	mov	r3, r9
 800251a:	aa03      	add	r2, sp, #12
 800251c:	4621      	mov	r1, r4
 800251e:	4640      	mov	r0, r8
 8002520:	f7ff fee6 	bl	80022f0 <_printf_common>
 8002524:	3001      	adds	r0, #1
 8002526:	d14a      	bne.n	80025be <_printf_i+0x1f2>
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	b004      	add	sp, #16
 800252e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	f043 0320 	orr.w	r3, r3, #32
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	4833      	ldr	r0, [pc, #204]	@ (8002608 <_printf_i+0x23c>)
 800253c:	2778      	movs	r7, #120	@ 0x78
 800253e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002542:	6823      	ldr	r3, [r4, #0]
 8002544:	6831      	ldr	r1, [r6, #0]
 8002546:	061f      	lsls	r7, r3, #24
 8002548:	f851 5b04 	ldr.w	r5, [r1], #4
 800254c:	d402      	bmi.n	8002554 <_printf_i+0x188>
 800254e:	065f      	lsls	r7, r3, #25
 8002550:	bf48      	it	mi
 8002552:	b2ad      	uxthmi	r5, r5
 8002554:	6031      	str	r1, [r6, #0]
 8002556:	07d9      	lsls	r1, r3, #31
 8002558:	bf44      	itt	mi
 800255a:	f043 0320 	orrmi.w	r3, r3, #32
 800255e:	6023      	strmi	r3, [r4, #0]
 8002560:	b11d      	cbz	r5, 800256a <_printf_i+0x19e>
 8002562:	2310      	movs	r3, #16
 8002564:	e7ac      	b.n	80024c0 <_printf_i+0xf4>
 8002566:	4827      	ldr	r0, [pc, #156]	@ (8002604 <_printf_i+0x238>)
 8002568:	e7e9      	b.n	800253e <_printf_i+0x172>
 800256a:	6823      	ldr	r3, [r4, #0]
 800256c:	f023 0320 	bic.w	r3, r3, #32
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	e7f6      	b.n	8002562 <_printf_i+0x196>
 8002574:	4616      	mov	r6, r2
 8002576:	e7bd      	b.n	80024f4 <_printf_i+0x128>
 8002578:	6833      	ldr	r3, [r6, #0]
 800257a:	6825      	ldr	r5, [r4, #0]
 800257c:	6961      	ldr	r1, [r4, #20]
 800257e:	1d18      	adds	r0, r3, #4
 8002580:	6030      	str	r0, [r6, #0]
 8002582:	062e      	lsls	r6, r5, #24
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	d501      	bpl.n	800258c <_printf_i+0x1c0>
 8002588:	6019      	str	r1, [r3, #0]
 800258a:	e002      	b.n	8002592 <_printf_i+0x1c6>
 800258c:	0668      	lsls	r0, r5, #25
 800258e:	d5fb      	bpl.n	8002588 <_printf_i+0x1bc>
 8002590:	8019      	strh	r1, [r3, #0]
 8002592:	2300      	movs	r3, #0
 8002594:	6123      	str	r3, [r4, #16]
 8002596:	4616      	mov	r6, r2
 8002598:	e7bc      	b.n	8002514 <_printf_i+0x148>
 800259a:	6833      	ldr	r3, [r6, #0]
 800259c:	1d1a      	adds	r2, r3, #4
 800259e:	6032      	str	r2, [r6, #0]
 80025a0:	681e      	ldr	r6, [r3, #0]
 80025a2:	6862      	ldr	r2, [r4, #4]
 80025a4:	2100      	movs	r1, #0
 80025a6:	4630      	mov	r0, r6
 80025a8:	f7fd fe1a 	bl	80001e0 <memchr>
 80025ac:	b108      	cbz	r0, 80025b2 <_printf_i+0x1e6>
 80025ae:	1b80      	subs	r0, r0, r6
 80025b0:	6060      	str	r0, [r4, #4]
 80025b2:	6863      	ldr	r3, [r4, #4]
 80025b4:	6123      	str	r3, [r4, #16]
 80025b6:	2300      	movs	r3, #0
 80025b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025bc:	e7aa      	b.n	8002514 <_printf_i+0x148>
 80025be:	6923      	ldr	r3, [r4, #16]
 80025c0:	4632      	mov	r2, r6
 80025c2:	4649      	mov	r1, r9
 80025c4:	4640      	mov	r0, r8
 80025c6:	47d0      	blx	sl
 80025c8:	3001      	adds	r0, #1
 80025ca:	d0ad      	beq.n	8002528 <_printf_i+0x15c>
 80025cc:	6823      	ldr	r3, [r4, #0]
 80025ce:	079b      	lsls	r3, r3, #30
 80025d0:	d413      	bmi.n	80025fa <_printf_i+0x22e>
 80025d2:	68e0      	ldr	r0, [r4, #12]
 80025d4:	9b03      	ldr	r3, [sp, #12]
 80025d6:	4298      	cmp	r0, r3
 80025d8:	bfb8      	it	lt
 80025da:	4618      	movlt	r0, r3
 80025dc:	e7a6      	b.n	800252c <_printf_i+0x160>
 80025de:	2301      	movs	r3, #1
 80025e0:	4632      	mov	r2, r6
 80025e2:	4649      	mov	r1, r9
 80025e4:	4640      	mov	r0, r8
 80025e6:	47d0      	blx	sl
 80025e8:	3001      	adds	r0, #1
 80025ea:	d09d      	beq.n	8002528 <_printf_i+0x15c>
 80025ec:	3501      	adds	r5, #1
 80025ee:	68e3      	ldr	r3, [r4, #12]
 80025f0:	9903      	ldr	r1, [sp, #12]
 80025f2:	1a5b      	subs	r3, r3, r1
 80025f4:	42ab      	cmp	r3, r5
 80025f6:	dcf2      	bgt.n	80025de <_printf_i+0x212>
 80025f8:	e7eb      	b.n	80025d2 <_printf_i+0x206>
 80025fa:	2500      	movs	r5, #0
 80025fc:	f104 0619 	add.w	r6, r4, #25
 8002600:	e7f5      	b.n	80025ee <_printf_i+0x222>
 8002602:	bf00      	nop
 8002604:	08004a86 	.word	0x08004a86
 8002608:	08004a97 	.word	0x08004a97

0800260c <std>:
 800260c:	2300      	movs	r3, #0
 800260e:	b510      	push	{r4, lr}
 8002610:	4604      	mov	r4, r0
 8002612:	e9c0 3300 	strd	r3, r3, [r0]
 8002616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800261a:	6083      	str	r3, [r0, #8]
 800261c:	8181      	strh	r1, [r0, #12]
 800261e:	6643      	str	r3, [r0, #100]	@ 0x64
 8002620:	81c2      	strh	r2, [r0, #14]
 8002622:	6183      	str	r3, [r0, #24]
 8002624:	4619      	mov	r1, r3
 8002626:	2208      	movs	r2, #8
 8002628:	305c      	adds	r0, #92	@ 0x5c
 800262a:	f000 f92e 	bl	800288a <memset>
 800262e:	4b0d      	ldr	r3, [pc, #52]	@ (8002664 <std+0x58>)
 8002630:	6263      	str	r3, [r4, #36]	@ 0x24
 8002632:	4b0d      	ldr	r3, [pc, #52]	@ (8002668 <std+0x5c>)
 8002634:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002636:	4b0d      	ldr	r3, [pc, #52]	@ (800266c <std+0x60>)
 8002638:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <std+0x64>)
 800263c:	6323      	str	r3, [r4, #48]	@ 0x30
 800263e:	4b0d      	ldr	r3, [pc, #52]	@ (8002674 <std+0x68>)
 8002640:	6224      	str	r4, [r4, #32]
 8002642:	429c      	cmp	r4, r3
 8002644:	d006      	beq.n	8002654 <std+0x48>
 8002646:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800264a:	4294      	cmp	r4, r2
 800264c:	d002      	beq.n	8002654 <std+0x48>
 800264e:	33d0      	adds	r3, #208	@ 0xd0
 8002650:	429c      	cmp	r4, r3
 8002652:	d105      	bne.n	8002660 <std+0x54>
 8002654:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800265c:	f000 b992 	b.w	8002984 <__retarget_lock_init_recursive>
 8002660:	bd10      	pop	{r4, pc}
 8002662:	bf00      	nop
 8002664:	080027d1 	.word	0x080027d1
 8002668:	080027f3 	.word	0x080027f3
 800266c:	0800282b 	.word	0x0800282b
 8002670:	0800284f 	.word	0x0800284f
 8002674:	20000200 	.word	0x20000200

08002678 <stdio_exit_handler>:
 8002678:	4a02      	ldr	r2, [pc, #8]	@ (8002684 <stdio_exit_handler+0xc>)
 800267a:	4903      	ldr	r1, [pc, #12]	@ (8002688 <stdio_exit_handler+0x10>)
 800267c:	4803      	ldr	r0, [pc, #12]	@ (800268c <stdio_exit_handler+0x14>)
 800267e:	f000 b869 	b.w	8002754 <_fwalk_sglue>
 8002682:	bf00      	nop
 8002684:	20000008 	.word	0x20000008
 8002688:	080042fd 	.word	0x080042fd
 800268c:	20000018 	.word	0x20000018

08002690 <cleanup_stdio>:
 8002690:	6841      	ldr	r1, [r0, #4]
 8002692:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <cleanup_stdio+0x34>)
 8002694:	4299      	cmp	r1, r3
 8002696:	b510      	push	{r4, lr}
 8002698:	4604      	mov	r4, r0
 800269a:	d001      	beq.n	80026a0 <cleanup_stdio+0x10>
 800269c:	f001 fe2e 	bl	80042fc <_fflush_r>
 80026a0:	68a1      	ldr	r1, [r4, #8]
 80026a2:	4b09      	ldr	r3, [pc, #36]	@ (80026c8 <cleanup_stdio+0x38>)
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d002      	beq.n	80026ae <cleanup_stdio+0x1e>
 80026a8:	4620      	mov	r0, r4
 80026aa:	f001 fe27 	bl	80042fc <_fflush_r>
 80026ae:	68e1      	ldr	r1, [r4, #12]
 80026b0:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <cleanup_stdio+0x3c>)
 80026b2:	4299      	cmp	r1, r3
 80026b4:	d004      	beq.n	80026c0 <cleanup_stdio+0x30>
 80026b6:	4620      	mov	r0, r4
 80026b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026bc:	f001 be1e 	b.w	80042fc <_fflush_r>
 80026c0:	bd10      	pop	{r4, pc}
 80026c2:	bf00      	nop
 80026c4:	20000200 	.word	0x20000200
 80026c8:	20000268 	.word	0x20000268
 80026cc:	200002d0 	.word	0x200002d0

080026d0 <global_stdio_init.part.0>:
 80026d0:	b510      	push	{r4, lr}
 80026d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <global_stdio_init.part.0+0x30>)
 80026d4:	4c0b      	ldr	r4, [pc, #44]	@ (8002704 <global_stdio_init.part.0+0x34>)
 80026d6:	4a0c      	ldr	r2, [pc, #48]	@ (8002708 <global_stdio_init.part.0+0x38>)
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	4620      	mov	r0, r4
 80026dc:	2200      	movs	r2, #0
 80026de:	2104      	movs	r1, #4
 80026e0:	f7ff ff94 	bl	800260c <std>
 80026e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80026e8:	2201      	movs	r2, #1
 80026ea:	2109      	movs	r1, #9
 80026ec:	f7ff ff8e 	bl	800260c <std>
 80026f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80026f4:	2202      	movs	r2, #2
 80026f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026fa:	2112      	movs	r1, #18
 80026fc:	f7ff bf86 	b.w	800260c <std>
 8002700:	20000338 	.word	0x20000338
 8002704:	20000200 	.word	0x20000200
 8002708:	08002679 	.word	0x08002679

0800270c <__sfp_lock_acquire>:
 800270c:	4801      	ldr	r0, [pc, #4]	@ (8002714 <__sfp_lock_acquire+0x8>)
 800270e:	f000 b93a 	b.w	8002986 <__retarget_lock_acquire_recursive>
 8002712:	bf00      	nop
 8002714:	20000341 	.word	0x20000341

08002718 <__sfp_lock_release>:
 8002718:	4801      	ldr	r0, [pc, #4]	@ (8002720 <__sfp_lock_release+0x8>)
 800271a:	f000 b935 	b.w	8002988 <__retarget_lock_release_recursive>
 800271e:	bf00      	nop
 8002720:	20000341 	.word	0x20000341

08002724 <__sinit>:
 8002724:	b510      	push	{r4, lr}
 8002726:	4604      	mov	r4, r0
 8002728:	f7ff fff0 	bl	800270c <__sfp_lock_acquire>
 800272c:	6a23      	ldr	r3, [r4, #32]
 800272e:	b11b      	cbz	r3, 8002738 <__sinit+0x14>
 8002730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002734:	f7ff bff0 	b.w	8002718 <__sfp_lock_release>
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <__sinit+0x28>)
 800273a:	6223      	str	r3, [r4, #32]
 800273c:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <__sinit+0x2c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1f5      	bne.n	8002730 <__sinit+0xc>
 8002744:	f7ff ffc4 	bl	80026d0 <global_stdio_init.part.0>
 8002748:	e7f2      	b.n	8002730 <__sinit+0xc>
 800274a:	bf00      	nop
 800274c:	08002691 	.word	0x08002691
 8002750:	20000338 	.word	0x20000338

08002754 <_fwalk_sglue>:
 8002754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002758:	4607      	mov	r7, r0
 800275a:	4688      	mov	r8, r1
 800275c:	4614      	mov	r4, r2
 800275e:	2600      	movs	r6, #0
 8002760:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002764:	f1b9 0901 	subs.w	r9, r9, #1
 8002768:	d505      	bpl.n	8002776 <_fwalk_sglue+0x22>
 800276a:	6824      	ldr	r4, [r4, #0]
 800276c:	2c00      	cmp	r4, #0
 800276e:	d1f7      	bne.n	8002760 <_fwalk_sglue+0xc>
 8002770:	4630      	mov	r0, r6
 8002772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002776:	89ab      	ldrh	r3, [r5, #12]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d907      	bls.n	800278c <_fwalk_sglue+0x38>
 800277c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002780:	3301      	adds	r3, #1
 8002782:	d003      	beq.n	800278c <_fwalk_sglue+0x38>
 8002784:	4629      	mov	r1, r5
 8002786:	4638      	mov	r0, r7
 8002788:	47c0      	blx	r8
 800278a:	4306      	orrs	r6, r0
 800278c:	3568      	adds	r5, #104	@ 0x68
 800278e:	e7e9      	b.n	8002764 <_fwalk_sglue+0x10>

08002790 <siprintf>:
 8002790:	b40e      	push	{r1, r2, r3}
 8002792:	b500      	push	{lr}
 8002794:	b09c      	sub	sp, #112	@ 0x70
 8002796:	ab1d      	add	r3, sp, #116	@ 0x74
 8002798:	9002      	str	r0, [sp, #8]
 800279a:	9006      	str	r0, [sp, #24]
 800279c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80027a0:	4809      	ldr	r0, [pc, #36]	@ (80027c8 <siprintf+0x38>)
 80027a2:	9107      	str	r1, [sp, #28]
 80027a4:	9104      	str	r1, [sp, #16]
 80027a6:	4909      	ldr	r1, [pc, #36]	@ (80027cc <siprintf+0x3c>)
 80027a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80027ac:	9105      	str	r1, [sp, #20]
 80027ae:	6800      	ldr	r0, [r0, #0]
 80027b0:	9301      	str	r3, [sp, #4]
 80027b2:	a902      	add	r1, sp, #8
 80027b4:	f001 fc22 	bl	8003ffc <_svfiprintf_r>
 80027b8:	9b02      	ldr	r3, [sp, #8]
 80027ba:	2200      	movs	r2, #0
 80027bc:	701a      	strb	r2, [r3, #0]
 80027be:	b01c      	add	sp, #112	@ 0x70
 80027c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80027c4:	b003      	add	sp, #12
 80027c6:	4770      	bx	lr
 80027c8:	20000014 	.word	0x20000014
 80027cc:	ffff0208 	.word	0xffff0208

080027d0 <__sread>:
 80027d0:	b510      	push	{r4, lr}
 80027d2:	460c      	mov	r4, r1
 80027d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027d8:	f000 f886 	bl	80028e8 <_read_r>
 80027dc:	2800      	cmp	r0, #0
 80027de:	bfab      	itete	ge
 80027e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80027e2:	89a3      	ldrhlt	r3, [r4, #12]
 80027e4:	181b      	addge	r3, r3, r0
 80027e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80027ea:	bfac      	ite	ge
 80027ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80027ee:	81a3      	strhlt	r3, [r4, #12]
 80027f0:	bd10      	pop	{r4, pc}

080027f2 <__swrite>:
 80027f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027f6:	461f      	mov	r7, r3
 80027f8:	898b      	ldrh	r3, [r1, #12]
 80027fa:	05db      	lsls	r3, r3, #23
 80027fc:	4605      	mov	r5, r0
 80027fe:	460c      	mov	r4, r1
 8002800:	4616      	mov	r6, r2
 8002802:	d505      	bpl.n	8002810 <__swrite+0x1e>
 8002804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002808:	2302      	movs	r3, #2
 800280a:	2200      	movs	r2, #0
 800280c:	f000 f85a 	bl	80028c4 <_lseek_r>
 8002810:	89a3      	ldrh	r3, [r4, #12]
 8002812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800281a:	81a3      	strh	r3, [r4, #12]
 800281c:	4632      	mov	r2, r6
 800281e:	463b      	mov	r3, r7
 8002820:	4628      	mov	r0, r5
 8002822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002826:	f000 b871 	b.w	800290c <_write_r>

0800282a <__sseek>:
 800282a:	b510      	push	{r4, lr}
 800282c:	460c      	mov	r4, r1
 800282e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002832:	f000 f847 	bl	80028c4 <_lseek_r>
 8002836:	1c43      	adds	r3, r0, #1
 8002838:	89a3      	ldrh	r3, [r4, #12]
 800283a:	bf15      	itete	ne
 800283c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800283e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002846:	81a3      	strheq	r3, [r4, #12]
 8002848:	bf18      	it	ne
 800284a:	81a3      	strhne	r3, [r4, #12]
 800284c:	bd10      	pop	{r4, pc}

0800284e <__sclose>:
 800284e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002852:	f000 b827 	b.w	80028a4 <_close_r>

08002856 <memmove>:
 8002856:	4288      	cmp	r0, r1
 8002858:	b510      	push	{r4, lr}
 800285a:	eb01 0402 	add.w	r4, r1, r2
 800285e:	d902      	bls.n	8002866 <memmove+0x10>
 8002860:	4284      	cmp	r4, r0
 8002862:	4623      	mov	r3, r4
 8002864:	d807      	bhi.n	8002876 <memmove+0x20>
 8002866:	1e43      	subs	r3, r0, #1
 8002868:	42a1      	cmp	r1, r4
 800286a:	d008      	beq.n	800287e <memmove+0x28>
 800286c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002870:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002874:	e7f8      	b.n	8002868 <memmove+0x12>
 8002876:	4402      	add	r2, r0
 8002878:	4601      	mov	r1, r0
 800287a:	428a      	cmp	r2, r1
 800287c:	d100      	bne.n	8002880 <memmove+0x2a>
 800287e:	bd10      	pop	{r4, pc}
 8002880:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002884:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002888:	e7f7      	b.n	800287a <memmove+0x24>

0800288a <memset>:
 800288a:	4402      	add	r2, r0
 800288c:	4603      	mov	r3, r0
 800288e:	4293      	cmp	r3, r2
 8002890:	d100      	bne.n	8002894 <memset+0xa>
 8002892:	4770      	bx	lr
 8002894:	f803 1b01 	strb.w	r1, [r3], #1
 8002898:	e7f9      	b.n	800288e <memset+0x4>
	...

0800289c <_localeconv_r>:
 800289c:	4800      	ldr	r0, [pc, #0]	@ (80028a0 <_localeconv_r+0x4>)
 800289e:	4770      	bx	lr
 80028a0:	20000154 	.word	0x20000154

080028a4 <_close_r>:
 80028a4:	b538      	push	{r3, r4, r5, lr}
 80028a6:	4d06      	ldr	r5, [pc, #24]	@ (80028c0 <_close_r+0x1c>)
 80028a8:	2300      	movs	r3, #0
 80028aa:	4604      	mov	r4, r0
 80028ac:	4608      	mov	r0, r1
 80028ae:	602b      	str	r3, [r5, #0]
 80028b0:	f7ff f98c 	bl	8001bcc <_close>
 80028b4:	1c43      	adds	r3, r0, #1
 80028b6:	d102      	bne.n	80028be <_close_r+0x1a>
 80028b8:	682b      	ldr	r3, [r5, #0]
 80028ba:	b103      	cbz	r3, 80028be <_close_r+0x1a>
 80028bc:	6023      	str	r3, [r4, #0]
 80028be:	bd38      	pop	{r3, r4, r5, pc}
 80028c0:	2000033c 	.word	0x2000033c

080028c4 <_lseek_r>:
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	4d07      	ldr	r5, [pc, #28]	@ (80028e4 <_lseek_r+0x20>)
 80028c8:	4604      	mov	r4, r0
 80028ca:	4608      	mov	r0, r1
 80028cc:	4611      	mov	r1, r2
 80028ce:	2200      	movs	r2, #0
 80028d0:	602a      	str	r2, [r5, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f7ff f9a1 	bl	8001c1a <_lseek>
 80028d8:	1c43      	adds	r3, r0, #1
 80028da:	d102      	bne.n	80028e2 <_lseek_r+0x1e>
 80028dc:	682b      	ldr	r3, [r5, #0]
 80028de:	b103      	cbz	r3, 80028e2 <_lseek_r+0x1e>
 80028e0:	6023      	str	r3, [r4, #0]
 80028e2:	bd38      	pop	{r3, r4, r5, pc}
 80028e4:	2000033c 	.word	0x2000033c

080028e8 <_read_r>:
 80028e8:	b538      	push	{r3, r4, r5, lr}
 80028ea:	4d07      	ldr	r5, [pc, #28]	@ (8002908 <_read_r+0x20>)
 80028ec:	4604      	mov	r4, r0
 80028ee:	4608      	mov	r0, r1
 80028f0:	4611      	mov	r1, r2
 80028f2:	2200      	movs	r2, #0
 80028f4:	602a      	str	r2, [r5, #0]
 80028f6:	461a      	mov	r2, r3
 80028f8:	f7ff f92f 	bl	8001b5a <_read>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_read_r+0x1e>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_read_r+0x1e>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	2000033c 	.word	0x2000033c

0800290c <_write_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	4d07      	ldr	r5, [pc, #28]	@ (800292c <_write_r+0x20>)
 8002910:	4604      	mov	r4, r0
 8002912:	4608      	mov	r0, r1
 8002914:	4611      	mov	r1, r2
 8002916:	2200      	movs	r2, #0
 8002918:	602a      	str	r2, [r5, #0]
 800291a:	461a      	mov	r2, r3
 800291c:	f7ff f93a 	bl	8001b94 <_write>
 8002920:	1c43      	adds	r3, r0, #1
 8002922:	d102      	bne.n	800292a <_write_r+0x1e>
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	b103      	cbz	r3, 800292a <_write_r+0x1e>
 8002928:	6023      	str	r3, [r4, #0]
 800292a:	bd38      	pop	{r3, r4, r5, pc}
 800292c:	2000033c 	.word	0x2000033c

08002930 <__errno>:
 8002930:	4b01      	ldr	r3, [pc, #4]	@ (8002938 <__errno+0x8>)
 8002932:	6818      	ldr	r0, [r3, #0]
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	20000014 	.word	0x20000014

0800293c <__libc_init_array>:
 800293c:	b570      	push	{r4, r5, r6, lr}
 800293e:	4d0d      	ldr	r5, [pc, #52]	@ (8002974 <__libc_init_array+0x38>)
 8002940:	4c0d      	ldr	r4, [pc, #52]	@ (8002978 <__libc_init_array+0x3c>)
 8002942:	1b64      	subs	r4, r4, r5
 8002944:	10a4      	asrs	r4, r4, #2
 8002946:	2600      	movs	r6, #0
 8002948:	42a6      	cmp	r6, r4
 800294a:	d109      	bne.n	8002960 <__libc_init_array+0x24>
 800294c:	4d0b      	ldr	r5, [pc, #44]	@ (800297c <__libc_init_array+0x40>)
 800294e:	4c0c      	ldr	r4, [pc, #48]	@ (8002980 <__libc_init_array+0x44>)
 8002950:	f002 f84a 	bl	80049e8 <_init>
 8002954:	1b64      	subs	r4, r4, r5
 8002956:	10a4      	asrs	r4, r4, #2
 8002958:	2600      	movs	r6, #0
 800295a:	42a6      	cmp	r6, r4
 800295c:	d105      	bne.n	800296a <__libc_init_array+0x2e>
 800295e:	bd70      	pop	{r4, r5, r6, pc}
 8002960:	f855 3b04 	ldr.w	r3, [r5], #4
 8002964:	4798      	blx	r3
 8002966:	3601      	adds	r6, #1
 8002968:	e7ee      	b.n	8002948 <__libc_init_array+0xc>
 800296a:	f855 3b04 	ldr.w	r3, [r5], #4
 800296e:	4798      	blx	r3
 8002970:	3601      	adds	r6, #1
 8002972:	e7f2      	b.n	800295a <__libc_init_array+0x1e>
 8002974:	08004df0 	.word	0x08004df0
 8002978:	08004df0 	.word	0x08004df0
 800297c:	08004df0 	.word	0x08004df0
 8002980:	08004df4 	.word	0x08004df4

08002984 <__retarget_lock_init_recursive>:
 8002984:	4770      	bx	lr

08002986 <__retarget_lock_acquire_recursive>:
 8002986:	4770      	bx	lr

08002988 <__retarget_lock_release_recursive>:
 8002988:	4770      	bx	lr

0800298a <memcpy>:
 800298a:	440a      	add	r2, r1
 800298c:	4291      	cmp	r1, r2
 800298e:	f100 33ff 	add.w	r3, r0, #4294967295
 8002992:	d100      	bne.n	8002996 <memcpy+0xc>
 8002994:	4770      	bx	lr
 8002996:	b510      	push	{r4, lr}
 8002998:	f811 4b01 	ldrb.w	r4, [r1], #1
 800299c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80029a0:	4291      	cmp	r1, r2
 80029a2:	d1f9      	bne.n	8002998 <memcpy+0xe>
 80029a4:	bd10      	pop	{r4, pc}

080029a6 <quorem>:
 80029a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029aa:	6903      	ldr	r3, [r0, #16]
 80029ac:	690c      	ldr	r4, [r1, #16]
 80029ae:	42a3      	cmp	r3, r4
 80029b0:	4607      	mov	r7, r0
 80029b2:	db7e      	blt.n	8002ab2 <quorem+0x10c>
 80029b4:	3c01      	subs	r4, #1
 80029b6:	f101 0814 	add.w	r8, r1, #20
 80029ba:	00a3      	lsls	r3, r4, #2
 80029bc:	f100 0514 	add.w	r5, r0, #20
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80029cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80029d0:	3301      	adds	r3, #1
 80029d2:	429a      	cmp	r2, r3
 80029d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80029d8:	fbb2 f6f3 	udiv	r6, r2, r3
 80029dc:	d32e      	bcc.n	8002a3c <quorem+0x96>
 80029de:	f04f 0a00 	mov.w	sl, #0
 80029e2:	46c4      	mov	ip, r8
 80029e4:	46ae      	mov	lr, r5
 80029e6:	46d3      	mov	fp, sl
 80029e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80029ec:	b298      	uxth	r0, r3
 80029ee:	fb06 a000 	mla	r0, r6, r0, sl
 80029f2:	0c02      	lsrs	r2, r0, #16
 80029f4:	0c1b      	lsrs	r3, r3, #16
 80029f6:	fb06 2303 	mla	r3, r6, r3, r2
 80029fa:	f8de 2000 	ldr.w	r2, [lr]
 80029fe:	b280      	uxth	r0, r0
 8002a00:	b292      	uxth	r2, r2
 8002a02:	1a12      	subs	r2, r2, r0
 8002a04:	445a      	add	r2, fp
 8002a06:	f8de 0000 	ldr.w	r0, [lr]
 8002a0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002a14:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002a18:	b292      	uxth	r2, r2
 8002a1a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002a1e:	45e1      	cmp	r9, ip
 8002a20:	f84e 2b04 	str.w	r2, [lr], #4
 8002a24:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002a28:	d2de      	bcs.n	80029e8 <quorem+0x42>
 8002a2a:	9b00      	ldr	r3, [sp, #0]
 8002a2c:	58eb      	ldr	r3, [r5, r3]
 8002a2e:	b92b      	cbnz	r3, 8002a3c <quorem+0x96>
 8002a30:	9b01      	ldr	r3, [sp, #4]
 8002a32:	3b04      	subs	r3, #4
 8002a34:	429d      	cmp	r5, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	d32f      	bcc.n	8002a9a <quorem+0xf4>
 8002a3a:	613c      	str	r4, [r7, #16]
 8002a3c:	4638      	mov	r0, r7
 8002a3e:	f001 f979 	bl	8003d34 <__mcmp>
 8002a42:	2800      	cmp	r0, #0
 8002a44:	db25      	blt.n	8002a92 <quorem+0xec>
 8002a46:	4629      	mov	r1, r5
 8002a48:	2000      	movs	r0, #0
 8002a4a:	f858 2b04 	ldr.w	r2, [r8], #4
 8002a4e:	f8d1 c000 	ldr.w	ip, [r1]
 8002a52:	fa1f fe82 	uxth.w	lr, r2
 8002a56:	fa1f f38c 	uxth.w	r3, ip
 8002a5a:	eba3 030e 	sub.w	r3, r3, lr
 8002a5e:	4403      	add	r3, r0
 8002a60:	0c12      	lsrs	r2, r2, #16
 8002a62:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002a66:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002a70:	45c1      	cmp	r9, r8
 8002a72:	f841 3b04 	str.w	r3, [r1], #4
 8002a76:	ea4f 4022 	mov.w	r0, r2, asr #16
 8002a7a:	d2e6      	bcs.n	8002a4a <quorem+0xa4>
 8002a7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002a80:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002a84:	b922      	cbnz	r2, 8002a90 <quorem+0xea>
 8002a86:	3b04      	subs	r3, #4
 8002a88:	429d      	cmp	r5, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	d30b      	bcc.n	8002aa6 <quorem+0x100>
 8002a8e:	613c      	str	r4, [r7, #16]
 8002a90:	3601      	adds	r6, #1
 8002a92:	4630      	mov	r0, r6
 8002a94:	b003      	add	sp, #12
 8002a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a9a:	6812      	ldr	r2, [r2, #0]
 8002a9c:	3b04      	subs	r3, #4
 8002a9e:	2a00      	cmp	r2, #0
 8002aa0:	d1cb      	bne.n	8002a3a <quorem+0x94>
 8002aa2:	3c01      	subs	r4, #1
 8002aa4:	e7c6      	b.n	8002a34 <quorem+0x8e>
 8002aa6:	6812      	ldr	r2, [r2, #0]
 8002aa8:	3b04      	subs	r3, #4
 8002aaa:	2a00      	cmp	r2, #0
 8002aac:	d1ef      	bne.n	8002a8e <quorem+0xe8>
 8002aae:	3c01      	subs	r4, #1
 8002ab0:	e7ea      	b.n	8002a88 <quorem+0xe2>
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	e7ee      	b.n	8002a94 <quorem+0xee>
	...

08002ab8 <_dtoa_r>:
 8002ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002abc:	69c7      	ldr	r7, [r0, #28]
 8002abe:	b099      	sub	sp, #100	@ 0x64
 8002ac0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8002ac4:	ec55 4b10 	vmov	r4, r5, d0
 8002ac8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8002aca:	9109      	str	r1, [sp, #36]	@ 0x24
 8002acc:	4683      	mov	fp, r0
 8002ace:	920e      	str	r2, [sp, #56]	@ 0x38
 8002ad0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002ad2:	b97f      	cbnz	r7, 8002af4 <_dtoa_r+0x3c>
 8002ad4:	2010      	movs	r0, #16
 8002ad6:	f000 fdfd 	bl	80036d4 <malloc>
 8002ada:	4602      	mov	r2, r0
 8002adc:	f8cb 001c 	str.w	r0, [fp, #28]
 8002ae0:	b920      	cbnz	r0, 8002aec <_dtoa_r+0x34>
 8002ae2:	4ba7      	ldr	r3, [pc, #668]	@ (8002d80 <_dtoa_r+0x2c8>)
 8002ae4:	21ef      	movs	r1, #239	@ 0xef
 8002ae6:	48a7      	ldr	r0, [pc, #668]	@ (8002d84 <_dtoa_r+0x2cc>)
 8002ae8:	f001 fc40 	bl	800436c <__assert_func>
 8002aec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002af0:	6007      	str	r7, [r0, #0]
 8002af2:	60c7      	str	r7, [r0, #12]
 8002af4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	b159      	cbz	r1, 8002b14 <_dtoa_r+0x5c>
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	604a      	str	r2, [r1, #4]
 8002b00:	2301      	movs	r3, #1
 8002b02:	4093      	lsls	r3, r2
 8002b04:	608b      	str	r3, [r1, #8]
 8002b06:	4658      	mov	r0, fp
 8002b08:	f000 feda 	bl	80038c0 <_Bfree>
 8002b0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	1e2b      	subs	r3, r5, #0
 8002b16:	bfb9      	ittee	lt
 8002b18:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8002b1c:	9303      	strlt	r3, [sp, #12]
 8002b1e:	2300      	movge	r3, #0
 8002b20:	6033      	strge	r3, [r6, #0]
 8002b22:	9f03      	ldr	r7, [sp, #12]
 8002b24:	4b98      	ldr	r3, [pc, #608]	@ (8002d88 <_dtoa_r+0x2d0>)
 8002b26:	bfbc      	itt	lt
 8002b28:	2201      	movlt	r2, #1
 8002b2a:	6032      	strlt	r2, [r6, #0]
 8002b2c:	43bb      	bics	r3, r7
 8002b2e:	d112      	bne.n	8002b56 <_dtoa_r+0x9e>
 8002b30:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002b32:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002b36:	6013      	str	r3, [r2, #0]
 8002b38:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002b3c:	4323      	orrs	r3, r4
 8002b3e:	f000 854d 	beq.w	80035dc <_dtoa_r+0xb24>
 8002b42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002b44:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8002d9c <_dtoa_r+0x2e4>
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 854f 	beq.w	80035ec <_dtoa_r+0xb34>
 8002b4e:	f10a 0303 	add.w	r3, sl, #3
 8002b52:	f000 bd49 	b.w	80035e8 <_dtoa_r+0xb30>
 8002b56:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	ec51 0b17 	vmov	r0, r1, d7
 8002b60:	2300      	movs	r3, #0
 8002b62:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8002b66:	f7fd ffb7 	bl	8000ad8 <__aeabi_dcmpeq>
 8002b6a:	4680      	mov	r8, r0
 8002b6c:	b158      	cbz	r0, 8002b86 <_dtoa_r+0xce>
 8002b6e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8002b70:	2301      	movs	r3, #1
 8002b72:	6013      	str	r3, [r2, #0]
 8002b74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002b76:	b113      	cbz	r3, 8002b7e <_dtoa_r+0xc6>
 8002b78:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8002b7a:	4b84      	ldr	r3, [pc, #528]	@ (8002d8c <_dtoa_r+0x2d4>)
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8002da0 <_dtoa_r+0x2e8>
 8002b82:	f000 bd33 	b.w	80035ec <_dtoa_r+0xb34>
 8002b86:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8002b8a:	aa16      	add	r2, sp, #88	@ 0x58
 8002b8c:	a917      	add	r1, sp, #92	@ 0x5c
 8002b8e:	4658      	mov	r0, fp
 8002b90:	f001 f980 	bl	8003e94 <__d2b>
 8002b94:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8002b98:	4681      	mov	r9, r0
 8002b9a:	2e00      	cmp	r6, #0
 8002b9c:	d077      	beq.n	8002c8e <_dtoa_r+0x1d6>
 8002b9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ba0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8002ba4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002bac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8002bb0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8002bb4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8002bb8:	4619      	mov	r1, r3
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4b74      	ldr	r3, [pc, #464]	@ (8002d90 <_dtoa_r+0x2d8>)
 8002bbe:	f7fd fb6b 	bl	8000298 <__aeabi_dsub>
 8002bc2:	a369      	add	r3, pc, #420	@ (adr r3, 8002d68 <_dtoa_r+0x2b0>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f7fd fd1e 	bl	8000608 <__aeabi_dmul>
 8002bcc:	a368      	add	r3, pc, #416	@ (adr r3, 8002d70 <_dtoa_r+0x2b8>)
 8002bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd2:	f7fd fb63 	bl	800029c <__adddf3>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	4630      	mov	r0, r6
 8002bda:	460d      	mov	r5, r1
 8002bdc:	f7fd fcaa 	bl	8000534 <__aeabi_i2d>
 8002be0:	a365      	add	r3, pc, #404	@ (adr r3, 8002d78 <_dtoa_r+0x2c0>)
 8002be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be6:	f7fd fd0f 	bl	8000608 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4620      	mov	r0, r4
 8002bf0:	4629      	mov	r1, r5
 8002bf2:	f7fd fb53 	bl	800029c <__adddf3>
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	460d      	mov	r5, r1
 8002bfa:	f7fd ffb5 	bl	8000b68 <__aeabi_d2iz>
 8002bfe:	2200      	movs	r2, #0
 8002c00:	4607      	mov	r7, r0
 8002c02:	2300      	movs	r3, #0
 8002c04:	4620      	mov	r0, r4
 8002c06:	4629      	mov	r1, r5
 8002c08:	f7fd ff70 	bl	8000aec <__aeabi_dcmplt>
 8002c0c:	b140      	cbz	r0, 8002c20 <_dtoa_r+0x168>
 8002c0e:	4638      	mov	r0, r7
 8002c10:	f7fd fc90 	bl	8000534 <__aeabi_i2d>
 8002c14:	4622      	mov	r2, r4
 8002c16:	462b      	mov	r3, r5
 8002c18:	f7fd ff5e 	bl	8000ad8 <__aeabi_dcmpeq>
 8002c1c:	b900      	cbnz	r0, 8002c20 <_dtoa_r+0x168>
 8002c1e:	3f01      	subs	r7, #1
 8002c20:	2f16      	cmp	r7, #22
 8002c22:	d851      	bhi.n	8002cc8 <_dtoa_r+0x210>
 8002c24:	4b5b      	ldr	r3, [pc, #364]	@ (8002d94 <_dtoa_r+0x2dc>)
 8002c26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002c32:	f7fd ff5b 	bl	8000aec <__aeabi_dcmplt>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d048      	beq.n	8002ccc <_dtoa_r+0x214>
 8002c3a:	3f01      	subs	r7, #1
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	9312      	str	r3, [sp, #72]	@ 0x48
 8002c40:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002c42:	1b9b      	subs	r3, r3, r6
 8002c44:	1e5a      	subs	r2, r3, #1
 8002c46:	bf44      	itt	mi
 8002c48:	f1c3 0801 	rsbmi	r8, r3, #1
 8002c4c:	2300      	movmi	r3, #0
 8002c4e:	9208      	str	r2, [sp, #32]
 8002c50:	bf54      	ite	pl
 8002c52:	f04f 0800 	movpl.w	r8, #0
 8002c56:	9308      	strmi	r3, [sp, #32]
 8002c58:	2f00      	cmp	r7, #0
 8002c5a:	db39      	blt.n	8002cd0 <_dtoa_r+0x218>
 8002c5c:	9b08      	ldr	r3, [sp, #32]
 8002c5e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8002c60:	443b      	add	r3, r7
 8002c62:	9308      	str	r3, [sp, #32]
 8002c64:	2300      	movs	r3, #0
 8002c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8002c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c6a:	2b09      	cmp	r3, #9
 8002c6c:	d864      	bhi.n	8002d38 <_dtoa_r+0x280>
 8002c6e:	2b05      	cmp	r3, #5
 8002c70:	bfc4      	itt	gt
 8002c72:	3b04      	subgt	r3, #4
 8002c74:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8002c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002c78:	f1a3 0302 	sub.w	r3, r3, #2
 8002c7c:	bfcc      	ite	gt
 8002c7e:	2400      	movgt	r4, #0
 8002c80:	2401      	movle	r4, #1
 8002c82:	2b03      	cmp	r3, #3
 8002c84:	d863      	bhi.n	8002d4e <_dtoa_r+0x296>
 8002c86:	e8df f003 	tbb	[pc, r3]
 8002c8a:	372a      	.short	0x372a
 8002c8c:	5535      	.short	0x5535
 8002c8e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8002c92:	441e      	add	r6, r3
 8002c94:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	bfc1      	itttt	gt
 8002c9c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002ca0:	409f      	lslgt	r7, r3
 8002ca2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002ca6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002caa:	bfd6      	itet	le
 8002cac:	f1c3 0320 	rsble	r3, r3, #32
 8002cb0:	ea47 0003 	orrgt.w	r0, r7, r3
 8002cb4:	fa04 f003 	lslle.w	r0, r4, r3
 8002cb8:	f7fd fc2c 	bl	8000514 <__aeabi_ui2d>
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002cc2:	3e01      	subs	r6, #1
 8002cc4:	9214      	str	r2, [sp, #80]	@ 0x50
 8002cc6:	e777      	b.n	8002bb8 <_dtoa_r+0x100>
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e7b8      	b.n	8002c3e <_dtoa_r+0x186>
 8002ccc:	9012      	str	r0, [sp, #72]	@ 0x48
 8002cce:	e7b7      	b.n	8002c40 <_dtoa_r+0x188>
 8002cd0:	427b      	negs	r3, r7
 8002cd2:	930a      	str	r3, [sp, #40]	@ 0x28
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	eba8 0807 	sub.w	r8, r8, r7
 8002cda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8002cdc:	e7c4      	b.n	8002c68 <_dtoa_r+0x1b0>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002ce2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	dc35      	bgt.n	8002d54 <_dtoa_r+0x29c>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	9300      	str	r3, [sp, #0]
 8002cec:	9307      	str	r3, [sp, #28]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	920e      	str	r2, [sp, #56]	@ 0x38
 8002cf2:	e00b      	b.n	8002d0c <_dtoa_r+0x254>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e7f3      	b.n	8002ce0 <_dtoa_r+0x228>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002cfc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	3301      	adds	r3, #1
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	9307      	str	r3, [sp, #28]
 8002d08:	bfb8      	it	lt
 8002d0a:	2301      	movlt	r3, #1
 8002d0c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8002d10:	2100      	movs	r1, #0
 8002d12:	2204      	movs	r2, #4
 8002d14:	f102 0514 	add.w	r5, r2, #20
 8002d18:	429d      	cmp	r5, r3
 8002d1a:	d91f      	bls.n	8002d5c <_dtoa_r+0x2a4>
 8002d1c:	6041      	str	r1, [r0, #4]
 8002d1e:	4658      	mov	r0, fp
 8002d20:	f000 fd8e 	bl	8003840 <_Balloc>
 8002d24:	4682      	mov	sl, r0
 8002d26:	2800      	cmp	r0, #0
 8002d28:	d13c      	bne.n	8002da4 <_dtoa_r+0x2ec>
 8002d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <_dtoa_r+0x2e0>)
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8002d32:	e6d8      	b.n	8002ae6 <_dtoa_r+0x2e>
 8002d34:	2301      	movs	r3, #1
 8002d36:	e7e0      	b.n	8002cfa <_dtoa_r+0x242>
 8002d38:	2401      	movs	r4, #1
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d3e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8002d40:	f04f 33ff 	mov.w	r3, #4294967295
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	9307      	str	r3, [sp, #28]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2312      	movs	r3, #18
 8002d4c:	e7d0      	b.n	8002cf0 <_dtoa_r+0x238>
 8002d4e:	2301      	movs	r3, #1
 8002d50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002d52:	e7f5      	b.n	8002d40 <_dtoa_r+0x288>
 8002d54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002d56:	9300      	str	r3, [sp, #0]
 8002d58:	9307      	str	r3, [sp, #28]
 8002d5a:	e7d7      	b.n	8002d0c <_dtoa_r+0x254>
 8002d5c:	3101      	adds	r1, #1
 8002d5e:	0052      	lsls	r2, r2, #1
 8002d60:	e7d8      	b.n	8002d14 <_dtoa_r+0x25c>
 8002d62:	bf00      	nop
 8002d64:	f3af 8000 	nop.w
 8002d68:	636f4361 	.word	0x636f4361
 8002d6c:	3fd287a7 	.word	0x3fd287a7
 8002d70:	8b60c8b3 	.word	0x8b60c8b3
 8002d74:	3fc68a28 	.word	0x3fc68a28
 8002d78:	509f79fb 	.word	0x509f79fb
 8002d7c:	3fd34413 	.word	0x3fd34413
 8002d80:	08004ab5 	.word	0x08004ab5
 8002d84:	08004acc 	.word	0x08004acc
 8002d88:	7ff00000 	.word	0x7ff00000
 8002d8c:	08004a85 	.word	0x08004a85
 8002d90:	3ff80000 	.word	0x3ff80000
 8002d94:	08004bc8 	.word	0x08004bc8
 8002d98:	08004b24 	.word	0x08004b24
 8002d9c:	08004ab1 	.word	0x08004ab1
 8002da0:	08004a84 	.word	0x08004a84
 8002da4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002da8:	6018      	str	r0, [r3, #0]
 8002daa:	9b07      	ldr	r3, [sp, #28]
 8002dac:	2b0e      	cmp	r3, #14
 8002dae:	f200 80a4 	bhi.w	8002efa <_dtoa_r+0x442>
 8002db2:	2c00      	cmp	r4, #0
 8002db4:	f000 80a1 	beq.w	8002efa <_dtoa_r+0x442>
 8002db8:	2f00      	cmp	r7, #0
 8002dba:	dd33      	ble.n	8002e24 <_dtoa_r+0x36c>
 8002dbc:	4bad      	ldr	r3, [pc, #692]	@ (8003074 <_dtoa_r+0x5bc>)
 8002dbe:	f007 020f 	and.w	r2, r7, #15
 8002dc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002dc6:	ed93 7b00 	vldr	d7, [r3]
 8002dca:	05f8      	lsls	r0, r7, #23
 8002dcc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002dd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8002dd4:	d516      	bpl.n	8002e04 <_dtoa_r+0x34c>
 8002dd6:	4ba8      	ldr	r3, [pc, #672]	@ (8003078 <_dtoa_r+0x5c0>)
 8002dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002ddc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002de0:	f7fd fd3c 	bl	800085c <__aeabi_ddiv>
 8002de4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002de8:	f004 040f 	and.w	r4, r4, #15
 8002dec:	2603      	movs	r6, #3
 8002dee:	4da2      	ldr	r5, [pc, #648]	@ (8003078 <_dtoa_r+0x5c0>)
 8002df0:	b954      	cbnz	r4, 8002e08 <_dtoa_r+0x350>
 8002df2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002dfa:	f7fd fd2f 	bl	800085c <__aeabi_ddiv>
 8002dfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e02:	e028      	b.n	8002e56 <_dtoa_r+0x39e>
 8002e04:	2602      	movs	r6, #2
 8002e06:	e7f2      	b.n	8002dee <_dtoa_r+0x336>
 8002e08:	07e1      	lsls	r1, r4, #31
 8002e0a:	d508      	bpl.n	8002e1e <_dtoa_r+0x366>
 8002e0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002e14:	f7fd fbf8 	bl	8000608 <__aeabi_dmul>
 8002e18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e1c:	3601      	adds	r6, #1
 8002e1e:	1064      	asrs	r4, r4, #1
 8002e20:	3508      	adds	r5, #8
 8002e22:	e7e5      	b.n	8002df0 <_dtoa_r+0x338>
 8002e24:	f000 80d2 	beq.w	8002fcc <_dtoa_r+0x514>
 8002e28:	427c      	negs	r4, r7
 8002e2a:	4b92      	ldr	r3, [pc, #584]	@ (8003074 <_dtoa_r+0x5bc>)
 8002e2c:	4d92      	ldr	r5, [pc, #584]	@ (8003078 <_dtoa_r+0x5c0>)
 8002e2e:	f004 020f 	and.w	r2, r4, #15
 8002e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e3a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8002e3e:	f7fd fbe3 	bl	8000608 <__aeabi_dmul>
 8002e42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e46:	1124      	asrs	r4, r4, #4
 8002e48:	2300      	movs	r3, #0
 8002e4a:	2602      	movs	r6, #2
 8002e4c:	2c00      	cmp	r4, #0
 8002e4e:	f040 80b2 	bne.w	8002fb6 <_dtoa_r+0x4fe>
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1d3      	bne.n	8002dfe <_dtoa_r+0x346>
 8002e56:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8002e58:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80b7 	beq.w	8002fd0 <_dtoa_r+0x518>
 8002e62:	4b86      	ldr	r3, [pc, #536]	@ (800307c <_dtoa_r+0x5c4>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	4620      	mov	r0, r4
 8002e68:	4629      	mov	r1, r5
 8002e6a:	f7fd fe3f 	bl	8000aec <__aeabi_dcmplt>
 8002e6e:	2800      	cmp	r0, #0
 8002e70:	f000 80ae 	beq.w	8002fd0 <_dtoa_r+0x518>
 8002e74:	9b07      	ldr	r3, [sp, #28]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f000 80aa 	beq.w	8002fd0 <_dtoa_r+0x518>
 8002e7c:	9b00      	ldr	r3, [sp, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	dd37      	ble.n	8002ef2 <_dtoa_r+0x43a>
 8002e82:	1e7b      	subs	r3, r7, #1
 8002e84:	9304      	str	r3, [sp, #16]
 8002e86:	4620      	mov	r0, r4
 8002e88:	4b7d      	ldr	r3, [pc, #500]	@ (8003080 <_dtoa_r+0x5c8>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	f7fd fbbb 	bl	8000608 <__aeabi_dmul>
 8002e92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e96:	9c00      	ldr	r4, [sp, #0]
 8002e98:	3601      	adds	r6, #1
 8002e9a:	4630      	mov	r0, r6
 8002e9c:	f7fd fb4a 	bl	8000534 <__aeabi_i2d>
 8002ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ea4:	f7fd fbb0 	bl	8000608 <__aeabi_dmul>
 8002ea8:	4b76      	ldr	r3, [pc, #472]	@ (8003084 <_dtoa_r+0x5cc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f7fd f9f6 	bl	800029c <__adddf3>
 8002eb0:	4605      	mov	r5, r0
 8002eb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8002eb6:	2c00      	cmp	r4, #0
 8002eb8:	f040 808d 	bne.w	8002fd6 <_dtoa_r+0x51e>
 8002ebc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ec0:	4b71      	ldr	r3, [pc, #452]	@ (8003088 <_dtoa_r+0x5d0>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f7fd f9e8 	bl	8000298 <__aeabi_dsub>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ed0:	462a      	mov	r2, r5
 8002ed2:	4633      	mov	r3, r6
 8002ed4:	f7fd fe28 	bl	8000b28 <__aeabi_dcmpgt>
 8002ed8:	2800      	cmp	r0, #0
 8002eda:	f040 828b 	bne.w	80033f4 <_dtoa_r+0x93c>
 8002ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002ee2:	462a      	mov	r2, r5
 8002ee4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002ee8:	f7fd fe00 	bl	8000aec <__aeabi_dcmplt>
 8002eec:	2800      	cmp	r0, #0
 8002eee:	f040 8128 	bne.w	8003142 <_dtoa_r+0x68a>
 8002ef2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8002ef6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002efa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f2c0 815a 	blt.w	80031b6 <_dtoa_r+0x6fe>
 8002f02:	2f0e      	cmp	r7, #14
 8002f04:	f300 8157 	bgt.w	80031b6 <_dtoa_r+0x6fe>
 8002f08:	4b5a      	ldr	r3, [pc, #360]	@ (8003074 <_dtoa_r+0x5bc>)
 8002f0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002f0e:	ed93 7b00 	vldr	d7, [r3]
 8002f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	ed8d 7b00 	vstr	d7, [sp]
 8002f1a:	da03      	bge.n	8002f24 <_dtoa_r+0x46c>
 8002f1c:	9b07      	ldr	r3, [sp, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f340 8101 	ble.w	8003126 <_dtoa_r+0x66e>
 8002f24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002f28:	4656      	mov	r6, sl
 8002f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f2e:	4620      	mov	r0, r4
 8002f30:	4629      	mov	r1, r5
 8002f32:	f7fd fc93 	bl	800085c <__aeabi_ddiv>
 8002f36:	f7fd fe17 	bl	8000b68 <__aeabi_d2iz>
 8002f3a:	4680      	mov	r8, r0
 8002f3c:	f7fd fafa 	bl	8000534 <__aeabi_i2d>
 8002f40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f44:	f7fd fb60 	bl	8000608 <__aeabi_dmul>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	4629      	mov	r1, r5
 8002f50:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8002f54:	f7fd f9a0 	bl	8000298 <__aeabi_dsub>
 8002f58:	f806 4b01 	strb.w	r4, [r6], #1
 8002f5c:	9d07      	ldr	r5, [sp, #28]
 8002f5e:	eba6 040a 	sub.w	r4, r6, sl
 8002f62:	42a5      	cmp	r5, r4
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	f040 8117 	bne.w	800319a <_dtoa_r+0x6e2>
 8002f6c:	f7fd f996 	bl	800029c <__adddf3>
 8002f70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f74:	4604      	mov	r4, r0
 8002f76:	460d      	mov	r5, r1
 8002f78:	f7fd fdd6 	bl	8000b28 <__aeabi_dcmpgt>
 8002f7c:	2800      	cmp	r0, #0
 8002f7e:	f040 80f9 	bne.w	8003174 <_dtoa_r+0x6bc>
 8002f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f86:	4620      	mov	r0, r4
 8002f88:	4629      	mov	r1, r5
 8002f8a:	f7fd fda5 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f8e:	b118      	cbz	r0, 8002f98 <_dtoa_r+0x4e0>
 8002f90:	f018 0f01 	tst.w	r8, #1
 8002f94:	f040 80ee 	bne.w	8003174 <_dtoa_r+0x6bc>
 8002f98:	4649      	mov	r1, r9
 8002f9a:	4658      	mov	r0, fp
 8002f9c:	f000 fc90 	bl	80038c0 <_Bfree>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	7033      	strb	r3, [r6, #0]
 8002fa4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8002fa6:	3701      	adds	r7, #1
 8002fa8:	601f      	str	r7, [r3, #0]
 8002faa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 831d 	beq.w	80035ec <_dtoa_r+0xb34>
 8002fb2:	601e      	str	r6, [r3, #0]
 8002fb4:	e31a      	b.n	80035ec <_dtoa_r+0xb34>
 8002fb6:	07e2      	lsls	r2, r4, #31
 8002fb8:	d505      	bpl.n	8002fc6 <_dtoa_r+0x50e>
 8002fba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002fbe:	f7fd fb23 	bl	8000608 <__aeabi_dmul>
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	1064      	asrs	r4, r4, #1
 8002fc8:	3508      	adds	r5, #8
 8002fca:	e73f      	b.n	8002e4c <_dtoa_r+0x394>
 8002fcc:	2602      	movs	r6, #2
 8002fce:	e742      	b.n	8002e56 <_dtoa_r+0x39e>
 8002fd0:	9c07      	ldr	r4, [sp, #28]
 8002fd2:	9704      	str	r7, [sp, #16]
 8002fd4:	e761      	b.n	8002e9a <_dtoa_r+0x3e2>
 8002fd6:	4b27      	ldr	r3, [pc, #156]	@ (8003074 <_dtoa_r+0x5bc>)
 8002fd8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8002fda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002fde:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002fe2:	4454      	add	r4, sl
 8002fe4:	2900      	cmp	r1, #0
 8002fe6:	d053      	beq.n	8003090 <_dtoa_r+0x5d8>
 8002fe8:	4928      	ldr	r1, [pc, #160]	@ (800308c <_dtoa_r+0x5d4>)
 8002fea:	2000      	movs	r0, #0
 8002fec:	f7fd fc36 	bl	800085c <__aeabi_ddiv>
 8002ff0:	4633      	mov	r3, r6
 8002ff2:	462a      	mov	r2, r5
 8002ff4:	f7fd f950 	bl	8000298 <__aeabi_dsub>
 8002ff8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002ffc:	4656      	mov	r6, sl
 8002ffe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003002:	f7fd fdb1 	bl	8000b68 <__aeabi_d2iz>
 8003006:	4605      	mov	r5, r0
 8003008:	f7fd fa94 	bl	8000534 <__aeabi_i2d>
 800300c:	4602      	mov	r2, r0
 800300e:	460b      	mov	r3, r1
 8003010:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003014:	f7fd f940 	bl	8000298 <__aeabi_dsub>
 8003018:	3530      	adds	r5, #48	@ 0x30
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003022:	f806 5b01 	strb.w	r5, [r6], #1
 8003026:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800302a:	f7fd fd5f 	bl	8000aec <__aeabi_dcmplt>
 800302e:	2800      	cmp	r0, #0
 8003030:	d171      	bne.n	8003116 <_dtoa_r+0x65e>
 8003032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003036:	4911      	ldr	r1, [pc, #68]	@ (800307c <_dtoa_r+0x5c4>)
 8003038:	2000      	movs	r0, #0
 800303a:	f7fd f92d 	bl	8000298 <__aeabi_dsub>
 800303e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8003042:	f7fd fd53 	bl	8000aec <__aeabi_dcmplt>
 8003046:	2800      	cmp	r0, #0
 8003048:	f040 8095 	bne.w	8003176 <_dtoa_r+0x6be>
 800304c:	42a6      	cmp	r6, r4
 800304e:	f43f af50 	beq.w	8002ef2 <_dtoa_r+0x43a>
 8003052:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8003056:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <_dtoa_r+0x5c8>)
 8003058:	2200      	movs	r2, #0
 800305a:	f7fd fad5 	bl	8000608 <__aeabi_dmul>
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <_dtoa_r+0x5c8>)
 8003060:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003064:	2200      	movs	r2, #0
 8003066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800306a:	f7fd facd 	bl	8000608 <__aeabi_dmul>
 800306e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003072:	e7c4      	b.n	8002ffe <_dtoa_r+0x546>
 8003074:	08004bc8 	.word	0x08004bc8
 8003078:	08004ba0 	.word	0x08004ba0
 800307c:	3ff00000 	.word	0x3ff00000
 8003080:	40240000 	.word	0x40240000
 8003084:	401c0000 	.word	0x401c0000
 8003088:	40140000 	.word	0x40140000
 800308c:	3fe00000 	.word	0x3fe00000
 8003090:	4631      	mov	r1, r6
 8003092:	4628      	mov	r0, r5
 8003094:	f7fd fab8 	bl	8000608 <__aeabi_dmul>
 8003098:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800309c:	9415      	str	r4, [sp, #84]	@ 0x54
 800309e:	4656      	mov	r6, sl
 80030a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030a4:	f7fd fd60 	bl	8000b68 <__aeabi_d2iz>
 80030a8:	4605      	mov	r5, r0
 80030aa:	f7fd fa43 	bl	8000534 <__aeabi_i2d>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030b6:	f7fd f8ef 	bl	8000298 <__aeabi_dsub>
 80030ba:	3530      	adds	r5, #48	@ 0x30
 80030bc:	f806 5b01 	strb.w	r5, [r6], #1
 80030c0:	4602      	mov	r2, r0
 80030c2:	460b      	mov	r3, r1
 80030c4:	42a6      	cmp	r6, r4
 80030c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	d124      	bne.n	800311a <_dtoa_r+0x662>
 80030d0:	4bac      	ldr	r3, [pc, #688]	@ (8003384 <_dtoa_r+0x8cc>)
 80030d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80030d6:	f7fd f8e1 	bl	800029c <__adddf3>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030e2:	f7fd fd21 	bl	8000b28 <__aeabi_dcmpgt>
 80030e6:	2800      	cmp	r0, #0
 80030e8:	d145      	bne.n	8003176 <_dtoa_r+0x6be>
 80030ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80030ee:	49a5      	ldr	r1, [pc, #660]	@ (8003384 <_dtoa_r+0x8cc>)
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7fd f8d1 	bl	8000298 <__aeabi_dsub>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80030fe:	f7fd fcf5 	bl	8000aec <__aeabi_dcmplt>
 8003102:	2800      	cmp	r0, #0
 8003104:	f43f aef5 	beq.w	8002ef2 <_dtoa_r+0x43a>
 8003108:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800310a:	1e73      	subs	r3, r6, #1
 800310c:	9315      	str	r3, [sp, #84]	@ 0x54
 800310e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8003112:	2b30      	cmp	r3, #48	@ 0x30
 8003114:	d0f8      	beq.n	8003108 <_dtoa_r+0x650>
 8003116:	9f04      	ldr	r7, [sp, #16]
 8003118:	e73e      	b.n	8002f98 <_dtoa_r+0x4e0>
 800311a:	4b9b      	ldr	r3, [pc, #620]	@ (8003388 <_dtoa_r+0x8d0>)
 800311c:	f7fd fa74 	bl	8000608 <__aeabi_dmul>
 8003120:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003124:	e7bc      	b.n	80030a0 <_dtoa_r+0x5e8>
 8003126:	d10c      	bne.n	8003142 <_dtoa_r+0x68a>
 8003128:	4b98      	ldr	r3, [pc, #608]	@ (800338c <_dtoa_r+0x8d4>)
 800312a:	2200      	movs	r2, #0
 800312c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003130:	f7fd fa6a 	bl	8000608 <__aeabi_dmul>
 8003134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003138:	f7fd fcec 	bl	8000b14 <__aeabi_dcmpge>
 800313c:	2800      	cmp	r0, #0
 800313e:	f000 8157 	beq.w	80033f0 <_dtoa_r+0x938>
 8003142:	2400      	movs	r4, #0
 8003144:	4625      	mov	r5, r4
 8003146:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003148:	43db      	mvns	r3, r3
 800314a:	9304      	str	r3, [sp, #16]
 800314c:	4656      	mov	r6, sl
 800314e:	2700      	movs	r7, #0
 8003150:	4621      	mov	r1, r4
 8003152:	4658      	mov	r0, fp
 8003154:	f000 fbb4 	bl	80038c0 <_Bfree>
 8003158:	2d00      	cmp	r5, #0
 800315a:	d0dc      	beq.n	8003116 <_dtoa_r+0x65e>
 800315c:	b12f      	cbz	r7, 800316a <_dtoa_r+0x6b2>
 800315e:	42af      	cmp	r7, r5
 8003160:	d003      	beq.n	800316a <_dtoa_r+0x6b2>
 8003162:	4639      	mov	r1, r7
 8003164:	4658      	mov	r0, fp
 8003166:	f000 fbab 	bl	80038c0 <_Bfree>
 800316a:	4629      	mov	r1, r5
 800316c:	4658      	mov	r0, fp
 800316e:	f000 fba7 	bl	80038c0 <_Bfree>
 8003172:	e7d0      	b.n	8003116 <_dtoa_r+0x65e>
 8003174:	9704      	str	r7, [sp, #16]
 8003176:	4633      	mov	r3, r6
 8003178:	461e      	mov	r6, r3
 800317a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800317e:	2a39      	cmp	r2, #57	@ 0x39
 8003180:	d107      	bne.n	8003192 <_dtoa_r+0x6da>
 8003182:	459a      	cmp	sl, r3
 8003184:	d1f8      	bne.n	8003178 <_dtoa_r+0x6c0>
 8003186:	9a04      	ldr	r2, [sp, #16]
 8003188:	3201      	adds	r2, #1
 800318a:	9204      	str	r2, [sp, #16]
 800318c:	2230      	movs	r2, #48	@ 0x30
 800318e:	f88a 2000 	strb.w	r2, [sl]
 8003192:	781a      	ldrb	r2, [r3, #0]
 8003194:	3201      	adds	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
 8003198:	e7bd      	b.n	8003116 <_dtoa_r+0x65e>
 800319a:	4b7b      	ldr	r3, [pc, #492]	@ (8003388 <_dtoa_r+0x8d0>)
 800319c:	2200      	movs	r2, #0
 800319e:	f7fd fa33 	bl	8000608 <__aeabi_dmul>
 80031a2:	2200      	movs	r2, #0
 80031a4:	2300      	movs	r3, #0
 80031a6:	4604      	mov	r4, r0
 80031a8:	460d      	mov	r5, r1
 80031aa:	f7fd fc95 	bl	8000ad8 <__aeabi_dcmpeq>
 80031ae:	2800      	cmp	r0, #0
 80031b0:	f43f aebb 	beq.w	8002f2a <_dtoa_r+0x472>
 80031b4:	e6f0      	b.n	8002f98 <_dtoa_r+0x4e0>
 80031b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	f000 80db 	beq.w	8003374 <_dtoa_r+0x8bc>
 80031be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80031c0:	2a01      	cmp	r2, #1
 80031c2:	f300 80bf 	bgt.w	8003344 <_dtoa_r+0x88c>
 80031c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80031c8:	2a00      	cmp	r2, #0
 80031ca:	f000 80b7 	beq.w	800333c <_dtoa_r+0x884>
 80031ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80031d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80031d4:	4646      	mov	r6, r8
 80031d6:	9a08      	ldr	r2, [sp, #32]
 80031d8:	2101      	movs	r1, #1
 80031da:	441a      	add	r2, r3
 80031dc:	4658      	mov	r0, fp
 80031de:	4498      	add	r8, r3
 80031e0:	9208      	str	r2, [sp, #32]
 80031e2:	f000 fc21 	bl	8003a28 <__i2b>
 80031e6:	4605      	mov	r5, r0
 80031e8:	b15e      	cbz	r6, 8003202 <_dtoa_r+0x74a>
 80031ea:	9b08      	ldr	r3, [sp, #32]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	dd08      	ble.n	8003202 <_dtoa_r+0x74a>
 80031f0:	42b3      	cmp	r3, r6
 80031f2:	9a08      	ldr	r2, [sp, #32]
 80031f4:	bfa8      	it	ge
 80031f6:	4633      	movge	r3, r6
 80031f8:	eba8 0803 	sub.w	r8, r8, r3
 80031fc:	1af6      	subs	r6, r6, r3
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	9308      	str	r3, [sp, #32]
 8003202:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003204:	b1f3      	cbz	r3, 8003244 <_dtoa_r+0x78c>
 8003206:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003208:	2b00      	cmp	r3, #0
 800320a:	f000 80b7 	beq.w	800337c <_dtoa_r+0x8c4>
 800320e:	b18c      	cbz	r4, 8003234 <_dtoa_r+0x77c>
 8003210:	4629      	mov	r1, r5
 8003212:	4622      	mov	r2, r4
 8003214:	4658      	mov	r0, fp
 8003216:	f000 fcc7 	bl	8003ba8 <__pow5mult>
 800321a:	464a      	mov	r2, r9
 800321c:	4601      	mov	r1, r0
 800321e:	4605      	mov	r5, r0
 8003220:	4658      	mov	r0, fp
 8003222:	f000 fc17 	bl	8003a54 <__multiply>
 8003226:	4649      	mov	r1, r9
 8003228:	9004      	str	r0, [sp, #16]
 800322a:	4658      	mov	r0, fp
 800322c:	f000 fb48 	bl	80038c0 <_Bfree>
 8003230:	9b04      	ldr	r3, [sp, #16]
 8003232:	4699      	mov	r9, r3
 8003234:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003236:	1b1a      	subs	r2, r3, r4
 8003238:	d004      	beq.n	8003244 <_dtoa_r+0x78c>
 800323a:	4649      	mov	r1, r9
 800323c:	4658      	mov	r0, fp
 800323e:	f000 fcb3 	bl	8003ba8 <__pow5mult>
 8003242:	4681      	mov	r9, r0
 8003244:	2101      	movs	r1, #1
 8003246:	4658      	mov	r0, fp
 8003248:	f000 fbee 	bl	8003a28 <__i2b>
 800324c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800324e:	4604      	mov	r4, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 81cf 	beq.w	80035f4 <_dtoa_r+0xb3c>
 8003256:	461a      	mov	r2, r3
 8003258:	4601      	mov	r1, r0
 800325a:	4658      	mov	r0, fp
 800325c:	f000 fca4 	bl	8003ba8 <__pow5mult>
 8003260:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003262:	2b01      	cmp	r3, #1
 8003264:	4604      	mov	r4, r0
 8003266:	f300 8095 	bgt.w	8003394 <_dtoa_r+0x8dc>
 800326a:	9b02      	ldr	r3, [sp, #8]
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8087 	bne.w	8003380 <_dtoa_r+0x8c8>
 8003272:	9b03      	ldr	r3, [sp, #12]
 8003274:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003278:	2b00      	cmp	r3, #0
 800327a:	f040 8089 	bne.w	8003390 <_dtoa_r+0x8d8>
 800327e:	9b03      	ldr	r3, [sp, #12]
 8003280:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003284:	0d1b      	lsrs	r3, r3, #20
 8003286:	051b      	lsls	r3, r3, #20
 8003288:	b12b      	cbz	r3, 8003296 <_dtoa_r+0x7de>
 800328a:	9b08      	ldr	r3, [sp, #32]
 800328c:	3301      	adds	r3, #1
 800328e:	9308      	str	r3, [sp, #32]
 8003290:	f108 0801 	add.w	r8, r8, #1
 8003294:	2301      	movs	r3, #1
 8003296:	930a      	str	r3, [sp, #40]	@ 0x28
 8003298:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800329a:	2b00      	cmp	r3, #0
 800329c:	f000 81b0 	beq.w	8003600 <_dtoa_r+0xb48>
 80032a0:	6923      	ldr	r3, [r4, #16]
 80032a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80032a6:	6918      	ldr	r0, [r3, #16]
 80032a8:	f000 fb72 	bl	8003990 <__hi0bits>
 80032ac:	f1c0 0020 	rsb	r0, r0, #32
 80032b0:	9b08      	ldr	r3, [sp, #32]
 80032b2:	4418      	add	r0, r3
 80032b4:	f010 001f 	ands.w	r0, r0, #31
 80032b8:	d077      	beq.n	80033aa <_dtoa_r+0x8f2>
 80032ba:	f1c0 0320 	rsb	r3, r0, #32
 80032be:	2b04      	cmp	r3, #4
 80032c0:	dd6b      	ble.n	800339a <_dtoa_r+0x8e2>
 80032c2:	9b08      	ldr	r3, [sp, #32]
 80032c4:	f1c0 001c 	rsb	r0, r0, #28
 80032c8:	4403      	add	r3, r0
 80032ca:	4480      	add	r8, r0
 80032cc:	4406      	add	r6, r0
 80032ce:	9308      	str	r3, [sp, #32]
 80032d0:	f1b8 0f00 	cmp.w	r8, #0
 80032d4:	dd05      	ble.n	80032e2 <_dtoa_r+0x82a>
 80032d6:	4649      	mov	r1, r9
 80032d8:	4642      	mov	r2, r8
 80032da:	4658      	mov	r0, fp
 80032dc:	f000 fcbe 	bl	8003c5c <__lshift>
 80032e0:	4681      	mov	r9, r0
 80032e2:	9b08      	ldr	r3, [sp, #32]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	dd05      	ble.n	80032f4 <_dtoa_r+0x83c>
 80032e8:	4621      	mov	r1, r4
 80032ea:	461a      	mov	r2, r3
 80032ec:	4658      	mov	r0, fp
 80032ee:	f000 fcb5 	bl	8003c5c <__lshift>
 80032f2:	4604      	mov	r4, r0
 80032f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d059      	beq.n	80033ae <_dtoa_r+0x8f6>
 80032fa:	4621      	mov	r1, r4
 80032fc:	4648      	mov	r0, r9
 80032fe:	f000 fd19 	bl	8003d34 <__mcmp>
 8003302:	2800      	cmp	r0, #0
 8003304:	da53      	bge.n	80033ae <_dtoa_r+0x8f6>
 8003306:	1e7b      	subs	r3, r7, #1
 8003308:	9304      	str	r3, [sp, #16]
 800330a:	4649      	mov	r1, r9
 800330c:	2300      	movs	r3, #0
 800330e:	220a      	movs	r2, #10
 8003310:	4658      	mov	r0, fp
 8003312:	f000 faf7 	bl	8003904 <__multadd>
 8003316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003318:	4681      	mov	r9, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	f000 8172 	beq.w	8003604 <_dtoa_r+0xb4c>
 8003320:	2300      	movs	r3, #0
 8003322:	4629      	mov	r1, r5
 8003324:	220a      	movs	r2, #10
 8003326:	4658      	mov	r0, fp
 8003328:	f000 faec 	bl	8003904 <__multadd>
 800332c:	9b00      	ldr	r3, [sp, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	4605      	mov	r5, r0
 8003332:	dc67      	bgt.n	8003404 <_dtoa_r+0x94c>
 8003334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003336:	2b02      	cmp	r3, #2
 8003338:	dc41      	bgt.n	80033be <_dtoa_r+0x906>
 800333a:	e063      	b.n	8003404 <_dtoa_r+0x94c>
 800333c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800333e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003342:	e746      	b.n	80031d2 <_dtoa_r+0x71a>
 8003344:	9b07      	ldr	r3, [sp, #28]
 8003346:	1e5c      	subs	r4, r3, #1
 8003348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800334a:	42a3      	cmp	r3, r4
 800334c:	bfbf      	itttt	lt
 800334e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8003350:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8003352:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8003354:	1ae3      	sublt	r3, r4, r3
 8003356:	bfb4      	ite	lt
 8003358:	18d2      	addlt	r2, r2, r3
 800335a:	1b1c      	subge	r4, r3, r4
 800335c:	9b07      	ldr	r3, [sp, #28]
 800335e:	bfbc      	itt	lt
 8003360:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8003362:	2400      	movlt	r4, #0
 8003364:	2b00      	cmp	r3, #0
 8003366:	bfb5      	itete	lt
 8003368:	eba8 0603 	sublt.w	r6, r8, r3
 800336c:	9b07      	ldrge	r3, [sp, #28]
 800336e:	2300      	movlt	r3, #0
 8003370:	4646      	movge	r6, r8
 8003372:	e730      	b.n	80031d6 <_dtoa_r+0x71e>
 8003374:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003376:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8003378:	4646      	mov	r6, r8
 800337a:	e735      	b.n	80031e8 <_dtoa_r+0x730>
 800337c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800337e:	e75c      	b.n	800323a <_dtoa_r+0x782>
 8003380:	2300      	movs	r3, #0
 8003382:	e788      	b.n	8003296 <_dtoa_r+0x7de>
 8003384:	3fe00000 	.word	0x3fe00000
 8003388:	40240000 	.word	0x40240000
 800338c:	40140000 	.word	0x40140000
 8003390:	9b02      	ldr	r3, [sp, #8]
 8003392:	e780      	b.n	8003296 <_dtoa_r+0x7de>
 8003394:	2300      	movs	r3, #0
 8003396:	930a      	str	r3, [sp, #40]	@ 0x28
 8003398:	e782      	b.n	80032a0 <_dtoa_r+0x7e8>
 800339a:	d099      	beq.n	80032d0 <_dtoa_r+0x818>
 800339c:	9a08      	ldr	r2, [sp, #32]
 800339e:	331c      	adds	r3, #28
 80033a0:	441a      	add	r2, r3
 80033a2:	4498      	add	r8, r3
 80033a4:	441e      	add	r6, r3
 80033a6:	9208      	str	r2, [sp, #32]
 80033a8:	e792      	b.n	80032d0 <_dtoa_r+0x818>
 80033aa:	4603      	mov	r3, r0
 80033ac:	e7f6      	b.n	800339c <_dtoa_r+0x8e4>
 80033ae:	9b07      	ldr	r3, [sp, #28]
 80033b0:	9704      	str	r7, [sp, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	dc20      	bgt.n	80033f8 <_dtoa_r+0x940>
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	dd1e      	ble.n	80033fc <_dtoa_r+0x944>
 80033be:	9b00      	ldr	r3, [sp, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	f47f aec0 	bne.w	8003146 <_dtoa_r+0x68e>
 80033c6:	4621      	mov	r1, r4
 80033c8:	2205      	movs	r2, #5
 80033ca:	4658      	mov	r0, fp
 80033cc:	f000 fa9a 	bl	8003904 <__multadd>
 80033d0:	4601      	mov	r1, r0
 80033d2:	4604      	mov	r4, r0
 80033d4:	4648      	mov	r0, r9
 80033d6:	f000 fcad 	bl	8003d34 <__mcmp>
 80033da:	2800      	cmp	r0, #0
 80033dc:	f77f aeb3 	ble.w	8003146 <_dtoa_r+0x68e>
 80033e0:	4656      	mov	r6, sl
 80033e2:	2331      	movs	r3, #49	@ 0x31
 80033e4:	f806 3b01 	strb.w	r3, [r6], #1
 80033e8:	9b04      	ldr	r3, [sp, #16]
 80033ea:	3301      	adds	r3, #1
 80033ec:	9304      	str	r3, [sp, #16]
 80033ee:	e6ae      	b.n	800314e <_dtoa_r+0x696>
 80033f0:	9c07      	ldr	r4, [sp, #28]
 80033f2:	9704      	str	r7, [sp, #16]
 80033f4:	4625      	mov	r5, r4
 80033f6:	e7f3      	b.n	80033e0 <_dtoa_r+0x928>
 80033f8:	9b07      	ldr	r3, [sp, #28]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8104 	beq.w	800360c <_dtoa_r+0xb54>
 8003404:	2e00      	cmp	r6, #0
 8003406:	dd05      	ble.n	8003414 <_dtoa_r+0x95c>
 8003408:	4629      	mov	r1, r5
 800340a:	4632      	mov	r2, r6
 800340c:	4658      	mov	r0, fp
 800340e:	f000 fc25 	bl	8003c5c <__lshift>
 8003412:	4605      	mov	r5, r0
 8003414:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003416:	2b00      	cmp	r3, #0
 8003418:	d05a      	beq.n	80034d0 <_dtoa_r+0xa18>
 800341a:	6869      	ldr	r1, [r5, #4]
 800341c:	4658      	mov	r0, fp
 800341e:	f000 fa0f 	bl	8003840 <_Balloc>
 8003422:	4606      	mov	r6, r0
 8003424:	b928      	cbnz	r0, 8003432 <_dtoa_r+0x97a>
 8003426:	4b84      	ldr	r3, [pc, #528]	@ (8003638 <_dtoa_r+0xb80>)
 8003428:	4602      	mov	r2, r0
 800342a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800342e:	f7ff bb5a 	b.w	8002ae6 <_dtoa_r+0x2e>
 8003432:	692a      	ldr	r2, [r5, #16]
 8003434:	3202      	adds	r2, #2
 8003436:	0092      	lsls	r2, r2, #2
 8003438:	f105 010c 	add.w	r1, r5, #12
 800343c:	300c      	adds	r0, #12
 800343e:	f7ff faa4 	bl	800298a <memcpy>
 8003442:	2201      	movs	r2, #1
 8003444:	4631      	mov	r1, r6
 8003446:	4658      	mov	r0, fp
 8003448:	f000 fc08 	bl	8003c5c <__lshift>
 800344c:	f10a 0301 	add.w	r3, sl, #1
 8003450:	9307      	str	r3, [sp, #28]
 8003452:	9b00      	ldr	r3, [sp, #0]
 8003454:	4453      	add	r3, sl
 8003456:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003458:	9b02      	ldr	r3, [sp, #8]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	462f      	mov	r7, r5
 8003460:	930a      	str	r3, [sp, #40]	@ 0x28
 8003462:	4605      	mov	r5, r0
 8003464:	9b07      	ldr	r3, [sp, #28]
 8003466:	4621      	mov	r1, r4
 8003468:	3b01      	subs	r3, #1
 800346a:	4648      	mov	r0, r9
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	f7ff fa9a 	bl	80029a6 <quorem>
 8003472:	4639      	mov	r1, r7
 8003474:	9002      	str	r0, [sp, #8]
 8003476:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800347a:	4648      	mov	r0, r9
 800347c:	f000 fc5a 	bl	8003d34 <__mcmp>
 8003480:	462a      	mov	r2, r5
 8003482:	9008      	str	r0, [sp, #32]
 8003484:	4621      	mov	r1, r4
 8003486:	4658      	mov	r0, fp
 8003488:	f000 fc70 	bl	8003d6c <__mdiff>
 800348c:	68c2      	ldr	r2, [r0, #12]
 800348e:	4606      	mov	r6, r0
 8003490:	bb02      	cbnz	r2, 80034d4 <_dtoa_r+0xa1c>
 8003492:	4601      	mov	r1, r0
 8003494:	4648      	mov	r0, r9
 8003496:	f000 fc4d 	bl	8003d34 <__mcmp>
 800349a:	4602      	mov	r2, r0
 800349c:	4631      	mov	r1, r6
 800349e:	4658      	mov	r0, fp
 80034a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80034a2:	f000 fa0d 	bl	80038c0 <_Bfree>
 80034a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80034a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80034aa:	9e07      	ldr	r6, [sp, #28]
 80034ac:	ea43 0102 	orr.w	r1, r3, r2
 80034b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80034b2:	4319      	orrs	r1, r3
 80034b4:	d110      	bne.n	80034d8 <_dtoa_r+0xa20>
 80034b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80034ba:	d029      	beq.n	8003510 <_dtoa_r+0xa58>
 80034bc:	9b08      	ldr	r3, [sp, #32]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	dd02      	ble.n	80034c8 <_dtoa_r+0xa10>
 80034c2:	9b02      	ldr	r3, [sp, #8]
 80034c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80034c8:	9b00      	ldr	r3, [sp, #0]
 80034ca:	f883 8000 	strb.w	r8, [r3]
 80034ce:	e63f      	b.n	8003150 <_dtoa_r+0x698>
 80034d0:	4628      	mov	r0, r5
 80034d2:	e7bb      	b.n	800344c <_dtoa_r+0x994>
 80034d4:	2201      	movs	r2, #1
 80034d6:	e7e1      	b.n	800349c <_dtoa_r+0x9e4>
 80034d8:	9b08      	ldr	r3, [sp, #32]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	db04      	blt.n	80034e8 <_dtoa_r+0xa30>
 80034de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80034e0:	430b      	orrs	r3, r1
 80034e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80034e4:	430b      	orrs	r3, r1
 80034e6:	d120      	bne.n	800352a <_dtoa_r+0xa72>
 80034e8:	2a00      	cmp	r2, #0
 80034ea:	dded      	ble.n	80034c8 <_dtoa_r+0xa10>
 80034ec:	4649      	mov	r1, r9
 80034ee:	2201      	movs	r2, #1
 80034f0:	4658      	mov	r0, fp
 80034f2:	f000 fbb3 	bl	8003c5c <__lshift>
 80034f6:	4621      	mov	r1, r4
 80034f8:	4681      	mov	r9, r0
 80034fa:	f000 fc1b 	bl	8003d34 <__mcmp>
 80034fe:	2800      	cmp	r0, #0
 8003500:	dc03      	bgt.n	800350a <_dtoa_r+0xa52>
 8003502:	d1e1      	bne.n	80034c8 <_dtoa_r+0xa10>
 8003504:	f018 0f01 	tst.w	r8, #1
 8003508:	d0de      	beq.n	80034c8 <_dtoa_r+0xa10>
 800350a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800350e:	d1d8      	bne.n	80034c2 <_dtoa_r+0xa0a>
 8003510:	9a00      	ldr	r2, [sp, #0]
 8003512:	2339      	movs	r3, #57	@ 0x39
 8003514:	7013      	strb	r3, [r2, #0]
 8003516:	4633      	mov	r3, r6
 8003518:	461e      	mov	r6, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003520:	2a39      	cmp	r2, #57	@ 0x39
 8003522:	d052      	beq.n	80035ca <_dtoa_r+0xb12>
 8003524:	3201      	adds	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e612      	b.n	8003150 <_dtoa_r+0x698>
 800352a:	2a00      	cmp	r2, #0
 800352c:	dd07      	ble.n	800353e <_dtoa_r+0xa86>
 800352e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8003532:	d0ed      	beq.n	8003510 <_dtoa_r+0xa58>
 8003534:	9a00      	ldr	r2, [sp, #0]
 8003536:	f108 0301 	add.w	r3, r8, #1
 800353a:	7013      	strb	r3, [r2, #0]
 800353c:	e608      	b.n	8003150 <_dtoa_r+0x698>
 800353e:	9b07      	ldr	r3, [sp, #28]
 8003540:	9a07      	ldr	r2, [sp, #28]
 8003542:	f803 8c01 	strb.w	r8, [r3, #-1]
 8003546:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003548:	4293      	cmp	r3, r2
 800354a:	d028      	beq.n	800359e <_dtoa_r+0xae6>
 800354c:	4649      	mov	r1, r9
 800354e:	2300      	movs	r3, #0
 8003550:	220a      	movs	r2, #10
 8003552:	4658      	mov	r0, fp
 8003554:	f000 f9d6 	bl	8003904 <__multadd>
 8003558:	42af      	cmp	r7, r5
 800355a:	4681      	mov	r9, r0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	f04f 020a 	mov.w	r2, #10
 8003564:	4639      	mov	r1, r7
 8003566:	4658      	mov	r0, fp
 8003568:	d107      	bne.n	800357a <_dtoa_r+0xac2>
 800356a:	f000 f9cb 	bl	8003904 <__multadd>
 800356e:	4607      	mov	r7, r0
 8003570:	4605      	mov	r5, r0
 8003572:	9b07      	ldr	r3, [sp, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	9307      	str	r3, [sp, #28]
 8003578:	e774      	b.n	8003464 <_dtoa_r+0x9ac>
 800357a:	f000 f9c3 	bl	8003904 <__multadd>
 800357e:	4629      	mov	r1, r5
 8003580:	4607      	mov	r7, r0
 8003582:	2300      	movs	r3, #0
 8003584:	220a      	movs	r2, #10
 8003586:	4658      	mov	r0, fp
 8003588:	f000 f9bc 	bl	8003904 <__multadd>
 800358c:	4605      	mov	r5, r0
 800358e:	e7f0      	b.n	8003572 <_dtoa_r+0xaba>
 8003590:	9b00      	ldr	r3, [sp, #0]
 8003592:	2b00      	cmp	r3, #0
 8003594:	bfcc      	ite	gt
 8003596:	461e      	movgt	r6, r3
 8003598:	2601      	movle	r6, #1
 800359a:	4456      	add	r6, sl
 800359c:	2700      	movs	r7, #0
 800359e:	4649      	mov	r1, r9
 80035a0:	2201      	movs	r2, #1
 80035a2:	4658      	mov	r0, fp
 80035a4:	f000 fb5a 	bl	8003c5c <__lshift>
 80035a8:	4621      	mov	r1, r4
 80035aa:	4681      	mov	r9, r0
 80035ac:	f000 fbc2 	bl	8003d34 <__mcmp>
 80035b0:	2800      	cmp	r0, #0
 80035b2:	dcb0      	bgt.n	8003516 <_dtoa_r+0xa5e>
 80035b4:	d102      	bne.n	80035bc <_dtoa_r+0xb04>
 80035b6:	f018 0f01 	tst.w	r8, #1
 80035ba:	d1ac      	bne.n	8003516 <_dtoa_r+0xa5e>
 80035bc:	4633      	mov	r3, r6
 80035be:	461e      	mov	r6, r3
 80035c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80035c4:	2a30      	cmp	r2, #48	@ 0x30
 80035c6:	d0fa      	beq.n	80035be <_dtoa_r+0xb06>
 80035c8:	e5c2      	b.n	8003150 <_dtoa_r+0x698>
 80035ca:	459a      	cmp	sl, r3
 80035cc:	d1a4      	bne.n	8003518 <_dtoa_r+0xa60>
 80035ce:	9b04      	ldr	r3, [sp, #16]
 80035d0:	3301      	adds	r3, #1
 80035d2:	9304      	str	r3, [sp, #16]
 80035d4:	2331      	movs	r3, #49	@ 0x31
 80035d6:	f88a 3000 	strb.w	r3, [sl]
 80035da:	e5b9      	b.n	8003150 <_dtoa_r+0x698>
 80035dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80035de:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800363c <_dtoa_r+0xb84>
 80035e2:	b11b      	cbz	r3, 80035ec <_dtoa_r+0xb34>
 80035e4:	f10a 0308 	add.w	r3, sl, #8
 80035e8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4650      	mov	r0, sl
 80035ee:	b019      	add	sp, #100	@ 0x64
 80035f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	f77f ae37 	ble.w	800326a <_dtoa_r+0x7b2>
 80035fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80035fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8003600:	2001      	movs	r0, #1
 8003602:	e655      	b.n	80032b0 <_dtoa_r+0x7f8>
 8003604:	9b00      	ldr	r3, [sp, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	f77f aed6 	ble.w	80033b8 <_dtoa_r+0x900>
 800360c:	4656      	mov	r6, sl
 800360e:	4621      	mov	r1, r4
 8003610:	4648      	mov	r0, r9
 8003612:	f7ff f9c8 	bl	80029a6 <quorem>
 8003616:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800361a:	f806 8b01 	strb.w	r8, [r6], #1
 800361e:	9b00      	ldr	r3, [sp, #0]
 8003620:	eba6 020a 	sub.w	r2, r6, sl
 8003624:	4293      	cmp	r3, r2
 8003626:	ddb3      	ble.n	8003590 <_dtoa_r+0xad8>
 8003628:	4649      	mov	r1, r9
 800362a:	2300      	movs	r3, #0
 800362c:	220a      	movs	r2, #10
 800362e:	4658      	mov	r0, fp
 8003630:	f000 f968 	bl	8003904 <__multadd>
 8003634:	4681      	mov	r9, r0
 8003636:	e7ea      	b.n	800360e <_dtoa_r+0xb56>
 8003638:	08004b24 	.word	0x08004b24
 800363c:	08004aa8 	.word	0x08004aa8

08003640 <_free_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4605      	mov	r5, r0
 8003644:	2900      	cmp	r1, #0
 8003646:	d041      	beq.n	80036cc <_free_r+0x8c>
 8003648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800364c:	1f0c      	subs	r4, r1, #4
 800364e:	2b00      	cmp	r3, #0
 8003650:	bfb8      	it	lt
 8003652:	18e4      	addlt	r4, r4, r3
 8003654:	f000 f8e8 	bl	8003828 <__malloc_lock>
 8003658:	4a1d      	ldr	r2, [pc, #116]	@ (80036d0 <_free_r+0x90>)
 800365a:	6813      	ldr	r3, [r2, #0]
 800365c:	b933      	cbnz	r3, 800366c <_free_r+0x2c>
 800365e:	6063      	str	r3, [r4, #4]
 8003660:	6014      	str	r4, [r2, #0]
 8003662:	4628      	mov	r0, r5
 8003664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003668:	f000 b8e4 	b.w	8003834 <__malloc_unlock>
 800366c:	42a3      	cmp	r3, r4
 800366e:	d908      	bls.n	8003682 <_free_r+0x42>
 8003670:	6820      	ldr	r0, [r4, #0]
 8003672:	1821      	adds	r1, r4, r0
 8003674:	428b      	cmp	r3, r1
 8003676:	bf01      	itttt	eq
 8003678:	6819      	ldreq	r1, [r3, #0]
 800367a:	685b      	ldreq	r3, [r3, #4]
 800367c:	1809      	addeq	r1, r1, r0
 800367e:	6021      	streq	r1, [r4, #0]
 8003680:	e7ed      	b.n	800365e <_free_r+0x1e>
 8003682:	461a      	mov	r2, r3
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	b10b      	cbz	r3, 800368c <_free_r+0x4c>
 8003688:	42a3      	cmp	r3, r4
 800368a:	d9fa      	bls.n	8003682 <_free_r+0x42>
 800368c:	6811      	ldr	r1, [r2, #0]
 800368e:	1850      	adds	r0, r2, r1
 8003690:	42a0      	cmp	r0, r4
 8003692:	d10b      	bne.n	80036ac <_free_r+0x6c>
 8003694:	6820      	ldr	r0, [r4, #0]
 8003696:	4401      	add	r1, r0
 8003698:	1850      	adds	r0, r2, r1
 800369a:	4283      	cmp	r3, r0
 800369c:	6011      	str	r1, [r2, #0]
 800369e:	d1e0      	bne.n	8003662 <_free_r+0x22>
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	6053      	str	r3, [r2, #4]
 80036a6:	4408      	add	r0, r1
 80036a8:	6010      	str	r0, [r2, #0]
 80036aa:	e7da      	b.n	8003662 <_free_r+0x22>
 80036ac:	d902      	bls.n	80036b4 <_free_r+0x74>
 80036ae:	230c      	movs	r3, #12
 80036b0:	602b      	str	r3, [r5, #0]
 80036b2:	e7d6      	b.n	8003662 <_free_r+0x22>
 80036b4:	6820      	ldr	r0, [r4, #0]
 80036b6:	1821      	adds	r1, r4, r0
 80036b8:	428b      	cmp	r3, r1
 80036ba:	bf04      	itt	eq
 80036bc:	6819      	ldreq	r1, [r3, #0]
 80036be:	685b      	ldreq	r3, [r3, #4]
 80036c0:	6063      	str	r3, [r4, #4]
 80036c2:	bf04      	itt	eq
 80036c4:	1809      	addeq	r1, r1, r0
 80036c6:	6021      	streq	r1, [r4, #0]
 80036c8:	6054      	str	r4, [r2, #4]
 80036ca:	e7ca      	b.n	8003662 <_free_r+0x22>
 80036cc:	bd38      	pop	{r3, r4, r5, pc}
 80036ce:	bf00      	nop
 80036d0:	20000348 	.word	0x20000348

080036d4 <malloc>:
 80036d4:	4b02      	ldr	r3, [pc, #8]	@ (80036e0 <malloc+0xc>)
 80036d6:	4601      	mov	r1, r0
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	f000 b825 	b.w	8003728 <_malloc_r>
 80036de:	bf00      	nop
 80036e0:	20000014 	.word	0x20000014

080036e4 <sbrk_aligned>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003724 <sbrk_aligned+0x40>)
 80036e8:	460c      	mov	r4, r1
 80036ea:	6831      	ldr	r1, [r6, #0]
 80036ec:	4605      	mov	r5, r0
 80036ee:	b911      	cbnz	r1, 80036f6 <sbrk_aligned+0x12>
 80036f0:	f000 fe2c 	bl	800434c <_sbrk_r>
 80036f4:	6030      	str	r0, [r6, #0]
 80036f6:	4621      	mov	r1, r4
 80036f8:	4628      	mov	r0, r5
 80036fa:	f000 fe27 	bl	800434c <_sbrk_r>
 80036fe:	1c43      	adds	r3, r0, #1
 8003700:	d103      	bne.n	800370a <sbrk_aligned+0x26>
 8003702:	f04f 34ff 	mov.w	r4, #4294967295
 8003706:	4620      	mov	r0, r4
 8003708:	bd70      	pop	{r4, r5, r6, pc}
 800370a:	1cc4      	adds	r4, r0, #3
 800370c:	f024 0403 	bic.w	r4, r4, #3
 8003710:	42a0      	cmp	r0, r4
 8003712:	d0f8      	beq.n	8003706 <sbrk_aligned+0x22>
 8003714:	1a21      	subs	r1, r4, r0
 8003716:	4628      	mov	r0, r5
 8003718:	f000 fe18 	bl	800434c <_sbrk_r>
 800371c:	3001      	adds	r0, #1
 800371e:	d1f2      	bne.n	8003706 <sbrk_aligned+0x22>
 8003720:	e7ef      	b.n	8003702 <sbrk_aligned+0x1e>
 8003722:	bf00      	nop
 8003724:	20000344 	.word	0x20000344

08003728 <_malloc_r>:
 8003728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800372c:	1ccd      	adds	r5, r1, #3
 800372e:	f025 0503 	bic.w	r5, r5, #3
 8003732:	3508      	adds	r5, #8
 8003734:	2d0c      	cmp	r5, #12
 8003736:	bf38      	it	cc
 8003738:	250c      	movcc	r5, #12
 800373a:	2d00      	cmp	r5, #0
 800373c:	4606      	mov	r6, r0
 800373e:	db01      	blt.n	8003744 <_malloc_r+0x1c>
 8003740:	42a9      	cmp	r1, r5
 8003742:	d904      	bls.n	800374e <_malloc_r+0x26>
 8003744:	230c      	movs	r3, #12
 8003746:	6033      	str	r3, [r6, #0]
 8003748:	2000      	movs	r0, #0
 800374a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800374e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003824 <_malloc_r+0xfc>
 8003752:	f000 f869 	bl	8003828 <__malloc_lock>
 8003756:	f8d8 3000 	ldr.w	r3, [r8]
 800375a:	461c      	mov	r4, r3
 800375c:	bb44      	cbnz	r4, 80037b0 <_malloc_r+0x88>
 800375e:	4629      	mov	r1, r5
 8003760:	4630      	mov	r0, r6
 8003762:	f7ff ffbf 	bl	80036e4 <sbrk_aligned>
 8003766:	1c43      	adds	r3, r0, #1
 8003768:	4604      	mov	r4, r0
 800376a:	d158      	bne.n	800381e <_malloc_r+0xf6>
 800376c:	f8d8 4000 	ldr.w	r4, [r8]
 8003770:	4627      	mov	r7, r4
 8003772:	2f00      	cmp	r7, #0
 8003774:	d143      	bne.n	80037fe <_malloc_r+0xd6>
 8003776:	2c00      	cmp	r4, #0
 8003778:	d04b      	beq.n	8003812 <_malloc_r+0xea>
 800377a:	6823      	ldr	r3, [r4, #0]
 800377c:	4639      	mov	r1, r7
 800377e:	4630      	mov	r0, r6
 8003780:	eb04 0903 	add.w	r9, r4, r3
 8003784:	f000 fde2 	bl	800434c <_sbrk_r>
 8003788:	4581      	cmp	r9, r0
 800378a:	d142      	bne.n	8003812 <_malloc_r+0xea>
 800378c:	6821      	ldr	r1, [r4, #0]
 800378e:	1a6d      	subs	r5, r5, r1
 8003790:	4629      	mov	r1, r5
 8003792:	4630      	mov	r0, r6
 8003794:	f7ff ffa6 	bl	80036e4 <sbrk_aligned>
 8003798:	3001      	adds	r0, #1
 800379a:	d03a      	beq.n	8003812 <_malloc_r+0xea>
 800379c:	6823      	ldr	r3, [r4, #0]
 800379e:	442b      	add	r3, r5
 80037a0:	6023      	str	r3, [r4, #0]
 80037a2:	f8d8 3000 	ldr.w	r3, [r8]
 80037a6:	685a      	ldr	r2, [r3, #4]
 80037a8:	bb62      	cbnz	r2, 8003804 <_malloc_r+0xdc>
 80037aa:	f8c8 7000 	str.w	r7, [r8]
 80037ae:	e00f      	b.n	80037d0 <_malloc_r+0xa8>
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	1b52      	subs	r2, r2, r5
 80037b4:	d420      	bmi.n	80037f8 <_malloc_r+0xd0>
 80037b6:	2a0b      	cmp	r2, #11
 80037b8:	d917      	bls.n	80037ea <_malloc_r+0xc2>
 80037ba:	1961      	adds	r1, r4, r5
 80037bc:	42a3      	cmp	r3, r4
 80037be:	6025      	str	r5, [r4, #0]
 80037c0:	bf18      	it	ne
 80037c2:	6059      	strne	r1, [r3, #4]
 80037c4:	6863      	ldr	r3, [r4, #4]
 80037c6:	bf08      	it	eq
 80037c8:	f8c8 1000 	streq.w	r1, [r8]
 80037cc:	5162      	str	r2, [r4, r5]
 80037ce:	604b      	str	r3, [r1, #4]
 80037d0:	4630      	mov	r0, r6
 80037d2:	f000 f82f 	bl	8003834 <__malloc_unlock>
 80037d6:	f104 000b 	add.w	r0, r4, #11
 80037da:	1d23      	adds	r3, r4, #4
 80037dc:	f020 0007 	bic.w	r0, r0, #7
 80037e0:	1ac2      	subs	r2, r0, r3
 80037e2:	bf1c      	itt	ne
 80037e4:	1a1b      	subne	r3, r3, r0
 80037e6:	50a3      	strne	r3, [r4, r2]
 80037e8:	e7af      	b.n	800374a <_malloc_r+0x22>
 80037ea:	6862      	ldr	r2, [r4, #4]
 80037ec:	42a3      	cmp	r3, r4
 80037ee:	bf0c      	ite	eq
 80037f0:	f8c8 2000 	streq.w	r2, [r8]
 80037f4:	605a      	strne	r2, [r3, #4]
 80037f6:	e7eb      	b.n	80037d0 <_malloc_r+0xa8>
 80037f8:	4623      	mov	r3, r4
 80037fa:	6864      	ldr	r4, [r4, #4]
 80037fc:	e7ae      	b.n	800375c <_malloc_r+0x34>
 80037fe:	463c      	mov	r4, r7
 8003800:	687f      	ldr	r7, [r7, #4]
 8003802:	e7b6      	b.n	8003772 <_malloc_r+0x4a>
 8003804:	461a      	mov	r2, r3
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	42a3      	cmp	r3, r4
 800380a:	d1fb      	bne.n	8003804 <_malloc_r+0xdc>
 800380c:	2300      	movs	r3, #0
 800380e:	6053      	str	r3, [r2, #4]
 8003810:	e7de      	b.n	80037d0 <_malloc_r+0xa8>
 8003812:	230c      	movs	r3, #12
 8003814:	6033      	str	r3, [r6, #0]
 8003816:	4630      	mov	r0, r6
 8003818:	f000 f80c 	bl	8003834 <__malloc_unlock>
 800381c:	e794      	b.n	8003748 <_malloc_r+0x20>
 800381e:	6005      	str	r5, [r0, #0]
 8003820:	e7d6      	b.n	80037d0 <_malloc_r+0xa8>
 8003822:	bf00      	nop
 8003824:	20000348 	.word	0x20000348

08003828 <__malloc_lock>:
 8003828:	4801      	ldr	r0, [pc, #4]	@ (8003830 <__malloc_lock+0x8>)
 800382a:	f7ff b8ac 	b.w	8002986 <__retarget_lock_acquire_recursive>
 800382e:	bf00      	nop
 8003830:	20000340 	.word	0x20000340

08003834 <__malloc_unlock>:
 8003834:	4801      	ldr	r0, [pc, #4]	@ (800383c <__malloc_unlock+0x8>)
 8003836:	f7ff b8a7 	b.w	8002988 <__retarget_lock_release_recursive>
 800383a:	bf00      	nop
 800383c:	20000340 	.word	0x20000340

08003840 <_Balloc>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	69c6      	ldr	r6, [r0, #28]
 8003844:	4604      	mov	r4, r0
 8003846:	460d      	mov	r5, r1
 8003848:	b976      	cbnz	r6, 8003868 <_Balloc+0x28>
 800384a:	2010      	movs	r0, #16
 800384c:	f7ff ff42 	bl	80036d4 <malloc>
 8003850:	4602      	mov	r2, r0
 8003852:	61e0      	str	r0, [r4, #28]
 8003854:	b920      	cbnz	r0, 8003860 <_Balloc+0x20>
 8003856:	4b18      	ldr	r3, [pc, #96]	@ (80038b8 <_Balloc+0x78>)
 8003858:	4818      	ldr	r0, [pc, #96]	@ (80038bc <_Balloc+0x7c>)
 800385a:	216b      	movs	r1, #107	@ 0x6b
 800385c:	f000 fd86 	bl	800436c <__assert_func>
 8003860:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003864:	6006      	str	r6, [r0, #0]
 8003866:	60c6      	str	r6, [r0, #12]
 8003868:	69e6      	ldr	r6, [r4, #28]
 800386a:	68f3      	ldr	r3, [r6, #12]
 800386c:	b183      	cbz	r3, 8003890 <_Balloc+0x50>
 800386e:	69e3      	ldr	r3, [r4, #28]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003876:	b9b8      	cbnz	r0, 80038a8 <_Balloc+0x68>
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f605 	lsl.w	r6, r1, r5
 800387e:	1d72      	adds	r2, r6, #5
 8003880:	0092      	lsls	r2, r2, #2
 8003882:	4620      	mov	r0, r4
 8003884:	f000 fd90 	bl	80043a8 <_calloc_r>
 8003888:	b160      	cbz	r0, 80038a4 <_Balloc+0x64>
 800388a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800388e:	e00e      	b.n	80038ae <_Balloc+0x6e>
 8003890:	2221      	movs	r2, #33	@ 0x21
 8003892:	2104      	movs	r1, #4
 8003894:	4620      	mov	r0, r4
 8003896:	f000 fd87 	bl	80043a8 <_calloc_r>
 800389a:	69e3      	ldr	r3, [r4, #28]
 800389c:	60f0      	str	r0, [r6, #12]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1e4      	bne.n	800386e <_Balloc+0x2e>
 80038a4:	2000      	movs	r0, #0
 80038a6:	bd70      	pop	{r4, r5, r6, pc}
 80038a8:	6802      	ldr	r2, [r0, #0]
 80038aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80038ae:	2300      	movs	r3, #0
 80038b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80038b4:	e7f7      	b.n	80038a6 <_Balloc+0x66>
 80038b6:	bf00      	nop
 80038b8:	08004ab5 	.word	0x08004ab5
 80038bc:	08004b35 	.word	0x08004b35

080038c0 <_Bfree>:
 80038c0:	b570      	push	{r4, r5, r6, lr}
 80038c2:	69c6      	ldr	r6, [r0, #28]
 80038c4:	4605      	mov	r5, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	b976      	cbnz	r6, 80038e8 <_Bfree+0x28>
 80038ca:	2010      	movs	r0, #16
 80038cc:	f7ff ff02 	bl	80036d4 <malloc>
 80038d0:	4602      	mov	r2, r0
 80038d2:	61e8      	str	r0, [r5, #28]
 80038d4:	b920      	cbnz	r0, 80038e0 <_Bfree+0x20>
 80038d6:	4b09      	ldr	r3, [pc, #36]	@ (80038fc <_Bfree+0x3c>)
 80038d8:	4809      	ldr	r0, [pc, #36]	@ (8003900 <_Bfree+0x40>)
 80038da:	218f      	movs	r1, #143	@ 0x8f
 80038dc:	f000 fd46 	bl	800436c <__assert_func>
 80038e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80038e4:	6006      	str	r6, [r0, #0]
 80038e6:	60c6      	str	r6, [r0, #12]
 80038e8:	b13c      	cbz	r4, 80038fa <_Bfree+0x3a>
 80038ea:	69eb      	ldr	r3, [r5, #28]
 80038ec:	6862      	ldr	r2, [r4, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80038f4:	6021      	str	r1, [r4, #0]
 80038f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80038fa:	bd70      	pop	{r4, r5, r6, pc}
 80038fc:	08004ab5 	.word	0x08004ab5
 8003900:	08004b35 	.word	0x08004b35

08003904 <__multadd>:
 8003904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003908:	690d      	ldr	r5, [r1, #16]
 800390a:	4607      	mov	r7, r0
 800390c:	460c      	mov	r4, r1
 800390e:	461e      	mov	r6, r3
 8003910:	f101 0c14 	add.w	ip, r1, #20
 8003914:	2000      	movs	r0, #0
 8003916:	f8dc 3000 	ldr.w	r3, [ip]
 800391a:	b299      	uxth	r1, r3
 800391c:	fb02 6101 	mla	r1, r2, r1, r6
 8003920:	0c1e      	lsrs	r6, r3, #16
 8003922:	0c0b      	lsrs	r3, r1, #16
 8003924:	fb02 3306 	mla	r3, r2, r6, r3
 8003928:	b289      	uxth	r1, r1
 800392a:	3001      	adds	r0, #1
 800392c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003930:	4285      	cmp	r5, r0
 8003932:	f84c 1b04 	str.w	r1, [ip], #4
 8003936:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800393a:	dcec      	bgt.n	8003916 <__multadd+0x12>
 800393c:	b30e      	cbz	r6, 8003982 <__multadd+0x7e>
 800393e:	68a3      	ldr	r3, [r4, #8]
 8003940:	42ab      	cmp	r3, r5
 8003942:	dc19      	bgt.n	8003978 <__multadd+0x74>
 8003944:	6861      	ldr	r1, [r4, #4]
 8003946:	4638      	mov	r0, r7
 8003948:	3101      	adds	r1, #1
 800394a:	f7ff ff79 	bl	8003840 <_Balloc>
 800394e:	4680      	mov	r8, r0
 8003950:	b928      	cbnz	r0, 800395e <__multadd+0x5a>
 8003952:	4602      	mov	r2, r0
 8003954:	4b0c      	ldr	r3, [pc, #48]	@ (8003988 <__multadd+0x84>)
 8003956:	480d      	ldr	r0, [pc, #52]	@ (800398c <__multadd+0x88>)
 8003958:	21ba      	movs	r1, #186	@ 0xba
 800395a:	f000 fd07 	bl	800436c <__assert_func>
 800395e:	6922      	ldr	r2, [r4, #16]
 8003960:	3202      	adds	r2, #2
 8003962:	f104 010c 	add.w	r1, r4, #12
 8003966:	0092      	lsls	r2, r2, #2
 8003968:	300c      	adds	r0, #12
 800396a:	f7ff f80e 	bl	800298a <memcpy>
 800396e:	4621      	mov	r1, r4
 8003970:	4638      	mov	r0, r7
 8003972:	f7ff ffa5 	bl	80038c0 <_Bfree>
 8003976:	4644      	mov	r4, r8
 8003978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800397c:	3501      	adds	r5, #1
 800397e:	615e      	str	r6, [r3, #20]
 8003980:	6125      	str	r5, [r4, #16]
 8003982:	4620      	mov	r0, r4
 8003984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003988:	08004b24 	.word	0x08004b24
 800398c:	08004b35 	.word	0x08004b35

08003990 <__hi0bits>:
 8003990:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8003994:	4603      	mov	r3, r0
 8003996:	bf36      	itet	cc
 8003998:	0403      	lslcc	r3, r0, #16
 800399a:	2000      	movcs	r0, #0
 800399c:	2010      	movcc	r0, #16
 800399e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a2:	bf3c      	itt	cc
 80039a4:	021b      	lslcc	r3, r3, #8
 80039a6:	3008      	addcc	r0, #8
 80039a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039ac:	bf3c      	itt	cc
 80039ae:	011b      	lslcc	r3, r3, #4
 80039b0:	3004      	addcc	r0, #4
 80039b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b6:	bf3c      	itt	cc
 80039b8:	009b      	lslcc	r3, r3, #2
 80039ba:	3002      	addcc	r0, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	db05      	blt.n	80039cc <__hi0bits+0x3c>
 80039c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80039c4:	f100 0001 	add.w	r0, r0, #1
 80039c8:	bf08      	it	eq
 80039ca:	2020      	moveq	r0, #32
 80039cc:	4770      	bx	lr

080039ce <__lo0bits>:
 80039ce:	6803      	ldr	r3, [r0, #0]
 80039d0:	4602      	mov	r2, r0
 80039d2:	f013 0007 	ands.w	r0, r3, #7
 80039d6:	d00b      	beq.n	80039f0 <__lo0bits+0x22>
 80039d8:	07d9      	lsls	r1, r3, #31
 80039da:	d421      	bmi.n	8003a20 <__lo0bits+0x52>
 80039dc:	0798      	lsls	r0, r3, #30
 80039de:	bf49      	itett	mi
 80039e0:	085b      	lsrmi	r3, r3, #1
 80039e2:	089b      	lsrpl	r3, r3, #2
 80039e4:	2001      	movmi	r0, #1
 80039e6:	6013      	strmi	r3, [r2, #0]
 80039e8:	bf5c      	itt	pl
 80039ea:	6013      	strpl	r3, [r2, #0]
 80039ec:	2002      	movpl	r0, #2
 80039ee:	4770      	bx	lr
 80039f0:	b299      	uxth	r1, r3
 80039f2:	b909      	cbnz	r1, 80039f8 <__lo0bits+0x2a>
 80039f4:	0c1b      	lsrs	r3, r3, #16
 80039f6:	2010      	movs	r0, #16
 80039f8:	b2d9      	uxtb	r1, r3
 80039fa:	b909      	cbnz	r1, 8003a00 <__lo0bits+0x32>
 80039fc:	3008      	adds	r0, #8
 80039fe:	0a1b      	lsrs	r3, r3, #8
 8003a00:	0719      	lsls	r1, r3, #28
 8003a02:	bf04      	itt	eq
 8003a04:	091b      	lsreq	r3, r3, #4
 8003a06:	3004      	addeq	r0, #4
 8003a08:	0799      	lsls	r1, r3, #30
 8003a0a:	bf04      	itt	eq
 8003a0c:	089b      	lsreq	r3, r3, #2
 8003a0e:	3002      	addeq	r0, #2
 8003a10:	07d9      	lsls	r1, r3, #31
 8003a12:	d403      	bmi.n	8003a1c <__lo0bits+0x4e>
 8003a14:	085b      	lsrs	r3, r3, #1
 8003a16:	f100 0001 	add.w	r0, r0, #1
 8003a1a:	d003      	beq.n	8003a24 <__lo0bits+0x56>
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	4770      	bx	lr
 8003a20:	2000      	movs	r0, #0
 8003a22:	4770      	bx	lr
 8003a24:	2020      	movs	r0, #32
 8003a26:	4770      	bx	lr

08003a28 <__i2b>:
 8003a28:	b510      	push	{r4, lr}
 8003a2a:	460c      	mov	r4, r1
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	f7ff ff07 	bl	8003840 <_Balloc>
 8003a32:	4602      	mov	r2, r0
 8003a34:	b928      	cbnz	r0, 8003a42 <__i2b+0x1a>
 8003a36:	4b05      	ldr	r3, [pc, #20]	@ (8003a4c <__i2b+0x24>)
 8003a38:	4805      	ldr	r0, [pc, #20]	@ (8003a50 <__i2b+0x28>)
 8003a3a:	f240 1145 	movw	r1, #325	@ 0x145
 8003a3e:	f000 fc95 	bl	800436c <__assert_func>
 8003a42:	2301      	movs	r3, #1
 8003a44:	6144      	str	r4, [r0, #20]
 8003a46:	6103      	str	r3, [r0, #16]
 8003a48:	bd10      	pop	{r4, pc}
 8003a4a:	bf00      	nop
 8003a4c:	08004b24 	.word	0x08004b24
 8003a50:	08004b35 	.word	0x08004b35

08003a54 <__multiply>:
 8003a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a58:	4614      	mov	r4, r2
 8003a5a:	690a      	ldr	r2, [r1, #16]
 8003a5c:	6923      	ldr	r3, [r4, #16]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	bfa8      	it	ge
 8003a62:	4623      	movge	r3, r4
 8003a64:	460f      	mov	r7, r1
 8003a66:	bfa4      	itt	ge
 8003a68:	460c      	movge	r4, r1
 8003a6a:	461f      	movge	r7, r3
 8003a6c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8003a70:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8003a74:	68a3      	ldr	r3, [r4, #8]
 8003a76:	6861      	ldr	r1, [r4, #4]
 8003a78:	eb0a 0609 	add.w	r6, sl, r9
 8003a7c:	42b3      	cmp	r3, r6
 8003a7e:	b085      	sub	sp, #20
 8003a80:	bfb8      	it	lt
 8003a82:	3101      	addlt	r1, #1
 8003a84:	f7ff fedc 	bl	8003840 <_Balloc>
 8003a88:	b930      	cbnz	r0, 8003a98 <__multiply+0x44>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	4b44      	ldr	r3, [pc, #272]	@ (8003ba0 <__multiply+0x14c>)
 8003a8e:	4845      	ldr	r0, [pc, #276]	@ (8003ba4 <__multiply+0x150>)
 8003a90:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8003a94:	f000 fc6a 	bl	800436c <__assert_func>
 8003a98:	f100 0514 	add.w	r5, r0, #20
 8003a9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8003aa0:	462b      	mov	r3, r5
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	4543      	cmp	r3, r8
 8003aa6:	d321      	bcc.n	8003aec <__multiply+0x98>
 8003aa8:	f107 0114 	add.w	r1, r7, #20
 8003aac:	f104 0214 	add.w	r2, r4, #20
 8003ab0:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8003ab4:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8003ab8:	9302      	str	r3, [sp, #8]
 8003aba:	1b13      	subs	r3, r2, r4
 8003abc:	3b15      	subs	r3, #21
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	f104 0715 	add.w	r7, r4, #21
 8003ac8:	42ba      	cmp	r2, r7
 8003aca:	bf38      	it	cc
 8003acc:	2304      	movcc	r3, #4
 8003ace:	9301      	str	r3, [sp, #4]
 8003ad0:	9b02      	ldr	r3, [sp, #8]
 8003ad2:	9103      	str	r1, [sp, #12]
 8003ad4:	428b      	cmp	r3, r1
 8003ad6:	d80c      	bhi.n	8003af2 <__multiply+0x9e>
 8003ad8:	2e00      	cmp	r6, #0
 8003ada:	dd03      	ble.n	8003ae4 <__multiply+0x90>
 8003adc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05b      	beq.n	8003b9c <__multiply+0x148>
 8003ae4:	6106      	str	r6, [r0, #16]
 8003ae6:	b005      	add	sp, #20
 8003ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aec:	f843 2b04 	str.w	r2, [r3], #4
 8003af0:	e7d8      	b.n	8003aa4 <__multiply+0x50>
 8003af2:	f8b1 a000 	ldrh.w	sl, [r1]
 8003af6:	f1ba 0f00 	cmp.w	sl, #0
 8003afa:	d024      	beq.n	8003b46 <__multiply+0xf2>
 8003afc:	f104 0e14 	add.w	lr, r4, #20
 8003b00:	46a9      	mov	r9, r5
 8003b02:	f04f 0c00 	mov.w	ip, #0
 8003b06:	f85e 7b04 	ldr.w	r7, [lr], #4
 8003b0a:	f8d9 3000 	ldr.w	r3, [r9]
 8003b0e:	fa1f fb87 	uxth.w	fp, r7
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	fb0a 330b 	mla	r3, sl, fp, r3
 8003b18:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8003b1c:	f8d9 7000 	ldr.w	r7, [r9]
 8003b20:	4463      	add	r3, ip
 8003b22:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003b26:	fb0a c70b 	mla	r7, sl, fp, ip
 8003b2a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003b34:	4572      	cmp	r2, lr
 8003b36:	f849 3b04 	str.w	r3, [r9], #4
 8003b3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8003b3e:	d8e2      	bhi.n	8003b06 <__multiply+0xb2>
 8003b40:	9b01      	ldr	r3, [sp, #4]
 8003b42:	f845 c003 	str.w	ip, [r5, r3]
 8003b46:	9b03      	ldr	r3, [sp, #12]
 8003b48:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003b4c:	3104      	adds	r1, #4
 8003b4e:	f1b9 0f00 	cmp.w	r9, #0
 8003b52:	d021      	beq.n	8003b98 <__multiply+0x144>
 8003b54:	682b      	ldr	r3, [r5, #0]
 8003b56:	f104 0c14 	add.w	ip, r4, #20
 8003b5a:	46ae      	mov	lr, r5
 8003b5c:	f04f 0a00 	mov.w	sl, #0
 8003b60:	f8bc b000 	ldrh.w	fp, [ip]
 8003b64:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8003b68:	fb09 770b 	mla	r7, r9, fp, r7
 8003b6c:	4457      	add	r7, sl
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8003b74:	f84e 3b04 	str.w	r3, [lr], #4
 8003b78:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003b7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b80:	f8be 3000 	ldrh.w	r3, [lr]
 8003b84:	fb09 330a 	mla	r3, r9, sl, r3
 8003b88:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8003b8c:	4562      	cmp	r2, ip
 8003b8e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003b92:	d8e5      	bhi.n	8003b60 <__multiply+0x10c>
 8003b94:	9f01      	ldr	r7, [sp, #4]
 8003b96:	51eb      	str	r3, [r5, r7]
 8003b98:	3504      	adds	r5, #4
 8003b9a:	e799      	b.n	8003ad0 <__multiply+0x7c>
 8003b9c:	3e01      	subs	r6, #1
 8003b9e:	e79b      	b.n	8003ad8 <__multiply+0x84>
 8003ba0:	08004b24 	.word	0x08004b24
 8003ba4:	08004b35 	.word	0x08004b35

08003ba8 <__pow5mult>:
 8003ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bac:	4615      	mov	r5, r2
 8003bae:	f012 0203 	ands.w	r2, r2, #3
 8003bb2:	4607      	mov	r7, r0
 8003bb4:	460e      	mov	r6, r1
 8003bb6:	d007      	beq.n	8003bc8 <__pow5mult+0x20>
 8003bb8:	4c25      	ldr	r4, [pc, #148]	@ (8003c50 <__pow5mult+0xa8>)
 8003bba:	3a01      	subs	r2, #1
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003bc2:	f7ff fe9f 	bl	8003904 <__multadd>
 8003bc6:	4606      	mov	r6, r0
 8003bc8:	10ad      	asrs	r5, r5, #2
 8003bca:	d03d      	beq.n	8003c48 <__pow5mult+0xa0>
 8003bcc:	69fc      	ldr	r4, [r7, #28]
 8003bce:	b97c      	cbnz	r4, 8003bf0 <__pow5mult+0x48>
 8003bd0:	2010      	movs	r0, #16
 8003bd2:	f7ff fd7f 	bl	80036d4 <malloc>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	61f8      	str	r0, [r7, #28]
 8003bda:	b928      	cbnz	r0, 8003be8 <__pow5mult+0x40>
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8003c54 <__pow5mult+0xac>)
 8003bde:	481e      	ldr	r0, [pc, #120]	@ (8003c58 <__pow5mult+0xb0>)
 8003be0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003be4:	f000 fbc2 	bl	800436c <__assert_func>
 8003be8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003bec:	6004      	str	r4, [r0, #0]
 8003bee:	60c4      	str	r4, [r0, #12]
 8003bf0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003bf4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003bf8:	b94c      	cbnz	r4, 8003c0e <__pow5mult+0x66>
 8003bfa:	f240 2171 	movw	r1, #625	@ 0x271
 8003bfe:	4638      	mov	r0, r7
 8003c00:	f7ff ff12 	bl	8003a28 <__i2b>
 8003c04:	2300      	movs	r3, #0
 8003c06:	f8c8 0008 	str.w	r0, [r8, #8]
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	6003      	str	r3, [r0, #0]
 8003c0e:	f04f 0900 	mov.w	r9, #0
 8003c12:	07eb      	lsls	r3, r5, #31
 8003c14:	d50a      	bpl.n	8003c2c <__pow5mult+0x84>
 8003c16:	4631      	mov	r1, r6
 8003c18:	4622      	mov	r2, r4
 8003c1a:	4638      	mov	r0, r7
 8003c1c:	f7ff ff1a 	bl	8003a54 <__multiply>
 8003c20:	4631      	mov	r1, r6
 8003c22:	4680      	mov	r8, r0
 8003c24:	4638      	mov	r0, r7
 8003c26:	f7ff fe4b 	bl	80038c0 <_Bfree>
 8003c2a:	4646      	mov	r6, r8
 8003c2c:	106d      	asrs	r5, r5, #1
 8003c2e:	d00b      	beq.n	8003c48 <__pow5mult+0xa0>
 8003c30:	6820      	ldr	r0, [r4, #0]
 8003c32:	b938      	cbnz	r0, 8003c44 <__pow5mult+0x9c>
 8003c34:	4622      	mov	r2, r4
 8003c36:	4621      	mov	r1, r4
 8003c38:	4638      	mov	r0, r7
 8003c3a:	f7ff ff0b 	bl	8003a54 <__multiply>
 8003c3e:	6020      	str	r0, [r4, #0]
 8003c40:	f8c0 9000 	str.w	r9, [r0]
 8003c44:	4604      	mov	r4, r0
 8003c46:	e7e4      	b.n	8003c12 <__pow5mult+0x6a>
 8003c48:	4630      	mov	r0, r6
 8003c4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c4e:	bf00      	nop
 8003c50:	08004b90 	.word	0x08004b90
 8003c54:	08004ab5 	.word	0x08004ab5
 8003c58:	08004b35 	.word	0x08004b35

08003c5c <__lshift>:
 8003c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c60:	460c      	mov	r4, r1
 8003c62:	6849      	ldr	r1, [r1, #4]
 8003c64:	6923      	ldr	r3, [r4, #16]
 8003c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003c6a:	68a3      	ldr	r3, [r4, #8]
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	4691      	mov	r9, r2
 8003c70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003c74:	f108 0601 	add.w	r6, r8, #1
 8003c78:	42b3      	cmp	r3, r6
 8003c7a:	db0b      	blt.n	8003c94 <__lshift+0x38>
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	f7ff fddf 	bl	8003840 <_Balloc>
 8003c82:	4605      	mov	r5, r0
 8003c84:	b948      	cbnz	r0, 8003c9a <__lshift+0x3e>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b28      	ldr	r3, [pc, #160]	@ (8003d2c <__lshift+0xd0>)
 8003c8a:	4829      	ldr	r0, [pc, #164]	@ (8003d30 <__lshift+0xd4>)
 8003c8c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003c90:	f000 fb6c 	bl	800436c <__assert_func>
 8003c94:	3101      	adds	r1, #1
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	e7ee      	b.n	8003c78 <__lshift+0x1c>
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	f100 0114 	add.w	r1, r0, #20
 8003ca0:	f100 0210 	add.w	r2, r0, #16
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4553      	cmp	r3, sl
 8003ca8:	db33      	blt.n	8003d12 <__lshift+0xb6>
 8003caa:	6920      	ldr	r0, [r4, #16]
 8003cac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003cb0:	f104 0314 	add.w	r3, r4, #20
 8003cb4:	f019 091f 	ands.w	r9, r9, #31
 8003cb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003cbc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003cc0:	d02b      	beq.n	8003d1a <__lshift+0xbe>
 8003cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8003cc6:	468a      	mov	sl, r1
 8003cc8:	2200      	movs	r2, #0
 8003cca:	6818      	ldr	r0, [r3, #0]
 8003ccc:	fa00 f009 	lsl.w	r0, r0, r9
 8003cd0:	4310      	orrs	r0, r2
 8003cd2:	f84a 0b04 	str.w	r0, [sl], #4
 8003cd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cda:	459c      	cmp	ip, r3
 8003cdc:	fa22 f20e 	lsr.w	r2, r2, lr
 8003ce0:	d8f3      	bhi.n	8003cca <__lshift+0x6e>
 8003ce2:	ebac 0304 	sub.w	r3, ip, r4
 8003ce6:	3b15      	subs	r3, #21
 8003ce8:	f023 0303 	bic.w	r3, r3, #3
 8003cec:	3304      	adds	r3, #4
 8003cee:	f104 0015 	add.w	r0, r4, #21
 8003cf2:	4584      	cmp	ip, r0
 8003cf4:	bf38      	it	cc
 8003cf6:	2304      	movcc	r3, #4
 8003cf8:	50ca      	str	r2, [r1, r3]
 8003cfa:	b10a      	cbz	r2, 8003d00 <__lshift+0xa4>
 8003cfc:	f108 0602 	add.w	r6, r8, #2
 8003d00:	3e01      	subs	r6, #1
 8003d02:	4638      	mov	r0, r7
 8003d04:	612e      	str	r6, [r5, #16]
 8003d06:	4621      	mov	r1, r4
 8003d08:	f7ff fdda 	bl	80038c0 <_Bfree>
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d12:	f842 0f04 	str.w	r0, [r2, #4]!
 8003d16:	3301      	adds	r3, #1
 8003d18:	e7c5      	b.n	8003ca6 <__lshift+0x4a>
 8003d1a:	3904      	subs	r1, #4
 8003d1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d20:	f841 2f04 	str.w	r2, [r1, #4]!
 8003d24:	459c      	cmp	ip, r3
 8003d26:	d8f9      	bhi.n	8003d1c <__lshift+0xc0>
 8003d28:	e7ea      	b.n	8003d00 <__lshift+0xa4>
 8003d2a:	bf00      	nop
 8003d2c:	08004b24 	.word	0x08004b24
 8003d30:	08004b35 	.word	0x08004b35

08003d34 <__mcmp>:
 8003d34:	690a      	ldr	r2, [r1, #16]
 8003d36:	4603      	mov	r3, r0
 8003d38:	6900      	ldr	r0, [r0, #16]
 8003d3a:	1a80      	subs	r0, r0, r2
 8003d3c:	b530      	push	{r4, r5, lr}
 8003d3e:	d10e      	bne.n	8003d5e <__mcmp+0x2a>
 8003d40:	3314      	adds	r3, #20
 8003d42:	3114      	adds	r1, #20
 8003d44:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003d48:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003d4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003d50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003d54:	4295      	cmp	r5, r2
 8003d56:	d003      	beq.n	8003d60 <__mcmp+0x2c>
 8003d58:	d205      	bcs.n	8003d66 <__mcmp+0x32>
 8003d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003d5e:	bd30      	pop	{r4, r5, pc}
 8003d60:	42a3      	cmp	r3, r4
 8003d62:	d3f3      	bcc.n	8003d4c <__mcmp+0x18>
 8003d64:	e7fb      	b.n	8003d5e <__mcmp+0x2a>
 8003d66:	2001      	movs	r0, #1
 8003d68:	e7f9      	b.n	8003d5e <__mcmp+0x2a>
	...

08003d6c <__mdiff>:
 8003d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	4689      	mov	r9, r1
 8003d72:	4606      	mov	r6, r0
 8003d74:	4611      	mov	r1, r2
 8003d76:	4648      	mov	r0, r9
 8003d78:	4614      	mov	r4, r2
 8003d7a:	f7ff ffdb 	bl	8003d34 <__mcmp>
 8003d7e:	1e05      	subs	r5, r0, #0
 8003d80:	d112      	bne.n	8003da8 <__mdiff+0x3c>
 8003d82:	4629      	mov	r1, r5
 8003d84:	4630      	mov	r0, r6
 8003d86:	f7ff fd5b 	bl	8003840 <_Balloc>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	b928      	cbnz	r0, 8003d9a <__mdiff+0x2e>
 8003d8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e8c <__mdiff+0x120>)
 8003d90:	f240 2137 	movw	r1, #567	@ 0x237
 8003d94:	483e      	ldr	r0, [pc, #248]	@ (8003e90 <__mdiff+0x124>)
 8003d96:	f000 fae9 	bl	800436c <__assert_func>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003da0:	4610      	mov	r0, r2
 8003da2:	b003      	add	sp, #12
 8003da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003da8:	bfbc      	itt	lt
 8003daa:	464b      	movlt	r3, r9
 8003dac:	46a1      	movlt	r9, r4
 8003dae:	4630      	mov	r0, r6
 8003db0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003db4:	bfba      	itte	lt
 8003db6:	461c      	movlt	r4, r3
 8003db8:	2501      	movlt	r5, #1
 8003dba:	2500      	movge	r5, #0
 8003dbc:	f7ff fd40 	bl	8003840 <_Balloc>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	b918      	cbnz	r0, 8003dcc <__mdiff+0x60>
 8003dc4:	4b31      	ldr	r3, [pc, #196]	@ (8003e8c <__mdiff+0x120>)
 8003dc6:	f240 2145 	movw	r1, #581	@ 0x245
 8003dca:	e7e3      	b.n	8003d94 <__mdiff+0x28>
 8003dcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003dd0:	6926      	ldr	r6, [r4, #16]
 8003dd2:	60c5      	str	r5, [r0, #12]
 8003dd4:	f109 0310 	add.w	r3, r9, #16
 8003dd8:	f109 0514 	add.w	r5, r9, #20
 8003ddc:	f104 0e14 	add.w	lr, r4, #20
 8003de0:	f100 0b14 	add.w	fp, r0, #20
 8003de4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8003de8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8003dec:	9301      	str	r3, [sp, #4]
 8003dee:	46d9      	mov	r9, fp
 8003df0:	f04f 0c00 	mov.w	ip, #0
 8003df4:	9b01      	ldr	r3, [sp, #4]
 8003df6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8003dfa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	fa1f f38a 	uxth.w	r3, sl
 8003e04:	4619      	mov	r1, r3
 8003e06:	b283      	uxth	r3, r0
 8003e08:	1acb      	subs	r3, r1, r3
 8003e0a:	0c00      	lsrs	r0, r0, #16
 8003e0c:	4463      	add	r3, ip
 8003e0e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8003e12:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003e1c:	4576      	cmp	r6, lr
 8003e1e:	f849 3b04 	str.w	r3, [r9], #4
 8003e22:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003e26:	d8e5      	bhi.n	8003df4 <__mdiff+0x88>
 8003e28:	1b33      	subs	r3, r6, r4
 8003e2a:	3b15      	subs	r3, #21
 8003e2c:	f023 0303 	bic.w	r3, r3, #3
 8003e30:	3415      	adds	r4, #21
 8003e32:	3304      	adds	r3, #4
 8003e34:	42a6      	cmp	r6, r4
 8003e36:	bf38      	it	cc
 8003e38:	2304      	movcc	r3, #4
 8003e3a:	441d      	add	r5, r3
 8003e3c:	445b      	add	r3, fp
 8003e3e:	461e      	mov	r6, r3
 8003e40:	462c      	mov	r4, r5
 8003e42:	4544      	cmp	r4, r8
 8003e44:	d30e      	bcc.n	8003e64 <__mdiff+0xf8>
 8003e46:	f108 0103 	add.w	r1, r8, #3
 8003e4a:	1b49      	subs	r1, r1, r5
 8003e4c:	f021 0103 	bic.w	r1, r1, #3
 8003e50:	3d03      	subs	r5, #3
 8003e52:	45a8      	cmp	r8, r5
 8003e54:	bf38      	it	cc
 8003e56:	2100      	movcc	r1, #0
 8003e58:	440b      	add	r3, r1
 8003e5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003e5e:	b191      	cbz	r1, 8003e86 <__mdiff+0x11a>
 8003e60:	6117      	str	r7, [r2, #16]
 8003e62:	e79d      	b.n	8003da0 <__mdiff+0x34>
 8003e64:	f854 1b04 	ldr.w	r1, [r4], #4
 8003e68:	46e6      	mov	lr, ip
 8003e6a:	0c08      	lsrs	r0, r1, #16
 8003e6c:	fa1c fc81 	uxtah	ip, ip, r1
 8003e70:	4471      	add	r1, lr
 8003e72:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003e76:	b289      	uxth	r1, r1
 8003e78:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003e7c:	f846 1b04 	str.w	r1, [r6], #4
 8003e80:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003e84:	e7dd      	b.n	8003e42 <__mdiff+0xd6>
 8003e86:	3f01      	subs	r7, #1
 8003e88:	e7e7      	b.n	8003e5a <__mdiff+0xee>
 8003e8a:	bf00      	nop
 8003e8c:	08004b24 	.word	0x08004b24
 8003e90:	08004b35 	.word	0x08004b35

08003e94 <__d2b>:
 8003e94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003e98:	460f      	mov	r7, r1
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	ec59 8b10 	vmov	r8, r9, d0
 8003ea0:	4616      	mov	r6, r2
 8003ea2:	f7ff fccd 	bl	8003840 <_Balloc>
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	b930      	cbnz	r0, 8003eb8 <__d2b+0x24>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b23      	ldr	r3, [pc, #140]	@ (8003f3c <__d2b+0xa8>)
 8003eae:	4824      	ldr	r0, [pc, #144]	@ (8003f40 <__d2b+0xac>)
 8003eb0:	f240 310f 	movw	r1, #783	@ 0x30f
 8003eb4:	f000 fa5a 	bl	800436c <__assert_func>
 8003eb8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003ec0:	b10d      	cbz	r5, 8003ec6 <__d2b+0x32>
 8003ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	f1b8 0300 	subs.w	r3, r8, #0
 8003ecc:	d023      	beq.n	8003f16 <__d2b+0x82>
 8003ece:	4668      	mov	r0, sp
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	f7ff fd7c 	bl	80039ce <__lo0bits>
 8003ed6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003eda:	b1d0      	cbz	r0, 8003f12 <__d2b+0x7e>
 8003edc:	f1c0 0320 	rsb	r3, r0, #32
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	430b      	orrs	r3, r1
 8003ee6:	40c2      	lsrs	r2, r0
 8003ee8:	6163      	str	r3, [r4, #20]
 8003eea:	9201      	str	r2, [sp, #4]
 8003eec:	9b01      	ldr	r3, [sp, #4]
 8003eee:	61a3      	str	r3, [r4, #24]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	bf0c      	ite	eq
 8003ef4:	2201      	moveq	r2, #1
 8003ef6:	2202      	movne	r2, #2
 8003ef8:	6122      	str	r2, [r4, #16]
 8003efa:	b1a5      	cbz	r5, 8003f26 <__d2b+0x92>
 8003efc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8003f00:	4405      	add	r5, r0
 8003f02:	603d      	str	r5, [r7, #0]
 8003f04:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003f08:	6030      	str	r0, [r6, #0]
 8003f0a:	4620      	mov	r0, r4
 8003f0c:	b003      	add	sp, #12
 8003f0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f12:	6161      	str	r1, [r4, #20]
 8003f14:	e7ea      	b.n	8003eec <__d2b+0x58>
 8003f16:	a801      	add	r0, sp, #4
 8003f18:	f7ff fd59 	bl	80039ce <__lo0bits>
 8003f1c:	9b01      	ldr	r3, [sp, #4]
 8003f1e:	6163      	str	r3, [r4, #20]
 8003f20:	3020      	adds	r0, #32
 8003f22:	2201      	movs	r2, #1
 8003f24:	e7e8      	b.n	8003ef8 <__d2b+0x64>
 8003f26:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003f2a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8003f2e:	6038      	str	r0, [r7, #0]
 8003f30:	6918      	ldr	r0, [r3, #16]
 8003f32:	f7ff fd2d 	bl	8003990 <__hi0bits>
 8003f36:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003f3a:	e7e5      	b.n	8003f08 <__d2b+0x74>
 8003f3c:	08004b24 	.word	0x08004b24
 8003f40:	08004b35 	.word	0x08004b35

08003f44 <__ssputs_r>:
 8003f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f48:	688e      	ldr	r6, [r1, #8]
 8003f4a:	461f      	mov	r7, r3
 8003f4c:	42be      	cmp	r6, r7
 8003f4e:	680b      	ldr	r3, [r1, #0]
 8003f50:	4682      	mov	sl, r0
 8003f52:	460c      	mov	r4, r1
 8003f54:	4690      	mov	r8, r2
 8003f56:	d82d      	bhi.n	8003fb4 <__ssputs_r+0x70>
 8003f58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003f5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003f60:	d026      	beq.n	8003fb0 <__ssputs_r+0x6c>
 8003f62:	6965      	ldr	r5, [r4, #20]
 8003f64:	6909      	ldr	r1, [r1, #16]
 8003f66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003f6a:	eba3 0901 	sub.w	r9, r3, r1
 8003f6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f72:	1c7b      	adds	r3, r7, #1
 8003f74:	444b      	add	r3, r9
 8003f76:	106d      	asrs	r5, r5, #1
 8003f78:	429d      	cmp	r5, r3
 8003f7a:	bf38      	it	cc
 8003f7c:	461d      	movcc	r5, r3
 8003f7e:	0553      	lsls	r3, r2, #21
 8003f80:	d527      	bpl.n	8003fd2 <__ssputs_r+0x8e>
 8003f82:	4629      	mov	r1, r5
 8003f84:	f7ff fbd0 	bl	8003728 <_malloc_r>
 8003f88:	4606      	mov	r6, r0
 8003f8a:	b360      	cbz	r0, 8003fe6 <__ssputs_r+0xa2>
 8003f8c:	6921      	ldr	r1, [r4, #16]
 8003f8e:	464a      	mov	r2, r9
 8003f90:	f7fe fcfb 	bl	800298a <memcpy>
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	6126      	str	r6, [r4, #16]
 8003fa2:	6165      	str	r5, [r4, #20]
 8003fa4:	444e      	add	r6, r9
 8003fa6:	eba5 0509 	sub.w	r5, r5, r9
 8003faa:	6026      	str	r6, [r4, #0]
 8003fac:	60a5      	str	r5, [r4, #8]
 8003fae:	463e      	mov	r6, r7
 8003fb0:	42be      	cmp	r6, r7
 8003fb2:	d900      	bls.n	8003fb6 <__ssputs_r+0x72>
 8003fb4:	463e      	mov	r6, r7
 8003fb6:	6820      	ldr	r0, [r4, #0]
 8003fb8:	4632      	mov	r2, r6
 8003fba:	4641      	mov	r1, r8
 8003fbc:	f7fe fc4b 	bl	8002856 <memmove>
 8003fc0:	68a3      	ldr	r3, [r4, #8]
 8003fc2:	1b9b      	subs	r3, r3, r6
 8003fc4:	60a3      	str	r3, [r4, #8]
 8003fc6:	6823      	ldr	r3, [r4, #0]
 8003fc8:	4433      	add	r3, r6
 8003fca:	6023      	str	r3, [r4, #0]
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fd2:	462a      	mov	r2, r5
 8003fd4:	f000 fa0e 	bl	80043f4 <_realloc_r>
 8003fd8:	4606      	mov	r6, r0
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d1e0      	bne.n	8003fa0 <__ssputs_r+0x5c>
 8003fde:	6921      	ldr	r1, [r4, #16]
 8003fe0:	4650      	mov	r0, sl
 8003fe2:	f7ff fb2d 	bl	8003640 <_free_r>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	f8ca 3000 	str.w	r3, [sl]
 8003fec:	89a3      	ldrh	r3, [r4, #12]
 8003fee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ff2:	81a3      	strh	r3, [r4, #12]
 8003ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff8:	e7e9      	b.n	8003fce <__ssputs_r+0x8a>
	...

08003ffc <_svfiprintf_r>:
 8003ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004000:	4698      	mov	r8, r3
 8004002:	898b      	ldrh	r3, [r1, #12]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	b09d      	sub	sp, #116	@ 0x74
 8004008:	4607      	mov	r7, r0
 800400a:	460d      	mov	r5, r1
 800400c:	4614      	mov	r4, r2
 800400e:	d510      	bpl.n	8004032 <_svfiprintf_r+0x36>
 8004010:	690b      	ldr	r3, [r1, #16]
 8004012:	b973      	cbnz	r3, 8004032 <_svfiprintf_r+0x36>
 8004014:	2140      	movs	r1, #64	@ 0x40
 8004016:	f7ff fb87 	bl	8003728 <_malloc_r>
 800401a:	6028      	str	r0, [r5, #0]
 800401c:	6128      	str	r0, [r5, #16]
 800401e:	b930      	cbnz	r0, 800402e <_svfiprintf_r+0x32>
 8004020:	230c      	movs	r3, #12
 8004022:	603b      	str	r3, [r7, #0]
 8004024:	f04f 30ff 	mov.w	r0, #4294967295
 8004028:	b01d      	add	sp, #116	@ 0x74
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	2340      	movs	r3, #64	@ 0x40
 8004030:	616b      	str	r3, [r5, #20]
 8004032:	2300      	movs	r3, #0
 8004034:	9309      	str	r3, [sp, #36]	@ 0x24
 8004036:	2320      	movs	r3, #32
 8004038:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800403c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004040:	2330      	movs	r3, #48	@ 0x30
 8004042:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80041e0 <_svfiprintf_r+0x1e4>
 8004046:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800404a:	f04f 0901 	mov.w	r9, #1
 800404e:	4623      	mov	r3, r4
 8004050:	469a      	mov	sl, r3
 8004052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004056:	b10a      	cbz	r2, 800405c <_svfiprintf_r+0x60>
 8004058:	2a25      	cmp	r2, #37	@ 0x25
 800405a:	d1f9      	bne.n	8004050 <_svfiprintf_r+0x54>
 800405c:	ebba 0b04 	subs.w	fp, sl, r4
 8004060:	d00b      	beq.n	800407a <_svfiprintf_r+0x7e>
 8004062:	465b      	mov	r3, fp
 8004064:	4622      	mov	r2, r4
 8004066:	4629      	mov	r1, r5
 8004068:	4638      	mov	r0, r7
 800406a:	f7ff ff6b 	bl	8003f44 <__ssputs_r>
 800406e:	3001      	adds	r0, #1
 8004070:	f000 80a7 	beq.w	80041c2 <_svfiprintf_r+0x1c6>
 8004074:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004076:	445a      	add	r2, fp
 8004078:	9209      	str	r2, [sp, #36]	@ 0x24
 800407a:	f89a 3000 	ldrb.w	r3, [sl]
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 809f 	beq.w	80041c2 <_svfiprintf_r+0x1c6>
 8004084:	2300      	movs	r3, #0
 8004086:	f04f 32ff 	mov.w	r2, #4294967295
 800408a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800408e:	f10a 0a01 	add.w	sl, sl, #1
 8004092:	9304      	str	r3, [sp, #16]
 8004094:	9307      	str	r3, [sp, #28]
 8004096:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800409a:	931a      	str	r3, [sp, #104]	@ 0x68
 800409c:	4654      	mov	r4, sl
 800409e:	2205      	movs	r2, #5
 80040a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040a4:	484e      	ldr	r0, [pc, #312]	@ (80041e0 <_svfiprintf_r+0x1e4>)
 80040a6:	f7fc f89b 	bl	80001e0 <memchr>
 80040aa:	9a04      	ldr	r2, [sp, #16]
 80040ac:	b9d8      	cbnz	r0, 80040e6 <_svfiprintf_r+0xea>
 80040ae:	06d0      	lsls	r0, r2, #27
 80040b0:	bf44      	itt	mi
 80040b2:	2320      	movmi	r3, #32
 80040b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040b8:	0711      	lsls	r1, r2, #28
 80040ba:	bf44      	itt	mi
 80040bc:	232b      	movmi	r3, #43	@ 0x2b
 80040be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80040c2:	f89a 3000 	ldrb.w	r3, [sl]
 80040c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80040c8:	d015      	beq.n	80040f6 <_svfiprintf_r+0xfa>
 80040ca:	9a07      	ldr	r2, [sp, #28]
 80040cc:	4654      	mov	r4, sl
 80040ce:	2000      	movs	r0, #0
 80040d0:	f04f 0c0a 	mov.w	ip, #10
 80040d4:	4621      	mov	r1, r4
 80040d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040da:	3b30      	subs	r3, #48	@ 0x30
 80040dc:	2b09      	cmp	r3, #9
 80040de:	d94b      	bls.n	8004178 <_svfiprintf_r+0x17c>
 80040e0:	b1b0      	cbz	r0, 8004110 <_svfiprintf_r+0x114>
 80040e2:	9207      	str	r2, [sp, #28]
 80040e4:	e014      	b.n	8004110 <_svfiprintf_r+0x114>
 80040e6:	eba0 0308 	sub.w	r3, r0, r8
 80040ea:	fa09 f303 	lsl.w	r3, r9, r3
 80040ee:	4313      	orrs	r3, r2
 80040f0:	9304      	str	r3, [sp, #16]
 80040f2:	46a2      	mov	sl, r4
 80040f4:	e7d2      	b.n	800409c <_svfiprintf_r+0xa0>
 80040f6:	9b03      	ldr	r3, [sp, #12]
 80040f8:	1d19      	adds	r1, r3, #4
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	9103      	str	r1, [sp, #12]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	bfbb      	ittet	lt
 8004102:	425b      	neglt	r3, r3
 8004104:	f042 0202 	orrlt.w	r2, r2, #2
 8004108:	9307      	strge	r3, [sp, #28]
 800410a:	9307      	strlt	r3, [sp, #28]
 800410c:	bfb8      	it	lt
 800410e:	9204      	strlt	r2, [sp, #16]
 8004110:	7823      	ldrb	r3, [r4, #0]
 8004112:	2b2e      	cmp	r3, #46	@ 0x2e
 8004114:	d10a      	bne.n	800412c <_svfiprintf_r+0x130>
 8004116:	7863      	ldrb	r3, [r4, #1]
 8004118:	2b2a      	cmp	r3, #42	@ 0x2a
 800411a:	d132      	bne.n	8004182 <_svfiprintf_r+0x186>
 800411c:	9b03      	ldr	r3, [sp, #12]
 800411e:	1d1a      	adds	r2, r3, #4
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	9203      	str	r2, [sp, #12]
 8004124:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004128:	3402      	adds	r4, #2
 800412a:	9305      	str	r3, [sp, #20]
 800412c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80041f0 <_svfiprintf_r+0x1f4>
 8004130:	7821      	ldrb	r1, [r4, #0]
 8004132:	2203      	movs	r2, #3
 8004134:	4650      	mov	r0, sl
 8004136:	f7fc f853 	bl	80001e0 <memchr>
 800413a:	b138      	cbz	r0, 800414c <_svfiprintf_r+0x150>
 800413c:	9b04      	ldr	r3, [sp, #16]
 800413e:	eba0 000a 	sub.w	r0, r0, sl
 8004142:	2240      	movs	r2, #64	@ 0x40
 8004144:	4082      	lsls	r2, r0
 8004146:	4313      	orrs	r3, r2
 8004148:	3401      	adds	r4, #1
 800414a:	9304      	str	r3, [sp, #16]
 800414c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004150:	4824      	ldr	r0, [pc, #144]	@ (80041e4 <_svfiprintf_r+0x1e8>)
 8004152:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004156:	2206      	movs	r2, #6
 8004158:	f7fc f842 	bl	80001e0 <memchr>
 800415c:	2800      	cmp	r0, #0
 800415e:	d036      	beq.n	80041ce <_svfiprintf_r+0x1d2>
 8004160:	4b21      	ldr	r3, [pc, #132]	@ (80041e8 <_svfiprintf_r+0x1ec>)
 8004162:	bb1b      	cbnz	r3, 80041ac <_svfiprintf_r+0x1b0>
 8004164:	9b03      	ldr	r3, [sp, #12]
 8004166:	3307      	adds	r3, #7
 8004168:	f023 0307 	bic.w	r3, r3, #7
 800416c:	3308      	adds	r3, #8
 800416e:	9303      	str	r3, [sp, #12]
 8004170:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004172:	4433      	add	r3, r6
 8004174:	9309      	str	r3, [sp, #36]	@ 0x24
 8004176:	e76a      	b.n	800404e <_svfiprintf_r+0x52>
 8004178:	fb0c 3202 	mla	r2, ip, r2, r3
 800417c:	460c      	mov	r4, r1
 800417e:	2001      	movs	r0, #1
 8004180:	e7a8      	b.n	80040d4 <_svfiprintf_r+0xd8>
 8004182:	2300      	movs	r3, #0
 8004184:	3401      	adds	r4, #1
 8004186:	9305      	str	r3, [sp, #20]
 8004188:	4619      	mov	r1, r3
 800418a:	f04f 0c0a 	mov.w	ip, #10
 800418e:	4620      	mov	r0, r4
 8004190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004194:	3a30      	subs	r2, #48	@ 0x30
 8004196:	2a09      	cmp	r2, #9
 8004198:	d903      	bls.n	80041a2 <_svfiprintf_r+0x1a6>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0c6      	beq.n	800412c <_svfiprintf_r+0x130>
 800419e:	9105      	str	r1, [sp, #20]
 80041a0:	e7c4      	b.n	800412c <_svfiprintf_r+0x130>
 80041a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041a6:	4604      	mov	r4, r0
 80041a8:	2301      	movs	r3, #1
 80041aa:	e7f0      	b.n	800418e <_svfiprintf_r+0x192>
 80041ac:	ab03      	add	r3, sp, #12
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	462a      	mov	r2, r5
 80041b2:	4b0e      	ldr	r3, [pc, #56]	@ (80041ec <_svfiprintf_r+0x1f0>)
 80041b4:	a904      	add	r1, sp, #16
 80041b6:	4638      	mov	r0, r7
 80041b8:	f7fd fe70 	bl	8001e9c <_printf_float>
 80041bc:	1c42      	adds	r2, r0, #1
 80041be:	4606      	mov	r6, r0
 80041c0:	d1d6      	bne.n	8004170 <_svfiprintf_r+0x174>
 80041c2:	89ab      	ldrh	r3, [r5, #12]
 80041c4:	065b      	lsls	r3, r3, #25
 80041c6:	f53f af2d 	bmi.w	8004024 <_svfiprintf_r+0x28>
 80041ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80041cc:	e72c      	b.n	8004028 <_svfiprintf_r+0x2c>
 80041ce:	ab03      	add	r3, sp, #12
 80041d0:	9300      	str	r3, [sp, #0]
 80041d2:	462a      	mov	r2, r5
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <_svfiprintf_r+0x1f0>)
 80041d6:	a904      	add	r1, sp, #16
 80041d8:	4638      	mov	r0, r7
 80041da:	f7fe f8f7 	bl	80023cc <_printf_i>
 80041de:	e7ed      	b.n	80041bc <_svfiprintf_r+0x1c0>
 80041e0:	08004c90 	.word	0x08004c90
 80041e4:	08004c9a 	.word	0x08004c9a
 80041e8:	08001e9d 	.word	0x08001e9d
 80041ec:	08003f45 	.word	0x08003f45
 80041f0:	08004c96 	.word	0x08004c96

080041f4 <__sflush_r>:
 80041f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80041f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041fc:	0716      	lsls	r6, r2, #28
 80041fe:	4605      	mov	r5, r0
 8004200:	460c      	mov	r4, r1
 8004202:	d454      	bmi.n	80042ae <__sflush_r+0xba>
 8004204:	684b      	ldr	r3, [r1, #4]
 8004206:	2b00      	cmp	r3, #0
 8004208:	dc02      	bgt.n	8004210 <__sflush_r+0x1c>
 800420a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	dd48      	ble.n	80042a2 <__sflush_r+0xae>
 8004210:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004212:	2e00      	cmp	r6, #0
 8004214:	d045      	beq.n	80042a2 <__sflush_r+0xae>
 8004216:	2300      	movs	r3, #0
 8004218:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800421c:	682f      	ldr	r7, [r5, #0]
 800421e:	6a21      	ldr	r1, [r4, #32]
 8004220:	602b      	str	r3, [r5, #0]
 8004222:	d030      	beq.n	8004286 <__sflush_r+0x92>
 8004224:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	0759      	lsls	r1, r3, #29
 800422a:	d505      	bpl.n	8004238 <__sflush_r+0x44>
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	1ad2      	subs	r2, r2, r3
 8004230:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004232:	b10b      	cbz	r3, 8004238 <__sflush_r+0x44>
 8004234:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004236:	1ad2      	subs	r2, r2, r3
 8004238:	2300      	movs	r3, #0
 800423a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800423c:	6a21      	ldr	r1, [r4, #32]
 800423e:	4628      	mov	r0, r5
 8004240:	47b0      	blx	r6
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	89a3      	ldrh	r3, [r4, #12]
 8004246:	d106      	bne.n	8004256 <__sflush_r+0x62>
 8004248:	6829      	ldr	r1, [r5, #0]
 800424a:	291d      	cmp	r1, #29
 800424c:	d82b      	bhi.n	80042a6 <__sflush_r+0xb2>
 800424e:	4a2a      	ldr	r2, [pc, #168]	@ (80042f8 <__sflush_r+0x104>)
 8004250:	410a      	asrs	r2, r1
 8004252:	07d6      	lsls	r6, r2, #31
 8004254:	d427      	bmi.n	80042a6 <__sflush_r+0xb2>
 8004256:	2200      	movs	r2, #0
 8004258:	6062      	str	r2, [r4, #4]
 800425a:	04d9      	lsls	r1, r3, #19
 800425c:	6922      	ldr	r2, [r4, #16]
 800425e:	6022      	str	r2, [r4, #0]
 8004260:	d504      	bpl.n	800426c <__sflush_r+0x78>
 8004262:	1c42      	adds	r2, r0, #1
 8004264:	d101      	bne.n	800426a <__sflush_r+0x76>
 8004266:	682b      	ldr	r3, [r5, #0]
 8004268:	b903      	cbnz	r3, 800426c <__sflush_r+0x78>
 800426a:	6560      	str	r0, [r4, #84]	@ 0x54
 800426c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800426e:	602f      	str	r7, [r5, #0]
 8004270:	b1b9      	cbz	r1, 80042a2 <__sflush_r+0xae>
 8004272:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004276:	4299      	cmp	r1, r3
 8004278:	d002      	beq.n	8004280 <__sflush_r+0x8c>
 800427a:	4628      	mov	r0, r5
 800427c:	f7ff f9e0 	bl	8003640 <_free_r>
 8004280:	2300      	movs	r3, #0
 8004282:	6363      	str	r3, [r4, #52]	@ 0x34
 8004284:	e00d      	b.n	80042a2 <__sflush_r+0xae>
 8004286:	2301      	movs	r3, #1
 8004288:	4628      	mov	r0, r5
 800428a:	47b0      	blx	r6
 800428c:	4602      	mov	r2, r0
 800428e:	1c50      	adds	r0, r2, #1
 8004290:	d1c9      	bne.n	8004226 <__sflush_r+0x32>
 8004292:	682b      	ldr	r3, [r5, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d0c6      	beq.n	8004226 <__sflush_r+0x32>
 8004298:	2b1d      	cmp	r3, #29
 800429a:	d001      	beq.n	80042a0 <__sflush_r+0xac>
 800429c:	2b16      	cmp	r3, #22
 800429e:	d11e      	bne.n	80042de <__sflush_r+0xea>
 80042a0:	602f      	str	r7, [r5, #0]
 80042a2:	2000      	movs	r0, #0
 80042a4:	e022      	b.n	80042ec <__sflush_r+0xf8>
 80042a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042aa:	b21b      	sxth	r3, r3
 80042ac:	e01b      	b.n	80042e6 <__sflush_r+0xf2>
 80042ae:	690f      	ldr	r7, [r1, #16]
 80042b0:	2f00      	cmp	r7, #0
 80042b2:	d0f6      	beq.n	80042a2 <__sflush_r+0xae>
 80042b4:	0793      	lsls	r3, r2, #30
 80042b6:	680e      	ldr	r6, [r1, #0]
 80042b8:	bf08      	it	eq
 80042ba:	694b      	ldreq	r3, [r1, #20]
 80042bc:	600f      	str	r7, [r1, #0]
 80042be:	bf18      	it	ne
 80042c0:	2300      	movne	r3, #0
 80042c2:	eba6 0807 	sub.w	r8, r6, r7
 80042c6:	608b      	str	r3, [r1, #8]
 80042c8:	f1b8 0f00 	cmp.w	r8, #0
 80042cc:	dde9      	ble.n	80042a2 <__sflush_r+0xae>
 80042ce:	6a21      	ldr	r1, [r4, #32]
 80042d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80042d2:	4643      	mov	r3, r8
 80042d4:	463a      	mov	r2, r7
 80042d6:	4628      	mov	r0, r5
 80042d8:	47b0      	blx	r6
 80042da:	2800      	cmp	r0, #0
 80042dc:	dc08      	bgt.n	80042f0 <__sflush_r+0xfc>
 80042de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042e6:	81a3      	strh	r3, [r4, #12]
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	4407      	add	r7, r0
 80042f2:	eba8 0800 	sub.w	r8, r8, r0
 80042f6:	e7e7      	b.n	80042c8 <__sflush_r+0xd4>
 80042f8:	dfbffffe 	.word	0xdfbffffe

080042fc <_fflush_r>:
 80042fc:	b538      	push	{r3, r4, r5, lr}
 80042fe:	690b      	ldr	r3, [r1, #16]
 8004300:	4605      	mov	r5, r0
 8004302:	460c      	mov	r4, r1
 8004304:	b913      	cbnz	r3, 800430c <_fflush_r+0x10>
 8004306:	2500      	movs	r5, #0
 8004308:	4628      	mov	r0, r5
 800430a:	bd38      	pop	{r3, r4, r5, pc}
 800430c:	b118      	cbz	r0, 8004316 <_fflush_r+0x1a>
 800430e:	6a03      	ldr	r3, [r0, #32]
 8004310:	b90b      	cbnz	r3, 8004316 <_fflush_r+0x1a>
 8004312:	f7fe fa07 	bl	8002724 <__sinit>
 8004316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f3      	beq.n	8004306 <_fflush_r+0xa>
 800431e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004320:	07d0      	lsls	r0, r2, #31
 8004322:	d404      	bmi.n	800432e <_fflush_r+0x32>
 8004324:	0599      	lsls	r1, r3, #22
 8004326:	d402      	bmi.n	800432e <_fflush_r+0x32>
 8004328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800432a:	f7fe fb2c 	bl	8002986 <__retarget_lock_acquire_recursive>
 800432e:	4628      	mov	r0, r5
 8004330:	4621      	mov	r1, r4
 8004332:	f7ff ff5f 	bl	80041f4 <__sflush_r>
 8004336:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004338:	07da      	lsls	r2, r3, #31
 800433a:	4605      	mov	r5, r0
 800433c:	d4e4      	bmi.n	8004308 <_fflush_r+0xc>
 800433e:	89a3      	ldrh	r3, [r4, #12]
 8004340:	059b      	lsls	r3, r3, #22
 8004342:	d4e1      	bmi.n	8004308 <_fflush_r+0xc>
 8004344:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004346:	f7fe fb1f 	bl	8002988 <__retarget_lock_release_recursive>
 800434a:	e7dd      	b.n	8004308 <_fflush_r+0xc>

0800434c <_sbrk_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4d06      	ldr	r5, [pc, #24]	@ (8004368 <_sbrk_r+0x1c>)
 8004350:	2300      	movs	r3, #0
 8004352:	4604      	mov	r4, r0
 8004354:	4608      	mov	r0, r1
 8004356:	602b      	str	r3, [r5, #0]
 8004358:	f7fd fc6c 	bl	8001c34 <_sbrk>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d102      	bne.n	8004366 <_sbrk_r+0x1a>
 8004360:	682b      	ldr	r3, [r5, #0]
 8004362:	b103      	cbz	r3, 8004366 <_sbrk_r+0x1a>
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	bd38      	pop	{r3, r4, r5, pc}
 8004368:	2000033c 	.word	0x2000033c

0800436c <__assert_func>:
 800436c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800436e:	4614      	mov	r4, r2
 8004370:	461a      	mov	r2, r3
 8004372:	4b09      	ldr	r3, [pc, #36]	@ (8004398 <__assert_func+0x2c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4605      	mov	r5, r0
 8004378:	68d8      	ldr	r0, [r3, #12]
 800437a:	b954      	cbnz	r4, 8004392 <__assert_func+0x26>
 800437c:	4b07      	ldr	r3, [pc, #28]	@ (800439c <__assert_func+0x30>)
 800437e:	461c      	mov	r4, r3
 8004380:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004384:	9100      	str	r1, [sp, #0]
 8004386:	462b      	mov	r3, r5
 8004388:	4905      	ldr	r1, [pc, #20]	@ (80043a0 <__assert_func+0x34>)
 800438a:	f000 f86f 	bl	800446c <fiprintf>
 800438e:	f000 f87f 	bl	8004490 <abort>
 8004392:	4b04      	ldr	r3, [pc, #16]	@ (80043a4 <__assert_func+0x38>)
 8004394:	e7f4      	b.n	8004380 <__assert_func+0x14>
 8004396:	bf00      	nop
 8004398:	20000014 	.word	0x20000014
 800439c:	08004ce6 	.word	0x08004ce6
 80043a0:	08004cb8 	.word	0x08004cb8
 80043a4:	08004cab 	.word	0x08004cab

080043a8 <_calloc_r>:
 80043a8:	b570      	push	{r4, r5, r6, lr}
 80043aa:	fba1 5402 	umull	r5, r4, r1, r2
 80043ae:	b93c      	cbnz	r4, 80043c0 <_calloc_r+0x18>
 80043b0:	4629      	mov	r1, r5
 80043b2:	f7ff f9b9 	bl	8003728 <_malloc_r>
 80043b6:	4606      	mov	r6, r0
 80043b8:	b928      	cbnz	r0, 80043c6 <_calloc_r+0x1e>
 80043ba:	2600      	movs	r6, #0
 80043bc:	4630      	mov	r0, r6
 80043be:	bd70      	pop	{r4, r5, r6, pc}
 80043c0:	220c      	movs	r2, #12
 80043c2:	6002      	str	r2, [r0, #0]
 80043c4:	e7f9      	b.n	80043ba <_calloc_r+0x12>
 80043c6:	462a      	mov	r2, r5
 80043c8:	4621      	mov	r1, r4
 80043ca:	f7fe fa5e 	bl	800288a <memset>
 80043ce:	e7f5      	b.n	80043bc <_calloc_r+0x14>

080043d0 <__ascii_mbtowc>:
 80043d0:	b082      	sub	sp, #8
 80043d2:	b901      	cbnz	r1, 80043d6 <__ascii_mbtowc+0x6>
 80043d4:	a901      	add	r1, sp, #4
 80043d6:	b142      	cbz	r2, 80043ea <__ascii_mbtowc+0x1a>
 80043d8:	b14b      	cbz	r3, 80043ee <__ascii_mbtowc+0x1e>
 80043da:	7813      	ldrb	r3, [r2, #0]
 80043dc:	600b      	str	r3, [r1, #0]
 80043de:	7812      	ldrb	r2, [r2, #0]
 80043e0:	1e10      	subs	r0, r2, #0
 80043e2:	bf18      	it	ne
 80043e4:	2001      	movne	r0, #1
 80043e6:	b002      	add	sp, #8
 80043e8:	4770      	bx	lr
 80043ea:	4610      	mov	r0, r2
 80043ec:	e7fb      	b.n	80043e6 <__ascii_mbtowc+0x16>
 80043ee:	f06f 0001 	mvn.w	r0, #1
 80043f2:	e7f8      	b.n	80043e6 <__ascii_mbtowc+0x16>

080043f4 <_realloc_r>:
 80043f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043f8:	4680      	mov	r8, r0
 80043fa:	4615      	mov	r5, r2
 80043fc:	460c      	mov	r4, r1
 80043fe:	b921      	cbnz	r1, 800440a <_realloc_r+0x16>
 8004400:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004404:	4611      	mov	r1, r2
 8004406:	f7ff b98f 	b.w	8003728 <_malloc_r>
 800440a:	b92a      	cbnz	r2, 8004418 <_realloc_r+0x24>
 800440c:	f7ff f918 	bl	8003640 <_free_r>
 8004410:	2400      	movs	r4, #0
 8004412:	4620      	mov	r0, r4
 8004414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004418:	f000 f841 	bl	800449e <_malloc_usable_size_r>
 800441c:	4285      	cmp	r5, r0
 800441e:	4606      	mov	r6, r0
 8004420:	d802      	bhi.n	8004428 <_realloc_r+0x34>
 8004422:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004426:	d8f4      	bhi.n	8004412 <_realloc_r+0x1e>
 8004428:	4629      	mov	r1, r5
 800442a:	4640      	mov	r0, r8
 800442c:	f7ff f97c 	bl	8003728 <_malloc_r>
 8004430:	4607      	mov	r7, r0
 8004432:	2800      	cmp	r0, #0
 8004434:	d0ec      	beq.n	8004410 <_realloc_r+0x1c>
 8004436:	42b5      	cmp	r5, r6
 8004438:	462a      	mov	r2, r5
 800443a:	4621      	mov	r1, r4
 800443c:	bf28      	it	cs
 800443e:	4632      	movcs	r2, r6
 8004440:	f7fe faa3 	bl	800298a <memcpy>
 8004444:	4621      	mov	r1, r4
 8004446:	4640      	mov	r0, r8
 8004448:	f7ff f8fa 	bl	8003640 <_free_r>
 800444c:	463c      	mov	r4, r7
 800444e:	e7e0      	b.n	8004412 <_realloc_r+0x1e>

08004450 <__ascii_wctomb>:
 8004450:	4603      	mov	r3, r0
 8004452:	4608      	mov	r0, r1
 8004454:	b141      	cbz	r1, 8004468 <__ascii_wctomb+0x18>
 8004456:	2aff      	cmp	r2, #255	@ 0xff
 8004458:	d904      	bls.n	8004464 <__ascii_wctomb+0x14>
 800445a:	228a      	movs	r2, #138	@ 0x8a
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	f04f 30ff 	mov.w	r0, #4294967295
 8004462:	4770      	bx	lr
 8004464:	700a      	strb	r2, [r1, #0]
 8004466:	2001      	movs	r0, #1
 8004468:	4770      	bx	lr
	...

0800446c <fiprintf>:
 800446c:	b40e      	push	{r1, r2, r3}
 800446e:	b503      	push	{r0, r1, lr}
 8004470:	4601      	mov	r1, r0
 8004472:	ab03      	add	r3, sp, #12
 8004474:	4805      	ldr	r0, [pc, #20]	@ (800448c <fiprintf+0x20>)
 8004476:	f853 2b04 	ldr.w	r2, [r3], #4
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	9301      	str	r3, [sp, #4]
 800447e:	f000 f83f 	bl	8004500 <_vfiprintf_r>
 8004482:	b002      	add	sp, #8
 8004484:	f85d eb04 	ldr.w	lr, [sp], #4
 8004488:	b003      	add	sp, #12
 800448a:	4770      	bx	lr
 800448c:	20000014 	.word	0x20000014

08004490 <abort>:
 8004490:	b508      	push	{r3, lr}
 8004492:	2006      	movs	r0, #6
 8004494:	f000 fa08 	bl	80048a8 <raise>
 8004498:	2001      	movs	r0, #1
 800449a:	f7fd fb53 	bl	8001b44 <_exit>

0800449e <_malloc_usable_size_r>:
 800449e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044a2:	1f18      	subs	r0, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bfbc      	itt	lt
 80044a8:	580b      	ldrlt	r3, [r1, r0]
 80044aa:	18c0      	addlt	r0, r0, r3
 80044ac:	4770      	bx	lr

080044ae <__sfputc_r>:
 80044ae:	6893      	ldr	r3, [r2, #8]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	b410      	push	{r4}
 80044b6:	6093      	str	r3, [r2, #8]
 80044b8:	da08      	bge.n	80044cc <__sfputc_r+0x1e>
 80044ba:	6994      	ldr	r4, [r2, #24]
 80044bc:	42a3      	cmp	r3, r4
 80044be:	db01      	blt.n	80044c4 <__sfputc_r+0x16>
 80044c0:	290a      	cmp	r1, #10
 80044c2:	d103      	bne.n	80044cc <__sfputc_r+0x1e>
 80044c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c8:	f000 b932 	b.w	8004730 <__swbuf_r>
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	1c58      	adds	r0, r3, #1
 80044d0:	6010      	str	r0, [r2, #0]
 80044d2:	7019      	strb	r1, [r3, #0]
 80044d4:	4608      	mov	r0, r1
 80044d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044da:	4770      	bx	lr

080044dc <__sfputs_r>:
 80044dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044de:	4606      	mov	r6, r0
 80044e0:	460f      	mov	r7, r1
 80044e2:	4614      	mov	r4, r2
 80044e4:	18d5      	adds	r5, r2, r3
 80044e6:	42ac      	cmp	r4, r5
 80044e8:	d101      	bne.n	80044ee <__sfputs_r+0x12>
 80044ea:	2000      	movs	r0, #0
 80044ec:	e007      	b.n	80044fe <__sfputs_r+0x22>
 80044ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044f2:	463a      	mov	r2, r7
 80044f4:	4630      	mov	r0, r6
 80044f6:	f7ff ffda 	bl	80044ae <__sfputc_r>
 80044fa:	1c43      	adds	r3, r0, #1
 80044fc:	d1f3      	bne.n	80044e6 <__sfputs_r+0xa>
 80044fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004500 <_vfiprintf_r>:
 8004500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004504:	460d      	mov	r5, r1
 8004506:	b09d      	sub	sp, #116	@ 0x74
 8004508:	4614      	mov	r4, r2
 800450a:	4698      	mov	r8, r3
 800450c:	4606      	mov	r6, r0
 800450e:	b118      	cbz	r0, 8004518 <_vfiprintf_r+0x18>
 8004510:	6a03      	ldr	r3, [r0, #32]
 8004512:	b90b      	cbnz	r3, 8004518 <_vfiprintf_r+0x18>
 8004514:	f7fe f906 	bl	8002724 <__sinit>
 8004518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800451a:	07d9      	lsls	r1, r3, #31
 800451c:	d405      	bmi.n	800452a <_vfiprintf_r+0x2a>
 800451e:	89ab      	ldrh	r3, [r5, #12]
 8004520:	059a      	lsls	r2, r3, #22
 8004522:	d402      	bmi.n	800452a <_vfiprintf_r+0x2a>
 8004524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004526:	f7fe fa2e 	bl	8002986 <__retarget_lock_acquire_recursive>
 800452a:	89ab      	ldrh	r3, [r5, #12]
 800452c:	071b      	lsls	r3, r3, #28
 800452e:	d501      	bpl.n	8004534 <_vfiprintf_r+0x34>
 8004530:	692b      	ldr	r3, [r5, #16]
 8004532:	b99b      	cbnz	r3, 800455c <_vfiprintf_r+0x5c>
 8004534:	4629      	mov	r1, r5
 8004536:	4630      	mov	r0, r6
 8004538:	f000 f938 	bl	80047ac <__swsetup_r>
 800453c:	b170      	cbz	r0, 800455c <_vfiprintf_r+0x5c>
 800453e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004540:	07dc      	lsls	r4, r3, #31
 8004542:	d504      	bpl.n	800454e <_vfiprintf_r+0x4e>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	b01d      	add	sp, #116	@ 0x74
 800454a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800454e:	89ab      	ldrh	r3, [r5, #12]
 8004550:	0598      	lsls	r0, r3, #22
 8004552:	d4f7      	bmi.n	8004544 <_vfiprintf_r+0x44>
 8004554:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004556:	f7fe fa17 	bl	8002988 <__retarget_lock_release_recursive>
 800455a:	e7f3      	b.n	8004544 <_vfiprintf_r+0x44>
 800455c:	2300      	movs	r3, #0
 800455e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004560:	2320      	movs	r3, #32
 8004562:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004566:	f8cd 800c 	str.w	r8, [sp, #12]
 800456a:	2330      	movs	r3, #48	@ 0x30
 800456c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800471c <_vfiprintf_r+0x21c>
 8004570:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004574:	f04f 0901 	mov.w	r9, #1
 8004578:	4623      	mov	r3, r4
 800457a:	469a      	mov	sl, r3
 800457c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004580:	b10a      	cbz	r2, 8004586 <_vfiprintf_r+0x86>
 8004582:	2a25      	cmp	r2, #37	@ 0x25
 8004584:	d1f9      	bne.n	800457a <_vfiprintf_r+0x7a>
 8004586:	ebba 0b04 	subs.w	fp, sl, r4
 800458a:	d00b      	beq.n	80045a4 <_vfiprintf_r+0xa4>
 800458c:	465b      	mov	r3, fp
 800458e:	4622      	mov	r2, r4
 8004590:	4629      	mov	r1, r5
 8004592:	4630      	mov	r0, r6
 8004594:	f7ff ffa2 	bl	80044dc <__sfputs_r>
 8004598:	3001      	adds	r0, #1
 800459a:	f000 80a7 	beq.w	80046ec <_vfiprintf_r+0x1ec>
 800459e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045a0:	445a      	add	r2, fp
 80045a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80045a4:	f89a 3000 	ldrb.w	r3, [sl]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 809f 	beq.w	80046ec <_vfiprintf_r+0x1ec>
 80045ae:	2300      	movs	r3, #0
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295
 80045b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045b8:	f10a 0a01 	add.w	sl, sl, #1
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	9307      	str	r3, [sp, #28]
 80045c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80045c6:	4654      	mov	r4, sl
 80045c8:	2205      	movs	r2, #5
 80045ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ce:	4853      	ldr	r0, [pc, #332]	@ (800471c <_vfiprintf_r+0x21c>)
 80045d0:	f7fb fe06 	bl	80001e0 <memchr>
 80045d4:	9a04      	ldr	r2, [sp, #16]
 80045d6:	b9d8      	cbnz	r0, 8004610 <_vfiprintf_r+0x110>
 80045d8:	06d1      	lsls	r1, r2, #27
 80045da:	bf44      	itt	mi
 80045dc:	2320      	movmi	r3, #32
 80045de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045e2:	0713      	lsls	r3, r2, #28
 80045e4:	bf44      	itt	mi
 80045e6:	232b      	movmi	r3, #43	@ 0x2b
 80045e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80045ec:	f89a 3000 	ldrb.w	r3, [sl]
 80045f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80045f2:	d015      	beq.n	8004620 <_vfiprintf_r+0x120>
 80045f4:	9a07      	ldr	r2, [sp, #28]
 80045f6:	4654      	mov	r4, sl
 80045f8:	2000      	movs	r0, #0
 80045fa:	f04f 0c0a 	mov.w	ip, #10
 80045fe:	4621      	mov	r1, r4
 8004600:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004604:	3b30      	subs	r3, #48	@ 0x30
 8004606:	2b09      	cmp	r3, #9
 8004608:	d94b      	bls.n	80046a2 <_vfiprintf_r+0x1a2>
 800460a:	b1b0      	cbz	r0, 800463a <_vfiprintf_r+0x13a>
 800460c:	9207      	str	r2, [sp, #28]
 800460e:	e014      	b.n	800463a <_vfiprintf_r+0x13a>
 8004610:	eba0 0308 	sub.w	r3, r0, r8
 8004614:	fa09 f303 	lsl.w	r3, r9, r3
 8004618:	4313      	orrs	r3, r2
 800461a:	9304      	str	r3, [sp, #16]
 800461c:	46a2      	mov	sl, r4
 800461e:	e7d2      	b.n	80045c6 <_vfiprintf_r+0xc6>
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	1d19      	adds	r1, r3, #4
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	9103      	str	r1, [sp, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	bfbb      	ittet	lt
 800462c:	425b      	neglt	r3, r3
 800462e:	f042 0202 	orrlt.w	r2, r2, #2
 8004632:	9307      	strge	r3, [sp, #28]
 8004634:	9307      	strlt	r3, [sp, #28]
 8004636:	bfb8      	it	lt
 8004638:	9204      	strlt	r2, [sp, #16]
 800463a:	7823      	ldrb	r3, [r4, #0]
 800463c:	2b2e      	cmp	r3, #46	@ 0x2e
 800463e:	d10a      	bne.n	8004656 <_vfiprintf_r+0x156>
 8004640:	7863      	ldrb	r3, [r4, #1]
 8004642:	2b2a      	cmp	r3, #42	@ 0x2a
 8004644:	d132      	bne.n	80046ac <_vfiprintf_r+0x1ac>
 8004646:	9b03      	ldr	r3, [sp, #12]
 8004648:	1d1a      	adds	r2, r3, #4
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	9203      	str	r2, [sp, #12]
 800464e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004652:	3402      	adds	r4, #2
 8004654:	9305      	str	r3, [sp, #20]
 8004656:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800472c <_vfiprintf_r+0x22c>
 800465a:	7821      	ldrb	r1, [r4, #0]
 800465c:	2203      	movs	r2, #3
 800465e:	4650      	mov	r0, sl
 8004660:	f7fb fdbe 	bl	80001e0 <memchr>
 8004664:	b138      	cbz	r0, 8004676 <_vfiprintf_r+0x176>
 8004666:	9b04      	ldr	r3, [sp, #16]
 8004668:	eba0 000a 	sub.w	r0, r0, sl
 800466c:	2240      	movs	r2, #64	@ 0x40
 800466e:	4082      	lsls	r2, r0
 8004670:	4313      	orrs	r3, r2
 8004672:	3401      	adds	r4, #1
 8004674:	9304      	str	r3, [sp, #16]
 8004676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467a:	4829      	ldr	r0, [pc, #164]	@ (8004720 <_vfiprintf_r+0x220>)
 800467c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004680:	2206      	movs	r2, #6
 8004682:	f7fb fdad 	bl	80001e0 <memchr>
 8004686:	2800      	cmp	r0, #0
 8004688:	d03f      	beq.n	800470a <_vfiprintf_r+0x20a>
 800468a:	4b26      	ldr	r3, [pc, #152]	@ (8004724 <_vfiprintf_r+0x224>)
 800468c:	bb1b      	cbnz	r3, 80046d6 <_vfiprintf_r+0x1d6>
 800468e:	9b03      	ldr	r3, [sp, #12]
 8004690:	3307      	adds	r3, #7
 8004692:	f023 0307 	bic.w	r3, r3, #7
 8004696:	3308      	adds	r3, #8
 8004698:	9303      	str	r3, [sp, #12]
 800469a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800469c:	443b      	add	r3, r7
 800469e:	9309      	str	r3, [sp, #36]	@ 0x24
 80046a0:	e76a      	b.n	8004578 <_vfiprintf_r+0x78>
 80046a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80046a6:	460c      	mov	r4, r1
 80046a8:	2001      	movs	r0, #1
 80046aa:	e7a8      	b.n	80045fe <_vfiprintf_r+0xfe>
 80046ac:	2300      	movs	r3, #0
 80046ae:	3401      	adds	r4, #1
 80046b0:	9305      	str	r3, [sp, #20]
 80046b2:	4619      	mov	r1, r3
 80046b4:	f04f 0c0a 	mov.w	ip, #10
 80046b8:	4620      	mov	r0, r4
 80046ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046be:	3a30      	subs	r2, #48	@ 0x30
 80046c0:	2a09      	cmp	r2, #9
 80046c2:	d903      	bls.n	80046cc <_vfiprintf_r+0x1cc>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0c6      	beq.n	8004656 <_vfiprintf_r+0x156>
 80046c8:	9105      	str	r1, [sp, #20]
 80046ca:	e7c4      	b.n	8004656 <_vfiprintf_r+0x156>
 80046cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80046d0:	4604      	mov	r4, r0
 80046d2:	2301      	movs	r3, #1
 80046d4:	e7f0      	b.n	80046b8 <_vfiprintf_r+0x1b8>
 80046d6:	ab03      	add	r3, sp, #12
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	462a      	mov	r2, r5
 80046dc:	4b12      	ldr	r3, [pc, #72]	@ (8004728 <_vfiprintf_r+0x228>)
 80046de:	a904      	add	r1, sp, #16
 80046e0:	4630      	mov	r0, r6
 80046e2:	f7fd fbdb 	bl	8001e9c <_printf_float>
 80046e6:	4607      	mov	r7, r0
 80046e8:	1c78      	adds	r0, r7, #1
 80046ea:	d1d6      	bne.n	800469a <_vfiprintf_r+0x19a>
 80046ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046ee:	07d9      	lsls	r1, r3, #31
 80046f0:	d405      	bmi.n	80046fe <_vfiprintf_r+0x1fe>
 80046f2:	89ab      	ldrh	r3, [r5, #12]
 80046f4:	059a      	lsls	r2, r3, #22
 80046f6:	d402      	bmi.n	80046fe <_vfiprintf_r+0x1fe>
 80046f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046fa:	f7fe f945 	bl	8002988 <__retarget_lock_release_recursive>
 80046fe:	89ab      	ldrh	r3, [r5, #12]
 8004700:	065b      	lsls	r3, r3, #25
 8004702:	f53f af1f 	bmi.w	8004544 <_vfiprintf_r+0x44>
 8004706:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004708:	e71e      	b.n	8004548 <_vfiprintf_r+0x48>
 800470a:	ab03      	add	r3, sp, #12
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	462a      	mov	r2, r5
 8004710:	4b05      	ldr	r3, [pc, #20]	@ (8004728 <_vfiprintf_r+0x228>)
 8004712:	a904      	add	r1, sp, #16
 8004714:	4630      	mov	r0, r6
 8004716:	f7fd fe59 	bl	80023cc <_printf_i>
 800471a:	e7e4      	b.n	80046e6 <_vfiprintf_r+0x1e6>
 800471c:	08004c90 	.word	0x08004c90
 8004720:	08004c9a 	.word	0x08004c9a
 8004724:	08001e9d 	.word	0x08001e9d
 8004728:	080044dd 	.word	0x080044dd
 800472c:	08004c96 	.word	0x08004c96

08004730 <__swbuf_r>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	460e      	mov	r6, r1
 8004734:	4614      	mov	r4, r2
 8004736:	4605      	mov	r5, r0
 8004738:	b118      	cbz	r0, 8004742 <__swbuf_r+0x12>
 800473a:	6a03      	ldr	r3, [r0, #32]
 800473c:	b90b      	cbnz	r3, 8004742 <__swbuf_r+0x12>
 800473e:	f7fd fff1 	bl	8002724 <__sinit>
 8004742:	69a3      	ldr	r3, [r4, #24]
 8004744:	60a3      	str	r3, [r4, #8]
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	071a      	lsls	r2, r3, #28
 800474a:	d501      	bpl.n	8004750 <__swbuf_r+0x20>
 800474c:	6923      	ldr	r3, [r4, #16]
 800474e:	b943      	cbnz	r3, 8004762 <__swbuf_r+0x32>
 8004750:	4621      	mov	r1, r4
 8004752:	4628      	mov	r0, r5
 8004754:	f000 f82a 	bl	80047ac <__swsetup_r>
 8004758:	b118      	cbz	r0, 8004762 <__swbuf_r+0x32>
 800475a:	f04f 37ff 	mov.w	r7, #4294967295
 800475e:	4638      	mov	r0, r7
 8004760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004762:	6823      	ldr	r3, [r4, #0]
 8004764:	6922      	ldr	r2, [r4, #16]
 8004766:	1a98      	subs	r0, r3, r2
 8004768:	6963      	ldr	r3, [r4, #20]
 800476a:	b2f6      	uxtb	r6, r6
 800476c:	4283      	cmp	r3, r0
 800476e:	4637      	mov	r7, r6
 8004770:	dc05      	bgt.n	800477e <__swbuf_r+0x4e>
 8004772:	4621      	mov	r1, r4
 8004774:	4628      	mov	r0, r5
 8004776:	f7ff fdc1 	bl	80042fc <_fflush_r>
 800477a:	2800      	cmp	r0, #0
 800477c:	d1ed      	bne.n	800475a <__swbuf_r+0x2a>
 800477e:	68a3      	ldr	r3, [r4, #8]
 8004780:	3b01      	subs	r3, #1
 8004782:	60a3      	str	r3, [r4, #8]
 8004784:	6823      	ldr	r3, [r4, #0]
 8004786:	1c5a      	adds	r2, r3, #1
 8004788:	6022      	str	r2, [r4, #0]
 800478a:	701e      	strb	r6, [r3, #0]
 800478c:	6962      	ldr	r2, [r4, #20]
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	429a      	cmp	r2, r3
 8004792:	d004      	beq.n	800479e <__swbuf_r+0x6e>
 8004794:	89a3      	ldrh	r3, [r4, #12]
 8004796:	07db      	lsls	r3, r3, #31
 8004798:	d5e1      	bpl.n	800475e <__swbuf_r+0x2e>
 800479a:	2e0a      	cmp	r6, #10
 800479c:	d1df      	bne.n	800475e <__swbuf_r+0x2e>
 800479e:	4621      	mov	r1, r4
 80047a0:	4628      	mov	r0, r5
 80047a2:	f7ff fdab 	bl	80042fc <_fflush_r>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d0d9      	beq.n	800475e <__swbuf_r+0x2e>
 80047aa:	e7d6      	b.n	800475a <__swbuf_r+0x2a>

080047ac <__swsetup_r>:
 80047ac:	b538      	push	{r3, r4, r5, lr}
 80047ae:	4b29      	ldr	r3, [pc, #164]	@ (8004854 <__swsetup_r+0xa8>)
 80047b0:	4605      	mov	r5, r0
 80047b2:	6818      	ldr	r0, [r3, #0]
 80047b4:	460c      	mov	r4, r1
 80047b6:	b118      	cbz	r0, 80047c0 <__swsetup_r+0x14>
 80047b8:	6a03      	ldr	r3, [r0, #32]
 80047ba:	b90b      	cbnz	r3, 80047c0 <__swsetup_r+0x14>
 80047bc:	f7fd ffb2 	bl	8002724 <__sinit>
 80047c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c4:	0719      	lsls	r1, r3, #28
 80047c6:	d422      	bmi.n	800480e <__swsetup_r+0x62>
 80047c8:	06da      	lsls	r2, r3, #27
 80047ca:	d407      	bmi.n	80047dc <__swsetup_r+0x30>
 80047cc:	2209      	movs	r2, #9
 80047ce:	602a      	str	r2, [r5, #0]
 80047d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295
 80047da:	e033      	b.n	8004844 <__swsetup_r+0x98>
 80047dc:	0758      	lsls	r0, r3, #29
 80047de:	d512      	bpl.n	8004806 <__swsetup_r+0x5a>
 80047e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047e2:	b141      	cbz	r1, 80047f6 <__swsetup_r+0x4a>
 80047e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047e8:	4299      	cmp	r1, r3
 80047ea:	d002      	beq.n	80047f2 <__swsetup_r+0x46>
 80047ec:	4628      	mov	r0, r5
 80047ee:	f7fe ff27 	bl	8003640 <_free_r>
 80047f2:	2300      	movs	r3, #0
 80047f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80047f6:	89a3      	ldrh	r3, [r4, #12]
 80047f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	2300      	movs	r3, #0
 8004800:	6063      	str	r3, [r4, #4]
 8004802:	6923      	ldr	r3, [r4, #16]
 8004804:	6023      	str	r3, [r4, #0]
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f043 0308 	orr.w	r3, r3, #8
 800480c:	81a3      	strh	r3, [r4, #12]
 800480e:	6923      	ldr	r3, [r4, #16]
 8004810:	b94b      	cbnz	r3, 8004826 <__swsetup_r+0x7a>
 8004812:	89a3      	ldrh	r3, [r4, #12]
 8004814:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800481c:	d003      	beq.n	8004826 <__swsetup_r+0x7a>
 800481e:	4621      	mov	r1, r4
 8004820:	4628      	mov	r0, r5
 8004822:	f000 f883 	bl	800492c <__smakebuf_r>
 8004826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800482a:	f013 0201 	ands.w	r2, r3, #1
 800482e:	d00a      	beq.n	8004846 <__swsetup_r+0x9a>
 8004830:	2200      	movs	r2, #0
 8004832:	60a2      	str	r2, [r4, #8]
 8004834:	6962      	ldr	r2, [r4, #20]
 8004836:	4252      	negs	r2, r2
 8004838:	61a2      	str	r2, [r4, #24]
 800483a:	6922      	ldr	r2, [r4, #16]
 800483c:	b942      	cbnz	r2, 8004850 <__swsetup_r+0xa4>
 800483e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004842:	d1c5      	bne.n	80047d0 <__swsetup_r+0x24>
 8004844:	bd38      	pop	{r3, r4, r5, pc}
 8004846:	0799      	lsls	r1, r3, #30
 8004848:	bf58      	it	pl
 800484a:	6962      	ldrpl	r2, [r4, #20]
 800484c:	60a2      	str	r2, [r4, #8]
 800484e:	e7f4      	b.n	800483a <__swsetup_r+0x8e>
 8004850:	2000      	movs	r0, #0
 8004852:	e7f7      	b.n	8004844 <__swsetup_r+0x98>
 8004854:	20000014 	.word	0x20000014

08004858 <_raise_r>:
 8004858:	291f      	cmp	r1, #31
 800485a:	b538      	push	{r3, r4, r5, lr}
 800485c:	4605      	mov	r5, r0
 800485e:	460c      	mov	r4, r1
 8004860:	d904      	bls.n	800486c <_raise_r+0x14>
 8004862:	2316      	movs	r3, #22
 8004864:	6003      	str	r3, [r0, #0]
 8004866:	f04f 30ff 	mov.w	r0, #4294967295
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800486e:	b112      	cbz	r2, 8004876 <_raise_r+0x1e>
 8004870:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004874:	b94b      	cbnz	r3, 800488a <_raise_r+0x32>
 8004876:	4628      	mov	r0, r5
 8004878:	f000 f830 	bl	80048dc <_getpid_r>
 800487c:	4622      	mov	r2, r4
 800487e:	4601      	mov	r1, r0
 8004880:	4628      	mov	r0, r5
 8004882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004886:	f000 b817 	b.w	80048b8 <_kill_r>
 800488a:	2b01      	cmp	r3, #1
 800488c:	d00a      	beq.n	80048a4 <_raise_r+0x4c>
 800488e:	1c59      	adds	r1, r3, #1
 8004890:	d103      	bne.n	800489a <_raise_r+0x42>
 8004892:	2316      	movs	r3, #22
 8004894:	6003      	str	r3, [r0, #0]
 8004896:	2001      	movs	r0, #1
 8004898:	e7e7      	b.n	800486a <_raise_r+0x12>
 800489a:	2100      	movs	r1, #0
 800489c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80048a0:	4620      	mov	r0, r4
 80048a2:	4798      	blx	r3
 80048a4:	2000      	movs	r0, #0
 80048a6:	e7e0      	b.n	800486a <_raise_r+0x12>

080048a8 <raise>:
 80048a8:	4b02      	ldr	r3, [pc, #8]	@ (80048b4 <raise+0xc>)
 80048aa:	4601      	mov	r1, r0
 80048ac:	6818      	ldr	r0, [r3, #0]
 80048ae:	f7ff bfd3 	b.w	8004858 <_raise_r>
 80048b2:	bf00      	nop
 80048b4:	20000014 	.word	0x20000014

080048b8 <_kill_r>:
 80048b8:	b538      	push	{r3, r4, r5, lr}
 80048ba:	4d07      	ldr	r5, [pc, #28]	@ (80048d8 <_kill_r+0x20>)
 80048bc:	2300      	movs	r3, #0
 80048be:	4604      	mov	r4, r0
 80048c0:	4608      	mov	r0, r1
 80048c2:	4611      	mov	r1, r2
 80048c4:	602b      	str	r3, [r5, #0]
 80048c6:	f7fd f92d 	bl	8001b24 <_kill>
 80048ca:	1c43      	adds	r3, r0, #1
 80048cc:	d102      	bne.n	80048d4 <_kill_r+0x1c>
 80048ce:	682b      	ldr	r3, [r5, #0]
 80048d0:	b103      	cbz	r3, 80048d4 <_kill_r+0x1c>
 80048d2:	6023      	str	r3, [r4, #0]
 80048d4:	bd38      	pop	{r3, r4, r5, pc}
 80048d6:	bf00      	nop
 80048d8:	2000033c 	.word	0x2000033c

080048dc <_getpid_r>:
 80048dc:	f7fd b91a 	b.w	8001b14 <_getpid>

080048e0 <__swhatbuf_r>:
 80048e0:	b570      	push	{r4, r5, r6, lr}
 80048e2:	460c      	mov	r4, r1
 80048e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e8:	2900      	cmp	r1, #0
 80048ea:	b096      	sub	sp, #88	@ 0x58
 80048ec:	4615      	mov	r5, r2
 80048ee:	461e      	mov	r6, r3
 80048f0:	da0d      	bge.n	800490e <__swhatbuf_r+0x2e>
 80048f2:	89a3      	ldrh	r3, [r4, #12]
 80048f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	bf14      	ite	ne
 80048fe:	2340      	movne	r3, #64	@ 0x40
 8004900:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004904:	2000      	movs	r0, #0
 8004906:	6031      	str	r1, [r6, #0]
 8004908:	602b      	str	r3, [r5, #0]
 800490a:	b016      	add	sp, #88	@ 0x58
 800490c:	bd70      	pop	{r4, r5, r6, pc}
 800490e:	466a      	mov	r2, sp
 8004910:	f000 f848 	bl	80049a4 <_fstat_r>
 8004914:	2800      	cmp	r0, #0
 8004916:	dbec      	blt.n	80048f2 <__swhatbuf_r+0x12>
 8004918:	9901      	ldr	r1, [sp, #4]
 800491a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800491e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004922:	4259      	negs	r1, r3
 8004924:	4159      	adcs	r1, r3
 8004926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800492a:	e7eb      	b.n	8004904 <__swhatbuf_r+0x24>

0800492c <__smakebuf_r>:
 800492c:	898b      	ldrh	r3, [r1, #12]
 800492e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004930:	079d      	lsls	r5, r3, #30
 8004932:	4606      	mov	r6, r0
 8004934:	460c      	mov	r4, r1
 8004936:	d507      	bpl.n	8004948 <__smakebuf_r+0x1c>
 8004938:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	6123      	str	r3, [r4, #16]
 8004940:	2301      	movs	r3, #1
 8004942:	6163      	str	r3, [r4, #20]
 8004944:	b003      	add	sp, #12
 8004946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004948:	ab01      	add	r3, sp, #4
 800494a:	466a      	mov	r2, sp
 800494c:	f7ff ffc8 	bl	80048e0 <__swhatbuf_r>
 8004950:	9f00      	ldr	r7, [sp, #0]
 8004952:	4605      	mov	r5, r0
 8004954:	4639      	mov	r1, r7
 8004956:	4630      	mov	r0, r6
 8004958:	f7fe fee6 	bl	8003728 <_malloc_r>
 800495c:	b948      	cbnz	r0, 8004972 <__smakebuf_r+0x46>
 800495e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004962:	059a      	lsls	r2, r3, #22
 8004964:	d4ee      	bmi.n	8004944 <__smakebuf_r+0x18>
 8004966:	f023 0303 	bic.w	r3, r3, #3
 800496a:	f043 0302 	orr.w	r3, r3, #2
 800496e:	81a3      	strh	r3, [r4, #12]
 8004970:	e7e2      	b.n	8004938 <__smakebuf_r+0xc>
 8004972:	89a3      	ldrh	r3, [r4, #12]
 8004974:	6020      	str	r0, [r4, #0]
 8004976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800497a:	81a3      	strh	r3, [r4, #12]
 800497c:	9b01      	ldr	r3, [sp, #4]
 800497e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004982:	b15b      	cbz	r3, 800499c <__smakebuf_r+0x70>
 8004984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004988:	4630      	mov	r0, r6
 800498a:	f000 f81d 	bl	80049c8 <_isatty_r>
 800498e:	b128      	cbz	r0, 800499c <__smakebuf_r+0x70>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	f023 0303 	bic.w	r3, r3, #3
 8004996:	f043 0301 	orr.w	r3, r3, #1
 800499a:	81a3      	strh	r3, [r4, #12]
 800499c:	89a3      	ldrh	r3, [r4, #12]
 800499e:	431d      	orrs	r5, r3
 80049a0:	81a5      	strh	r5, [r4, #12]
 80049a2:	e7cf      	b.n	8004944 <__smakebuf_r+0x18>

080049a4 <_fstat_r>:
 80049a4:	b538      	push	{r3, r4, r5, lr}
 80049a6:	4d07      	ldr	r5, [pc, #28]	@ (80049c4 <_fstat_r+0x20>)
 80049a8:	2300      	movs	r3, #0
 80049aa:	4604      	mov	r4, r0
 80049ac:	4608      	mov	r0, r1
 80049ae:	4611      	mov	r1, r2
 80049b0:	602b      	str	r3, [r5, #0]
 80049b2:	f7fd f917 	bl	8001be4 <_fstat>
 80049b6:	1c43      	adds	r3, r0, #1
 80049b8:	d102      	bne.n	80049c0 <_fstat_r+0x1c>
 80049ba:	682b      	ldr	r3, [r5, #0]
 80049bc:	b103      	cbz	r3, 80049c0 <_fstat_r+0x1c>
 80049be:	6023      	str	r3, [r4, #0]
 80049c0:	bd38      	pop	{r3, r4, r5, pc}
 80049c2:	bf00      	nop
 80049c4:	2000033c 	.word	0x2000033c

080049c8 <_isatty_r>:
 80049c8:	b538      	push	{r3, r4, r5, lr}
 80049ca:	4d06      	ldr	r5, [pc, #24]	@ (80049e4 <_isatty_r+0x1c>)
 80049cc:	2300      	movs	r3, #0
 80049ce:	4604      	mov	r4, r0
 80049d0:	4608      	mov	r0, r1
 80049d2:	602b      	str	r3, [r5, #0]
 80049d4:	f7fd f916 	bl	8001c04 <_isatty>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_isatty_r+0x1a>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_isatty_r+0x1a>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	2000033c 	.word	0x2000033c

080049e8 <_init>:
 80049e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ea:	bf00      	nop
 80049ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049ee:	bc08      	pop	{r3}
 80049f0:	469e      	mov	lr, r3
 80049f2:	4770      	bx	lr

080049f4 <_fini>:
 80049f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f6:	bf00      	nop
 80049f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049fa:	bc08      	pop	{r3}
 80049fc:	469e      	mov	lr, r3
 80049fe:	4770      	bx	lr
